// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using opensis.data.Models;

#nullable disable

namespace opensis.data.Migrations.MySqlMigrations
{
    [DbContext(typeof(CRMContextMySQL))]
    [Migration("20220217100255_AddMembershipIdInStaffSchoolInfoTable")]
    partial class AddMembershipIdInStaffSchoolInfoTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("opensis.data.Models.AllCourseSectionView", b =>
                {
                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<bool?>("AllowStudentConflict")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_student_conflict");

                    b.Property<bool?>("AllowTeacherConflict")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_teacher_conflict");

                    b.Property<int?>("AttendanceCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("attendance_category_id");

                    b.Property<bool?>("AttendanceTaken")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("attendance_taken");

                    b.Property<int?>("BlockId")
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<int?>("BlockPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("block_period_id");

                    b.Property<int?>("BlockRoomId")
                        .HasColumnType("int")
                        .HasColumnName("block_room_id");

                    b.Property<DateTime?>("CalDate")
                        .HasColumnType("date")
                        .HasColumnName("cal_date");

                    b.Property<string>("CalDay")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("cal_day");

                    b.Property<int?>("CalPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("cal_period_id");

                    b.Property<int?>("CalRoomId")
                        .HasColumnType("int")
                        .HasColumnName("cal_room_id");

                    b.Property<int?>("CalendarId")
                        .HasColumnType("int")
                        .HasColumnName("calendar_id");

                    b.Property<string>("CourseGradeLevel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_grade_level");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("CourseProgram")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("course_program");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CourseSectionName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("course_section_name");

                    b.Property<string>("CourseSubject")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("course_subject");

                    b.Property<string>("CourseTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("course_title");

                    b.Property<DateTime?>("DurationEndDate")
                        .HasColumnType("date")
                        .HasColumnName("duration_end_date");

                    b.Property<DateTime?>("DurationStartDate")
                        .HasColumnType("date")
                        .HasColumnName("duration_start_date");

                    b.Property<string>("FixedDays")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fixed_days");

                    b.Property<int?>("FixedPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("fixed_period_id");

                    b.Property<int?>("FixedRoomId")
                        .HasColumnType("int")
                        .HasColumnName("fixed_room_id");

                    b.Property<int?>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int?>("PrgrsprdMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("prgrsprd_marking_period_id");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<string>("ScheduleType")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("schedule_type");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int?>("Seats")
                        .HasColumnType("int")
                        .HasColumnName("seats");

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("smstr_marking_period_id");

                    b.Property<bool?>("TakeAttendanceBlock")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("take_attendance_block");

                    b.Property<bool?>("TakeAttendanceCalendar")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("take_attendance_calendar");

                    b.Property<bool?>("TakeAttendanceVariable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("take_attendance_variable");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<string>("VarDay")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("var_day");

                    b.Property<int?>("VarPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("var_period_id");

                    b.Property<int?>("VarRoomId")
                        .HasColumnType("int")
                        .HasColumnName("var_room_id");

                    b.Property<int?>("YrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("yr_marking_period_id");

                    b.ToView("all_course_section_view");
                });

            modelBuilder.Entity("opensis.data.Models.ApiControllerKeyMapping", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("KeyId")
                        .HasColumnType("int")
                        .HasColumnName("key_id");

                    b.Property<int>("ControllerId")
                        .HasColumnType("int")
                        .HasColumnName("controller_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "KeyId", "ControllerId")
                        .HasName("PK_api_controller_key_mapping_tenant_id");

                    b.HasIndex(new[] { "TenantId", "ControllerId" }, "IX_api_controller_key_mapping_tenant_id_controller");

                    b.ToTable("api_controller_key_mapping", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ApiControllerList", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("ControllerId")
                        .HasColumnType("int")
                        .HasColumnName("controller_id");

                    b.Property<string>("ApiTitle")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("api_title");

                    b.Property<string>("ControllerPath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("controller_path");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Module")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("module");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "ControllerId")
                        .HasName("PK_api_controller_list_tenant_id");

                    b.ToTable("api_controller_list", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ApiKeysMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("KeyId")
                        .HasColumnType("int")
                        .HasColumnName("key_id");

                    b.Property<string>("ApiKey")
                        .HasColumnType("longtext")
                        .HasColumnName("api_key");

                    b.Property<string>("ApiTitle")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("api_title");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Emailaddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emailaddress");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("date")
                        .HasColumnName("expires");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("revoked");

                    b.Property<string>("Scopes")
                        .HasColumnType("longtext")
                        .HasColumnName("scopes");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TenantId", "SchoolId", "KeyId")
                        .HasName("PK_api_keys_master_tenant_id");

                    b.ToTable("api_keys_master", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Assignment", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("date")
                        .HasColumnName("assignment_date");

                    b.Property<string>("AssignmentDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("assignment_description");

                    b.Property<string>("AssignmentTitle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("assignment_title");

                    b.Property<int>("AssignmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_type_id");

                    b.Property<int?>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<int?>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "AssignmentId")
                        .HasName("PK_assignment_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "AssignmentTypeId" }, "IX_assignment_tenant_id_school_id_assignment_type");

                    b.HasIndex(new[] { "TenantId", "StaffId" }, "IX_assignment_tenant_id_staff_id");

                    b.ToTable("assignment", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.AssignmentType", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("AssignmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_type_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int?>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("PrgrsprdMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("prgrsprd_marking_period_id");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("smstr_marking_period_id");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("Weightage")
                        .HasColumnType("int")
                        .HasColumnName("weightage");

                    b.Property<int?>("YrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("yr_marking_period_id");

                    b.HasKey("TenantId", "SchoolId", "AssignmentTypeId")
                        .HasName("PK_assignment_type_tenant_id");

                    b.HasIndex("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId");

                    b.HasIndex("TenantId", "SchoolId", "QtrMarkingPeriodId");

                    b.HasIndex("TenantId", "SchoolId", "SmstrMarkingPeriodId");

                    b.HasIndex("TenantId", "SchoolId", "YrMarkingPeriodId");

                    b.ToTable("assignment_type", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.AttendanceCode", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("AttendanceCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("attendance_category_id");

                    b.Property<int>("AttendanceCode1")
                        .HasColumnType("int")
                        .HasColumnName("attendance_code");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("AllowEntryBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("allow_entry_by");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("DefaultCode")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("default_code");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("short_name");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("StateCode")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("state_code");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "AttendanceCategoryId", "AttendanceCode1")
                        .HasName("PK_attendance_code_tenant_id");

                    b.ToTable("attendance_code", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.AttendanceCodeCategories", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("AttendanceCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("attendance_category_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "AttendanceCategoryId")
                        .HasName("PK_attendance_code_categories_tenant_id");

                    b.ToTable("attendance_code_categories", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.BellSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<DateTime>("BellScheduleDate")
                        .HasColumnType("date")
                        .HasColumnName("bell_schedule_date");

                    b.Property<int?>("BlockId")
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "AcademicYear", "BellScheduleDate")
                        .HasName("PK_bell_schedule_tenant_id");

                    b.ToTable("bell_schedule", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Block", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("BlockId")
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<long?>("BlockSortOrder")
                        .HasColumnType("bigint")
                        .HasColumnName("block_sort_order");

                    b.Property<string>("BlockTitle")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("block_title");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("FullDayMinutes")
                        .HasColumnType("int")
                        .HasColumnName("full_day_minutes");

                    b.Property<int?>("HalfDayMinutes")
                        .HasColumnType("int")
                        .HasColumnName("half_day_minutes");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "BlockId")
                        .HasName("PK_block_tenant_id");

                    b.ToTable("block", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.BlockPeriod", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("BlockId")
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<bool?>("CalculateAttendance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("calculate_attendance");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("PeriodEndTime")
                        .HasMaxLength(8)
                        .HasColumnType("char(8)")
                        .HasColumnName("period_end_time")
                        .IsFixedLength();

                    b.Property<string>("PeriodShortName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("period_short_name");

                    b.Property<int?>("PeriodSortOrder")
                        .HasColumnType("int")
                        .HasColumnName("period_sort_order");

                    b.Property<string>("PeriodStartTime")
                        .HasMaxLength(8)
                        .HasColumnType("char(8)")
                        .HasColumnName("period_start_time")
                        .IsFixedLength();

                    b.Property<string>("PeriodTitle")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("period_title");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .HasName("PK_block_period_tenant_id");

                    b.ToTable("block_period", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.CalendarEvents", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("CalendarId")
                        .HasColumnType("int")
                        .HasColumnName("calendar_id");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<bool?>("ApplicableToAllSchool")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("applicable_to_all_school");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("EventColor")
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("event_color");

                    b.Property<bool?>("IsHoliday")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_holiday");

                    b.Property<DateTime?>("SchoolDate")
                        .HasColumnType("date")
                        .HasColumnName("school_date");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<bool?>("SystemWideEvent")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("system_wide_event");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("VisibleToMembershipId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("visible_to_membership_id");

                    b.HasKey("TenantId", "CalendarId", "EventId")
                        .HasName("PK_calendar_events_tenant_id");

                    b.ToTable("calendar_events", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("StateId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("stateid");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StateId" }, "IX_city_stateid");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("countrycode");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.ToTable("country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "AS",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 5,
                            CountryCode = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 6,
                            CountryCode = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 7,
                            CountryCode = "AI",
                            Name = "Anguilla"
                        },
                        new
                        {
                            Id = 8,
                            CountryCode = "AQ",
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 9,
                            CountryCode = "AG",
                            Name = "Antigua And Barbuda"
                        },
                        new
                        {
                            Id = 10,
                            CountryCode = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 11,
                            CountryCode = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 12,
                            CountryCode = "AW",
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 13,
                            CountryCode = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 14,
                            CountryCode = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 15,
                            CountryCode = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 16,
                            CountryCode = "BS",
                            Name = "Bahamas The"
                        },
                        new
                        {
                            Id = 17,
                            CountryCode = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 18,
                            CountryCode = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 19,
                            CountryCode = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 20,
                            CountryCode = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 21,
                            CountryCode = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 22,
                            CountryCode = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 23,
                            CountryCode = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 24,
                            CountryCode = "BM",
                            Name = "Bermuda"
                        },
                        new
                        {
                            Id = 25,
                            CountryCode = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 26,
                            CountryCode = "BO",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 27,
                            CountryCode = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 28,
                            CountryCode = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 29,
                            CountryCode = "BV",
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Id = 30,
                            CountryCode = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 31,
                            CountryCode = "IO",
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            Id = 32,
                            CountryCode = "BN",
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = 33,
                            CountryCode = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 34,
                            CountryCode = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 35,
                            CountryCode = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 36,
                            CountryCode = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 37,
                            CountryCode = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 38,
                            CountryCode = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 39,
                            CountryCode = "CV",
                            Name = "Cape Verde"
                        },
                        new
                        {
                            Id = 40,
                            CountryCode = "KY",
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            Id = 41,
                            CountryCode = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = 42,
                            CountryCode = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 43,
                            CountryCode = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 44,
                            CountryCode = "CN",
                            Name = "China"
                        },
                        new
                        {
                            Id = 45,
                            CountryCode = "CX",
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Id = 46,
                            CountryCode = "CC",
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            Id = 47,
                            CountryCode = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 48,
                            CountryCode = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = 49,
                            CountryCode = "CG",
                            Name = "Congo"
                        },
                        new
                        {
                            Id = 50,
                            CountryCode = "CD",
                            Name = "Congo The Democratic Republic Of The"
                        },
                        new
                        {
                            Id = 51,
                            CountryCode = "CK",
                            Name = "Cook Islands"
                        },
                        new
                        {
                            Id = 52,
                            CountryCode = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 53,
                            CountryCode = "CI",
                            Name = "Cote D'Ivoire (Ivory Coast)"
                        },
                        new
                        {
                            Id = 54,
                            CountryCode = "HR",
                            Name = "Croatia (Hrvatska)"
                        },
                        new
                        {
                            Id = 55,
                            CountryCode = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 56,
                            CountryCode = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 57,
                            CountryCode = "CZ",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 58,
                            CountryCode = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 59,
                            CountryCode = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 60,
                            CountryCode = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 61,
                            CountryCode = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 62,
                            CountryCode = "TP",
                            Name = "East Timor"
                        },
                        new
                        {
                            Id = 63,
                            CountryCode = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 64,
                            CountryCode = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 65,
                            CountryCode = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 66,
                            CountryCode = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 67,
                            CountryCode = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 68,
                            CountryCode = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 69,
                            CountryCode = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 70,
                            CountryCode = "XA",
                            Name = "External Territories of Australia"
                        },
                        new
                        {
                            Id = 71,
                            CountryCode = "FK",
                            Name = "Falkland Islands"
                        },
                        new
                        {
                            Id = 72,
                            CountryCode = "FO",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            Id = 73,
                            CountryCode = "FJ",
                            Name = "Fiji Islands"
                        },
                        new
                        {
                            Id = 74,
                            CountryCode = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 75,
                            CountryCode = "FR",
                            Name = "France"
                        },
                        new
                        {
                            Id = 76,
                            CountryCode = "GF",
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = 77,
                            CountryCode = "PF",
                            Name = "French Polynesia"
                        },
                        new
                        {
                            Id = 78,
                            CountryCode = "TF",
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            Id = 79,
                            CountryCode = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 80,
                            CountryCode = "GM",
                            Name = "Gambia The"
                        },
                        new
                        {
                            Id = 81,
                            CountryCode = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 82,
                            CountryCode = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 83,
                            CountryCode = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 84,
                            CountryCode = "GI",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 85,
                            CountryCode = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 86,
                            CountryCode = "GL",
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = 87,
                            CountryCode = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 88,
                            CountryCode = "GP",
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = 89,
                            CountryCode = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 90,
                            CountryCode = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 91,
                            CountryCode = "XU",
                            Name = "Guernsey and Alderney"
                        },
                        new
                        {
                            Id = 92,
                            CountryCode = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 93,
                            CountryCode = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 94,
                            CountryCode = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 95,
                            CountryCode = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 96,
                            CountryCode = "HM",
                            Name = "Heard and McDonald Islands"
                        },
                        new
                        {
                            Id = 97,
                            CountryCode = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 98,
                            CountryCode = "HK",
                            Name = "Hong Kong S.A.R."
                        },
                        new
                        {
                            Id = 99,
                            CountryCode = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 100,
                            CountryCode = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 101,
                            CountryCode = "IN",
                            Name = "India"
                        },
                        new
                        {
                            Id = 102,
                            CountryCode = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 103,
                            CountryCode = "IR",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 104,
                            CountryCode = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 105,
                            CountryCode = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 106,
                            CountryCode = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 107,
                            CountryCode = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 108,
                            CountryCode = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 109,
                            CountryCode = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 110,
                            CountryCode = "XJ",
                            Name = "Jersey"
                        },
                        new
                        {
                            Id = 111,
                            CountryCode = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 112,
                            CountryCode = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 113,
                            CountryCode = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 114,
                            CountryCode = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 115,
                            CountryCode = "KP",
                            Name = "Korea North"
                        },
                        new
                        {
                            Id = 116,
                            CountryCode = "KR",
                            Name = "Korea South"
                        },
                        new
                        {
                            Id = 117,
                            CountryCode = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 118,
                            CountryCode = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 119,
                            CountryCode = "LA",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = 120,
                            CountryCode = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 121,
                            CountryCode = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 122,
                            CountryCode = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 123,
                            CountryCode = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 124,
                            CountryCode = "LY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 125,
                            CountryCode = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 126,
                            CountryCode = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 127,
                            CountryCode = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 128,
                            CountryCode = "MO",
                            Name = "Macau S.A.R."
                        },
                        new
                        {
                            Id = 129,
                            CountryCode = "MK",
                            Name = "Macedonia"
                        },
                        new
                        {
                            Id = 130,
                            CountryCode = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 131,
                            CountryCode = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 132,
                            CountryCode = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 133,
                            CountryCode = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 134,
                            CountryCode = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 135,
                            CountryCode = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 136,
                            CountryCode = "XM",
                            Name = "Man (Isle of)"
                        },
                        new
                        {
                            Id = 137,
                            CountryCode = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 138,
                            CountryCode = "MQ",
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = 139,
                            CountryCode = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 140,
                            CountryCode = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 141,
                            CountryCode = "YT",
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 142,
                            CountryCode = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 143,
                            CountryCode = "FM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = 144,
                            CountryCode = "MD",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = 145,
                            CountryCode = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 146,
                            CountryCode = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 147,
                            CountryCode = "MS",
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = 148,
                            CountryCode = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 149,
                            CountryCode = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 150,
                            CountryCode = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 151,
                            CountryCode = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 152,
                            CountryCode = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 153,
                            CountryCode = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 154,
                            CountryCode = "AN",
                            Name = "Netherlands Antilles"
                        },
                        new
                        {
                            Id = 155,
                            CountryCode = "NL",
                            Name = "Netherlands The"
                        },
                        new
                        {
                            Id = 156,
                            CountryCode = "NC",
                            Name = "New Caledonia"
                        },
                        new
                        {
                            Id = 157,
                            CountryCode = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 158,
                            CountryCode = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 159,
                            CountryCode = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 160,
                            CountryCode = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 161,
                            CountryCode = "NU",
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 162,
                            CountryCode = "NF",
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Id = 163,
                            CountryCode = "MP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = 164,
                            CountryCode = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 165,
                            CountryCode = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 166,
                            CountryCode = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 167,
                            CountryCode = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 168,
                            CountryCode = "PS",
                            Name = "Palestinian Territory Occupied"
                        },
                        new
                        {
                            Id = 169,
                            CountryCode = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 170,
                            CountryCode = "PG",
                            Name = "Papua new Guinea"
                        },
                        new
                        {
                            Id = 171,
                            CountryCode = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 172,
                            CountryCode = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 173,
                            CountryCode = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 174,
                            CountryCode = "PN",
                            Name = "Pitcairn Island"
                        },
                        new
                        {
                            Id = 175,
                            CountryCode = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 176,
                            CountryCode = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 177,
                            CountryCode = "PR",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 178,
                            CountryCode = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 179,
                            CountryCode = "RE",
                            Name = "Reunion"
                        },
                        new
                        {
                            Id = 180,
                            CountryCode = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 181,
                            CountryCode = "RU",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 182,
                            CountryCode = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 183,
                            CountryCode = "SH",
                            Name = "Saint Helena"
                        },
                        new
                        {
                            Id = 184,
                            CountryCode = "KN",
                            Name = "Saint Kitts And Nevis"
                        },
                        new
                        {
                            Id = 185,
                            CountryCode = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 186,
                            CountryCode = "PM",
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 187,
                            CountryCode = "VC",
                            Name = "Saint Vincent And The Grenadines"
                        },
                        new
                        {
                            Id = 188,
                            CountryCode = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 189,
                            CountryCode = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 190,
                            CountryCode = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 191,
                            CountryCode = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 192,
                            CountryCode = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 193,
                            CountryCode = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 194,
                            CountryCode = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 195,
                            CountryCode = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 196,
                            CountryCode = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 197,
                            CountryCode = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 198,
                            CountryCode = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 199,
                            CountryCode = "XG",
                            Name = "Smaller Territories of the UK"
                        },
                        new
                        {
                            Id = 200,
                            CountryCode = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 201,
                            CountryCode = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 202,
                            CountryCode = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 203,
                            CountryCode = "GS",
                            Name = "South Georgia"
                        },
                        new
                        {
                            Id = 204,
                            CountryCode = "SS",
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 205,
                            CountryCode = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 206,
                            CountryCode = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 207,
                            CountryCode = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 208,
                            CountryCode = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 209,
                            CountryCode = "SJ",
                            Name = "Svalbard And Jan Mayen Islands"
                        },
                        new
                        {
                            Id = 210,
                            CountryCode = "SZ",
                            Name = "Swaziland"
                        },
                        new
                        {
                            Id = 211,
                            CountryCode = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 212,
                            CountryCode = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 213,
                            CountryCode = "SY",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = 214,
                            CountryCode = "TW",
                            Name = "Taiwan"
                        },
                        new
                        {
                            Id = 215,
                            CountryCode = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 216,
                            CountryCode = "TZ",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = 217,
                            CountryCode = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 218,
                            CountryCode = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 219,
                            CountryCode = "TK",
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 220,
                            CountryCode = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 221,
                            CountryCode = "TT",
                            Name = "Trinidad And Tobago"
                        },
                        new
                        {
                            Id = 222,
                            CountryCode = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 223,
                            CountryCode = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 224,
                            CountryCode = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 225,
                            CountryCode = "TC",
                            Name = "Turks And Caicos Islands"
                        },
                        new
                        {
                            Id = 226,
                            CountryCode = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 227,
                            CountryCode = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 228,
                            CountryCode = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 229,
                            CountryCode = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 230,
                            CountryCode = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 231,
                            CountryCode = "US",
                            Name = "United States"
                        },
                        new
                        {
                            Id = 232,
                            CountryCode = "UM",
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            Id = 233,
                            CountryCode = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 234,
                            CountryCode = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 235,
                            CountryCode = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 236,
                            CountryCode = "VA",
                            Name = "Vatican City State (Holy See)"
                        },
                        new
                        {
                            Id = 237,
                            CountryCode = "VE",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 238,
                            CountryCode = "VN",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = 239,
                            CountryCode = "VG",
                            Name = "Virgin Islands (British)"
                        },
                        new
                        {
                            Id = 240,
                            CountryCode = "VI",
                            Name = "Virgin Islands (US)"
                        },
                        new
                        {
                            Id = 241,
                            CountryCode = "WF",
                            Name = "Wallis And Futuna Islands"
                        },
                        new
                        {
                            Id = 242,
                            CountryCode = "EH",
                            Name = "Western Sahara"
                        },
                        new
                        {
                            Id = 243,
                            CountryCode = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 244,
                            CountryCode = "YU",
                            Name = "Yugoslavia"
                        },
                        new
                        {
                            Id = 245,
                            CountryCode = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 246,
                            CountryCode = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("opensis.data.Models.Course", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CourseCategory")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("course_category");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("course_description");

                    b.Property<string>("CourseGradeLevel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_grade_level");

                    b.Property<string>("CourseProgram")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("course_program");

                    b.Property<string>("CourseShortName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_short_name");

                    b.Property<string>("CourseSubject")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("course_subject");

                    b.Property<string>("CourseTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("course_title");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<double?>("CreditHours")
                        .HasColumnType("double")
                        .HasColumnName("credit_hours");

                    b.Property<bool?>("IsCourseActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_course_active");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("Standard")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("standard");

                    b.Property<string>("StandardRefNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("standard_ref_no");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "CourseId")
                        .HasName("PK_course_tenant_id");

                    b.ToTable("course", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.CourseBlockSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<int>("Serial")
                        .HasColumnType("int")
                        .HasColumnName("serial");

                    b.Property<int?>("BlockId")
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<bool?>("TakeAttendance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("take_attendance");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "Serial")
                        .HasName("PK_course_block_schedule_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "BlockId", "PeriodId" }, "IX_course_block_schedule_tenant_id_school_id_block");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "RoomId" }, "IX_course_block_schedule_tenant_id_school_id_room");

                    b.ToTable("course_block_schedule", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.CourseCalendarSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<int>("Serial")
                        .HasColumnType("int")
                        .HasColumnName("serial");

                    b.Property<int?>("BlockId")
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<bool?>("TakeAttendance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("take_attendance");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "Serial")
                        .HasName("PK_course_calendar_schedule_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "BlockId", "PeriodId" }, "IX_course_calendar_schedule_tenant_id_school_id_bl");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "RoomId" }, "IX_course_calendar_schedule_tenant_id_school_id_ro");

                    b.ToTable("course_calendar_schedule", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.CourseCommentCategory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CourseCommentId")
                        .HasColumnType("int")
                        .HasColumnName("course_comment_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<bool>("ApplicableAllCourses")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("applicable_all_courses");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("course_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "CourseCommentId")
                        .HasName("PK_course_comment_category_tenant_id");

                    b.ToTable("course_comment_category", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.CourseFixedSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<int>("Serial")
                        .HasColumnType("int")
                        .HasColumnName("serial");

                    b.Property<int?>("BlockId")
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "Serial")
                        .HasName("PK_course_fixed_schedule_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "BlockId", "PeriodId" }, "IX_course_fixed_schedule_tenant_id_school_id_block");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "RoomId" }, "IX_course_fixed_schedule_tenant_id_school_id_room_");

                    b.ToTable("course_fixed_schedule", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.CourseSection", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<bool?>("AffectsClassRank")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("affects_class_rank");

                    b.Property<bool?>("AffectsHonorRoll")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("affects_honor_roll");

                    b.Property<bool?>("AllowStudentConflict")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_student_conflict");

                    b.Property<bool?>("AllowTeacherConflict")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_teacher_conflict");

                    b.Property<int?>("AttendanceCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("attendance_category_id");

                    b.Property<bool?>("AttendanceTaken")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("attendance_taken");

                    b.Property<int?>("CalendarId")
                        .HasColumnType("int")
                        .HasColumnName("calendar_id");

                    b.Property<string>("CourseSectionName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("course_section_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<decimal?>("CreditHours")
                        .HasColumnType("decimal(8,3)")
                        .HasColumnName("credit_hours");

                    b.Property<bool?>("DurationBasedOnPeriod")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("duration_based_on_period");

                    b.Property<DateTime?>("DurationEndDate")
                        .HasColumnType("date")
                        .HasColumnName("duration_end_date");

                    b.Property<DateTime?>("DurationStartDate")
                        .HasColumnType("date")
                        .HasColumnName("duration_start_date");

                    b.Property<int?>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<string>("GradeScaleType")
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("grade_scale_type");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsCustomMarkingPeriod")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_custom_marking_period");

                    b.Property<bool?>("IsWeightedCourse")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_weighted_course");

                    b.Property<string>("MeetingDays")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("meeting_days");

                    b.Property<bool?>("OnlineClassRoom")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("online_class_room");

                    b.Property<string>("OnlineClassroomPassword")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("online_classroom_password");

                    b.Property<string>("OnlineClassroomUrl")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("online_classroom_url");

                    b.Property<int?>("PrgrsprdMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("prgrsprd_marking_period_id");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<string>("ScheduleType")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("schedule_type");

                    b.Property<int?>("Seats")
                        .HasColumnType("int")
                        .HasColumnName("seats");

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("smstr_marking_period_id");

                    b.Property<int?>("StandardGradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("standard_grade_scale_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<bool?>("UseStandards")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("use_standards");

                    b.Property<int?>("YrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("yr_marking_period_id");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId")
                        .HasName("PK_course_section_tenant_id");

                    b.HasIndex("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "AttendanceCategoryId" }, "IX_course_section_tenant_id_school_id_attendance_c");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "CalendarId" }, "IX_course_section_tenant_id_school_id_calendar_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "GradeScaleId" }, "IX_course_section_tenant_id_school_id_grade_scale_");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "QtrMarkingPeriodId" }, "IX_course_section_tenant_id_school_id_qtr_marking_");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "SmstrMarkingPeriodId" }, "IX_course_section_tenant_id_school_id_smstr_markin");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "YrMarkingPeriodId" }, "IX_course_section_tenant_id_school_id_yr_marking_p");

                    b.ToTable("course_section", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.CourseStandard", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("StandardRefNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("standard_ref_no");

                    b.Property<int>("GradeStandardId")
                        .HasColumnType("int")
                        .HasColumnName("grade_standard_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "StandardRefNo", "GradeStandardId")
                        .HasName("PK_course_standard_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StandardRefNo", "GradeStandardId" }, "IX_course_standard_tenant_id_school_id_standard_re");

                    b.ToTable("course_standard", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.CourseVariableSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<int>("Serial")
                        .HasColumnType("int")
                        .HasColumnName("serial");

                    b.Property<int?>("BlockId")
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Day")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("day");

                    b.Property<int?>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<bool?>("TakeAttendance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("take_attendance");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "Serial")
                        .HasName("PK_course_variable_schedule_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "BlockId", "PeriodId" }, "IX_course_variable_schedule_tenant_id_school_id_bl");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "RoomId" }, "IX_course_variable_schedule_tenant_id_school_id_ro");

                    b.ToTable("course_variable_schedule", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.CustomFields", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("field_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("DefaultSelection")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("default_selection");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("field_name");

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("hide");

                    b.Property<bool?>("IsSystemWideField")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_system_wide_field");

                    b.Property<string>("Module")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("module")
                        .HasDefaultValueSql("(N'')")
                        .IsFixedLength();

                    b.Property<bool?>("Required")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("required");

                    b.Property<bool?>("Search")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("search");

                    b.Property<string>("SelectOptions")
                        .HasColumnType("longtext")
                        .HasColumnName("select_options");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<bool?>("SystemField")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("system_field");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "CategoryId", "FieldId")
                        .HasName("PK_custom_fields_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "Title" }, "IX_custom_fields");

                    b.ToTable("custom_fields", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.CustomFieldsValue", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("field_id");

                    b.Property<int>("TargetId")
                        .HasColumnType("int")
                        .HasColumnName("target_id");

                    b.Property<string>("Module")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("module")
                        .IsFixedLength();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("CustomFieldTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("custom_field_title");

                    b.Property<string>("CustomFieldType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("custom_field_type");

                    b.Property<string>("CustomFieldValue")
                        .HasColumnType("longtext")
                        .HasColumnName("custom_field_value");

                    b.Property<DateTime?>("UpdateOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.HasKey("TenantId", "SchoolId", "CategoryId", "FieldId", "TargetId", "Module")
                        .HasName("PK_custom_fields_value_tenant_id");

                    b.ToTable("custom_fields_value", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.DpdownValuelist", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("LovCode")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("lov_code");

                    b.Property<string>("LovColumnValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("lov_column_value");

                    b.Property<string>("LovName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lov_name");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "SchoolId" }, "IX_dpdown_valuelist_tenant_id_school_id");

                    b.ToTable("dpdown_valuelist", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.EffortGradeLibraryCategory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("EffortCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("effort_category_id");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("category_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "EffortCategoryId")
                        .HasName("PK_effort_grade_library_category_tenant_id");

                    b.ToTable("effort_grade_library_category", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.EffortGradeLibraryCategoryItem", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("EffortCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("effort_category_id");

                    b.Property<int>("EffortItemId")
                        .HasColumnType("int")
                        .HasColumnName("effort_item_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("EffortItemTitle")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("effort_item_title");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "EffortCategoryId", "EffortItemId")
                        .HasName("PK_effort_grade_library_category_item_tenant_id");

                    b.ToTable("effort_grade_library_category_item", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.EffortGradeScale", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("EffortGradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("effort_grade_scale_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("GradeScaleComment")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("grade_scale_comment");

                    b.Property<int?>("GradeScaleValue")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_value");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "EffortGradeScaleId")
                        .HasName("PK_effort_grade_scale_tenant_id");

                    b.ToTable("effort_grade_scale", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.FieldsCategory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("Hide")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("hide");

                    b.Property<bool?>("IsSystemCategory")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_system_category");

                    b.Property<bool?>("IsSystemWideCategory")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_system_wide_category");

                    b.Property<string>("Module")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("module")
                        .IsFixedLength();

                    b.Property<bool?>("Required")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("required");

                    b.Property<bool?>("Search")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("search");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "CategoryId")
                        .HasName("PK_fields_category_tenant_id");

                    b.ToTable("fields_category", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Grade", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<int?>("Breakoff")
                        .HasColumnType("int")
                        .HasColumnName("breakoff");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<decimal?>("UnweightedGpValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unweighted_gp_value");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<decimal?>("WeightedGpValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("weighted_gp_value");

                    b.HasKey("TenantId", "SchoolId", "GradeScaleId", "GradeId")
                        .HasName("PK_grade_tenant_id");

                    b.ToTable("grade", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.GradeAgeRange", b =>
                {
                    b.Property<int>("AgeRangeId")
                        .HasColumnType("int")
                        .HasColumnName("age_range_id");

                    b.Property<string>("AgeRange")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("age_range");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("AgeRangeId")
                        .HasName("PK_grade_age_range_age_range_id");

                    b.ToTable("grade_age_range", (string)null);

                    b.HasData(
                        new
                        {
                            AgeRangeId = 0,
                            AgeRange = "Below 5"
                        },
                        new
                        {
                            AgeRangeId = 1,
                            AgeRange = "5–6"
                        },
                        new
                        {
                            AgeRangeId = 2,
                            AgeRange = "6–7"
                        },
                        new
                        {
                            AgeRangeId = 3,
                            AgeRange = "7–8"
                        },
                        new
                        {
                            AgeRangeId = 4,
                            AgeRange = "8–9"
                        },
                        new
                        {
                            AgeRangeId = 5,
                            AgeRange = "9–10"
                        },
                        new
                        {
                            AgeRangeId = 6,
                            AgeRange = "10–11"
                        },
                        new
                        {
                            AgeRangeId = 7,
                            AgeRange = "11–12"
                        },
                        new
                        {
                            AgeRangeId = 8,
                            AgeRange = "12–13"
                        },
                        new
                        {
                            AgeRangeId = 9,
                            AgeRange = "13–14"
                        },
                        new
                        {
                            AgeRangeId = 10,
                            AgeRange = "14–15"
                        },
                        new
                        {
                            AgeRangeId = 11,
                            AgeRange = "15–16"
                        },
                        new
                        {
                            AgeRangeId = 12,
                            AgeRange = "16–17"
                        },
                        new
                        {
                            AgeRangeId = 13,
                            AgeRange = "17–18"
                        },
                        new
                        {
                            AgeRangeId = 14,
                            AgeRange = "18+"
                        });
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfiguration", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int>("GradebookConfigurationId")
                        .HasColumnType("int")
                        .HasColumnName("gradebook_configuration_id");

                    b.Property<string>("AssignmentSorting")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("assignment_sorting");

                    b.Property<bool?>("ConfigUpdateFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("config_update_flag");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("General")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("general");

                    b.Property<int?>("MaxAnomalousGrade")
                        .HasColumnType("int")
                        .HasColumnName("max_anomalous_grade");

                    b.Property<string>("ScoreRounding")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("score_rounding");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("UpgradedAssignmentGradeDays")
                        .HasColumnType("int")
                        .HasColumnName("upgraded_assignment_grade_days");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId")
                        .HasName("PK_gradebook_configuration_tenant_id");

                    b.ToTable("gradebook_configuration", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfigurationGradescale", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int>("BreakoffPoints")
                        .HasColumnType("int")
                        .HasColumnName("breakoff_points");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<int>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<int>("GradebookConfigurationId")
                        .HasColumnType("int")
                        .HasColumnName("gradebook_configuration_id");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId" }, "IX_gradebook_configuration_gradescale");

                    b.ToTable("gradebook_configuration_gradescale", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfigurationProgressPeriod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("ExamPercentage")
                        .HasColumnType("int")
                        .HasColumnName("exam_percentage");

                    b.Property<int>("GradebookConfigurationId")
                        .HasColumnType("int")
                        .HasColumnName("gradebook_configuration_id");

                    b.Property<int?>("GradingPercentage")
                        .HasColumnType("int")
                        .HasColumnName("grading_percentage");

                    b.Property<int?>("PrgrsprdMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("prgrsprd_marking_period_id");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId");

                    b.HasIndex("TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId");

                    b.ToTable("gradebook_configuration_progressPeriod", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfigurationQuarter", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("ExamPercentage")
                        .HasColumnType("int")
                        .HasColumnName("exam_percentage");

                    b.Property<int>("GradebookConfigurationId")
                        .HasColumnType("int")
                        .HasColumnName("gradebook_configuration_id");

                    b.Property<int?>("GradingPercentage")
                        .HasColumnType("int")
                        .HasColumnName("grading_percentage");

                    b.Property<int?>("PrgrsprdMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("prgrsprd_marking_period_id");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "QtrMarkingPeriodId" }, "IX_gradebook_conf_qtr_tenant_id_school");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId" }, "IX_gradebook_configuration_quarter_tenant_id_schoo");

                    b.ToTable("gradebook_configuration_quarter", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfigurationSemester", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("ExamPercentage")
                        .HasColumnType("int")
                        .HasColumnName("exam_percentage");

                    b.Property<int>("GradebookConfigurationId")
                        .HasColumnType("int")
                        .HasColumnName("gradebook_configuration_id");

                    b.Property<int?>("GradingPercentage")
                        .HasColumnType("int")
                        .HasColumnName("grading_percentage");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("smstr_marking_period_id");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "SmstrMarkingPeriodId" }, "IX_grade_conf_sem_t_id_school");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "QtrMarkingPeriodId" }, "IX_gradebook_conf_sem_school");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId" }, "IX_gradebook_configuration_semester_tenant_id_scho");

                    b.ToTable("gradebook_configuration_semester", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfigurationYear", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("ExamPercentage")
                        .HasColumnType("int")
                        .HasColumnName("exam_percentage");

                    b.Property<int>("GradebookConfigurationId")
                        .HasColumnType("int")
                        .HasColumnName("gradebook_configuration_id");

                    b.Property<int?>("GradingPercentage")
                        .HasColumnType("int")
                        .HasColumnName("grading_percentage");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("smstr_marking_period_id");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("YrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("yr_marking_period_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "SmstrMarkingPeriodId" }, "IX_grade_conf_yr_t_id_school_i");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "YrMarkingPeriodId" }, "IX_grade_conf_yr_tenant_id_school_i");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId" }, "IX_gradebook_configuration_year_tenant_id_school_i");

                    b.ToTable("gradebook_configuration_year", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.GradebookGrades", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<int>("AssignmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_type_id");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    b.Property<string>("AllowedMarks")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)")
                        .HasColumnName("allowed_marks")
                        .IsFixedLength();

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comment");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("LetterGrade")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)")
                        .HasColumnName("letter_grade")
                        .IsFixedLength();

                    b.Property<string>("Percentage")
                        .HasColumnType("longtext")
                        .HasColumnName("percentage");

                    b.Property<int?>("PrgrsprdMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("prgrsprd_marking_period_id");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<string>("RunningAvg")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)")
                        .HasColumnName("running_avg")
                        .IsFixedLength();

                    b.Property<string>("RunningAvgGrade")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)")
                        .HasColumnName("running_avg_grade")
                        .IsFixedLength();

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("smstr_marking_period_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("YrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("yr_marking_period_id");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "AcademicYear", "CourseSectionId", "AssignmentTypeId", "AssignmentId");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "AssignmentId" }, "IX_gradebook_grades_tenant_id_school_id_assignment");

                    b.ToTable("gradebook_grades", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.GradeEducationalStage", b =>
                {
                    b.Property<int>("IscedCode")
                        .HasColumnType("int")
                        .HasColumnName("isced_code");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("EducationalStage")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("educational_stage");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("IscedCode")
                        .HasName("PK_grade_educational_stage_isced_code");

                    b.ToTable("grade_educational_stage", (string)null);

                    b.HasData(
                        new
                        {
                            IscedCode = 0,
                            EducationalStage = "Early childhood Education"
                        },
                        new
                        {
                            IscedCode = 1,
                            EducationalStage = "Primary education"
                        },
                        new
                        {
                            IscedCode = 2,
                            EducationalStage = "Lower secondary education"
                        },
                        new
                        {
                            IscedCode = 3,
                            EducationalStage = "Upper secondary education"
                        },
                        new
                        {
                            IscedCode = 4,
                            EducationalStage = "Post-secondary non-tertiary education"
                        },
                        new
                        {
                            IscedCode = 5,
                            EducationalStage = "Short-cycle tertiary education"
                        },
                        new
                        {
                            IscedCode = 6,
                            EducationalStage = "Bachelor's degree or equivalent"
                        },
                        new
                        {
                            IscedCode = 7,
                            EducationalStage = "Master's degree or equivalent"
                        },
                        new
                        {
                            IscedCode = 8,
                            EducationalStage = "Doctoral degree or equivalent"
                        });
                });

            modelBuilder.Entity("opensis.data.Models.GradeEquivalency", b =>
                {
                    b.Property<int>("EquivalencyId")
                        .HasColumnType("int")
                        .HasColumnName("equivalency_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("GradeLevelEquivalency")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("grade_level_equivalency");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("EquivalencyId")
                        .HasName("PK_grade_equivalency_equivalency_id");

                    b.ToTable("grade_equivalency", (string)null);

                    b.HasData(
                        new
                        {
                            EquivalencyId = -1,
                            GradeLevelEquivalency = "Pre-Kindergarten"
                        },
                        new
                        {
                            EquivalencyId = 0,
                            GradeLevelEquivalency = "Kindergarten"
                        },
                        new
                        {
                            EquivalencyId = 1,
                            GradeLevelEquivalency = "1st Grade"
                        },
                        new
                        {
                            EquivalencyId = 2,
                            GradeLevelEquivalency = "2nd Grade"
                        },
                        new
                        {
                            EquivalencyId = 3,
                            GradeLevelEquivalency = "3rd Grade"
                        },
                        new
                        {
                            EquivalencyId = 4,
                            GradeLevelEquivalency = "4th Grade"
                        },
                        new
                        {
                            EquivalencyId = 5,
                            GradeLevelEquivalency = "5th Grade"
                        },
                        new
                        {
                            EquivalencyId = 6,
                            GradeLevelEquivalency = "6th Grade"
                        },
                        new
                        {
                            EquivalencyId = 7,
                            GradeLevelEquivalency = "7th Grade"
                        },
                        new
                        {
                            EquivalencyId = 8,
                            GradeLevelEquivalency = "8th Grade"
                        },
                        new
                        {
                            EquivalencyId = 9,
                            GradeLevelEquivalency = "9th Grade"
                        },
                        new
                        {
                            EquivalencyId = 10,
                            GradeLevelEquivalency = "10th Grade"
                        },
                        new
                        {
                            EquivalencyId = 11,
                            GradeLevelEquivalency = "11th Grade"
                        },
                        new
                        {
                            EquivalencyId = 12,
                            GradeLevelEquivalency = "12th Grade"
                        },
                        new
                        {
                            EquivalencyId = 13,
                            GradeLevelEquivalency = "1st Year College"
                        },
                        new
                        {
                            EquivalencyId = 14,
                            GradeLevelEquivalency = "2nd Year College"
                        },
                        new
                        {
                            EquivalencyId = 15,
                            GradeLevelEquivalency = "3rd Year College"
                        },
                        new
                        {
                            EquivalencyId = 16,
                            GradeLevelEquivalency = "4th Year College"
                        },
                        new
                        {
                            EquivalencyId = 17,
                            GradeLevelEquivalency = "5th Year College"
                        },
                        new
                        {
                            EquivalencyId = 18,
                            GradeLevelEquivalency = "6th Year College"
                        },
                        new
                        {
                            EquivalencyId = 19,
                            GradeLevelEquivalency = "7th Year College"
                        },
                        new
                        {
                            EquivalencyId = 20,
                            GradeLevelEquivalency = "8th Year College"
                        });
                });

            modelBuilder.Entity("opensis.data.Models.Gradelevels", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<int?>("AgeRangeId")
                        .HasColumnType("int")
                        .HasColumnName("age_range_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("EquivalencyId")
                        .HasColumnType("int")
                        .HasColumnName("equivalency_id");

                    b.Property<int?>("IscedCode")
                        .HasColumnType("int")
                        .HasColumnName("isced_code");

                    b.Property<int?>("NextGradeId")
                        .HasColumnType("int")
                        .HasColumnName("next_grade_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("short_name");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "GradeId")
                        .HasName("PK_gradelevels_tenant_id");

                    b.HasIndex(new[] { "AgeRangeId" }, "IX_gradelevels_age_range_id");

                    b.HasIndex(new[] { "EquivalencyId" }, "IX_gradelevels_equivalency_id");

                    b.HasIndex(new[] { "IscedCode" }, "IX_gradelevels_isced_code");

                    b.ToTable("gradelevels", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.GradeScale", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<bool?>("CalculateGpa")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("calculate_gpa");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("GradeScaleComment")
                        .HasColumnType("longtext")
                        .HasColumnName("grade_scale_comment");

                    b.Property<string>("GradeScaleName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("grade_scale_name");

                    b.Property<decimal?>("GradeScaleValue")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("grade_scale_value");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<bool?>("UseAsStandardGradeScale")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("use_as_standard_grade_scale");

                    b.HasKey("TenantId", "SchoolId", "GradeScaleId")
                        .HasName("PK_grade_scale_tenant_id");

                    b.ToTable("grade_scale", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.GradeUsStandard", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("StandardRefNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("standard_ref_no");

                    b.Property<int>("GradeStandardId")
                        .HasColumnType("int")
                        .HasColumnName("grade_standard_id");

                    b.Property<string>("Course")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("course");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Domain")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("domain");

                    b.Property<string>("GradeLevel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("grade_level");

                    b.Property<bool?>("IsSchoolSpecific")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_school_specific");

                    b.Property<string>("StandardDetails")
                        .HasColumnType("longtext")
                        .HasColumnName("standard_details");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("subject")
                        .IsFixedLength();

                    b.Property<string>("Topic")
                        .HasColumnType("longtext")
                        .HasColumnName("topic");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StandardRefNo", "GradeStandardId")
                        .HasName("PK_grade_us_standard_tenant_id");

                    b.ToTable("grade_us_standard", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.HistoricalCreditTransfer", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("HistGradeId")
                        .HasColumnType("int")
                        .HasColumnName("hist_grade_id");

                    b.Property<int>("HistMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("hist_marking_period_id");

                    b.Property<int>("CreditTransferId")
                        .HasColumnType("int")
                        .HasColumnName("credit_transfer_id");

                    b.Property<bool?>("CalculateGpa")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("calculate_gpa");

                    b.Property<string>("CourseCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("course_code");

                    b.Property<string>("CourseName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("course_name");

                    b.Property<string>("CourseType")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("course_type");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<decimal?>("CreditAttempted")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("credit_attempted");

                    b.Property<decimal?>("CreditEarned")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("credit_earned");

                    b.Property<decimal?>("GpValue")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("gp_value");

                    b.Property<decimal?>("GradeScale")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("grade_scale");

                    b.Property<string>("LetterGrade")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("letter_grade")
                        .IsFixedLength();

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("percentage");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "HistGradeId", "HistMarkingPeriodId", "CreditTransferId")
                        .HasName("PK_historical_credit_transfer_tenant_id");

                    b.ToTable("historical_credit_transfer", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.HistoricalGrade", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("HistGradeId")
                        .HasColumnType("int")
                        .HasColumnName("hist_grade_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("EquivalencyId")
                        .HasColumnType("int")
                        .HasColumnName("equivalency_id");

                    b.Property<int>("HistMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("hist_marking_period_id");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("school_name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "HistGradeId")
                        .HasName("PK_historical_grade_tenant_id");

                    b.ToTable("historical_grade", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.HistoricalMarkingPeriod", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("HistMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("hist_marking_period_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("DoesComments")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_comments");

                    b.Property<bool?>("DoesExam")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_exam");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_grades");

                    b.Property<DateTime?>("GradePostDate")
                        .HasColumnType("date")
                        .HasColumnName("grade_post_date");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "HistMarkingPeriodId")
                        .HasName("PK_historical_marking_period_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "HistMarkingPeriodId", "AcademicYear", "Title" }, "historical_marking_period$IX_historical_marking_pe")
                        .IsUnique();

                    b.ToTable("historical_marking_period", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.HonorRolls", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("HonorRollId")
                        .HasColumnType("int")
                        .HasColumnName("honor_roll_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int?>("Breakoff")
                        .HasColumnType("int")
                        .HasColumnName("breakoff");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("HonorRoll")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("honor_roll");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "HonorRollId")
                        .HasName("PK_honor_rolls_tenant_id");

                    b.ToTable("honor_rolls", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Language", b =>
                {
                    b.Property<int>("LangId")
                        .HasColumnType("int")
                        .HasColumnName("lang_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("language_code")
                        .IsFixedLength();

                    b.Property<string>("Lcid")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("lcid")
                        .IsFixedLength();

                    b.Property<string>("Locale")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("locale")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("LangId")
                        .HasName("PK_language_lang_id");

                    b.ToTable("language", (string)null);

                    b.HasData(
                        new
                        {
                            LangId = 1,
                            LanguageCode = "af",
                            Lcid = "af",
                            Locale = "Afrikaans"
                        },
                        new
                        {
                            LangId = 2,
                            LanguageCode = "sq",
                            Lcid = "sq",
                            Locale = "Albanian"
                        },
                        new
                        {
                            LangId = 3,
                            LanguageCode = "am",
                            Lcid = "am",
                            Locale = "Amharic"
                        },
                        new
                        {
                            LangId = 4,
                            LanguageCode = "ar",
                            Lcid = "ar-dz",
                            Locale = "Arabic - Algeria"
                        },
                        new
                        {
                            LangId = 5,
                            LanguageCode = "ar",
                            Lcid = "ar-bh",
                            Locale = "Arabic - Bahrain"
                        },
                        new
                        {
                            LangId = 6,
                            LanguageCode = "ar",
                            Lcid = "ar-eg",
                            Locale = "Arabic - Egypt"
                        },
                        new
                        {
                            LangId = 7,
                            LanguageCode = "ar",
                            Lcid = "ar-iq",
                            Locale = "Arabic - Iraq"
                        },
                        new
                        {
                            LangId = 8,
                            LanguageCode = "ar",
                            Lcid = "ar-jo",
                            Locale = "Arabic - Jordan"
                        },
                        new
                        {
                            LangId = 9,
                            LanguageCode = "ar",
                            Lcid = "ar-kw",
                            Locale = "Arabic - Kuwait"
                        },
                        new
                        {
                            LangId = 10,
                            LanguageCode = "ar",
                            Lcid = "ar-lb",
                            Locale = "Arabic - Lebanon"
                        },
                        new
                        {
                            LangId = 11,
                            LanguageCode = "ar",
                            Lcid = "ar-ly",
                            Locale = "Arabic - Libya"
                        },
                        new
                        {
                            LangId = 12,
                            LanguageCode = "ar",
                            Lcid = "ar-ma",
                            Locale = "Arabic - Morocco"
                        },
                        new
                        {
                            LangId = 13,
                            LanguageCode = "ar",
                            Lcid = "ar-om",
                            Locale = "Arabic - Oman"
                        },
                        new
                        {
                            LangId = 14,
                            LanguageCode = "ar",
                            Lcid = "ar-qa",
                            Locale = "Arabic - Qatar"
                        },
                        new
                        {
                            LangId = 15,
                            LanguageCode = "ar",
                            Lcid = "ar-sa",
                            Locale = "Arabic - Saudi Arabia"
                        },
                        new
                        {
                            LangId = 16,
                            LanguageCode = "ar",
                            Lcid = "ar-sy",
                            Locale = "Arabic - Syria"
                        },
                        new
                        {
                            LangId = 17,
                            LanguageCode = "ar",
                            Lcid = "ar-tn",
                            Locale = "Arabic - Tunisia"
                        },
                        new
                        {
                            LangId = 18,
                            LanguageCode = "ar",
                            Lcid = "ar-ae",
                            Locale = "Arabic - United Arab Emirates"
                        },
                        new
                        {
                            LangId = 19,
                            LanguageCode = "ar",
                            Lcid = "ar-ye",
                            Locale = "Arabic - Yemen"
                        },
                        new
                        {
                            LangId = 20,
                            LanguageCode = "hy",
                            Lcid = "hy",
                            Locale = "Armenian"
                        },
                        new
                        {
                            LangId = 21,
                            LanguageCode = "as",
                            Lcid = "as",
                            Locale = "Assamese"
                        },
                        new
                        {
                            LangId = 22,
                            LanguageCode = "az",
                            Lcid = "az-az",
                            Locale = "Azeri - Cyrillic"
                        },
                        new
                        {
                            LangId = 23,
                            LanguageCode = "az",
                            Lcid = "az-az",
                            Locale = "Azeri - Latin"
                        },
                        new
                        {
                            LangId = 24,
                            LanguageCode = "eu",
                            Lcid = "eu",
                            Locale = "Basque"
                        },
                        new
                        {
                            LangId = 25,
                            LanguageCode = "be",
                            Lcid = "be",
                            Locale = "Belarusian"
                        },
                        new
                        {
                            LangId = 26,
                            LanguageCode = "bn",
                            Lcid = "bn",
                            Locale = "Bengali - Bangladesh"
                        },
                        new
                        {
                            LangId = 27,
                            LanguageCode = "bn",
                            Lcid = "bn",
                            Locale = "Bengali - India"
                        },
                        new
                        {
                            LangId = 28,
                            LanguageCode = "bs",
                            Lcid = "bs",
                            Locale = "Bosnian"
                        },
                        new
                        {
                            LangId = 29,
                            LanguageCode = "bg",
                            Lcid = "bg",
                            Locale = "Bulgarian"
                        },
                        new
                        {
                            LangId = 30,
                            LanguageCode = "my",
                            Lcid = "my",
                            Locale = "Burmese"
                        },
                        new
                        {
                            LangId = 31,
                            LanguageCode = "ca",
                            Lcid = "ca",
                            Locale = "Catalan"
                        },
                        new
                        {
                            LangId = 32,
                            LanguageCode = "zh",
                            Lcid = "zh-cn",
                            Locale = "Chinese - China"
                        },
                        new
                        {
                            LangId = 33,
                            LanguageCode = "zh",
                            Lcid = "zh-hk",
                            Locale = "Chinese - Hong Kong SAR"
                        },
                        new
                        {
                            LangId = 34,
                            LanguageCode = "zh",
                            Lcid = "zh-mo",
                            Locale = "Chinese - Macau SAR"
                        },
                        new
                        {
                            LangId = 35,
                            LanguageCode = "zh",
                            Lcid = "zh-sg",
                            Locale = "Chinese - Singapore"
                        },
                        new
                        {
                            LangId = 36,
                            LanguageCode = "zh",
                            Lcid = "zh-tw",
                            Locale = "Chinese - Taiwan"
                        },
                        new
                        {
                            LangId = 37,
                            LanguageCode = "hr",
                            Lcid = "hr",
                            Locale = "Croatian"
                        },
                        new
                        {
                            LangId = 38,
                            LanguageCode = "cs",
                            Lcid = "cs",
                            Locale = "Czech"
                        },
                        new
                        {
                            LangId = 39,
                            LanguageCode = "da",
                            Lcid = "da",
                            Locale = "Danish"
                        },
                        new
                        {
                            LangId = 40,
                            LanguageCode = "Dhivehi",
                            Lcid = "Maldivian",
                            Locale = "Divehi"
                        },
                        new
                        {
                            LangId = 41,
                            LanguageCode = "nl",
                            Lcid = "nl-be",
                            Locale = "Dutch - Belgium"
                        },
                        new
                        {
                            LangId = 42,
                            LanguageCode = "nl",
                            Lcid = "nl-nl",
                            Locale = "Dutch - Netherlands"
                        },
                        new
                        {
                            LangId = 43,
                            LanguageCode = "en",
                            Lcid = "en-au",
                            Locale = "English - Australia"
                        },
                        new
                        {
                            LangId = 44,
                            LanguageCode = "en",
                            Lcid = "en-bz",
                            Locale = "English - Belize"
                        },
                        new
                        {
                            LangId = 45,
                            LanguageCode = "en",
                            Lcid = "en-ca",
                            Locale = "English - Canada"
                        },
                        new
                        {
                            LangId = 46,
                            LanguageCode = "en",
                            Lcid = "en-cb",
                            Locale = "English - Caribbean"
                        },
                        new
                        {
                            LangId = 47,
                            LanguageCode = "en",
                            Lcid = "en-gb",
                            Locale = "English - Great Britain"
                        },
                        new
                        {
                            LangId = 48,
                            LanguageCode = "en",
                            Lcid = "en-in",
                            Locale = "English - India"
                        },
                        new
                        {
                            LangId = 49,
                            LanguageCode = "en",
                            Lcid = "en-ie",
                            Locale = "English - Ireland"
                        },
                        new
                        {
                            LangId = 50,
                            LanguageCode = "en",
                            Lcid = "en-jm",
                            Locale = "English - Jamaica"
                        },
                        new
                        {
                            LangId = 51,
                            LanguageCode = "en",
                            Lcid = "en-nz",
                            Locale = "English - New Zealand"
                        },
                        new
                        {
                            LangId = 52,
                            LanguageCode = "en",
                            Lcid = "en-ph",
                            Locale = "English - Philippines"
                        },
                        new
                        {
                            LangId = 53,
                            LanguageCode = "en",
                            Lcid = "en-za",
                            Locale = "English - Southern Africa"
                        },
                        new
                        {
                            LangId = 54,
                            LanguageCode = "en",
                            Lcid = "en-tt",
                            Locale = "English - Trinidad"
                        },
                        new
                        {
                            LangId = 55,
                            LanguageCode = "en",
                            Lcid = "en-us",
                            Locale = "English - United States"
                        },
                        new
                        {
                            LangId = 56,
                            LanguageCode = "et",
                            Lcid = "et",
                            Locale = "Estonian"
                        },
                        new
                        {
                            LangId = 57,
                            LanguageCode = "mk",
                            Lcid = "mk",
                            Locale = "FYRO Macedonia"
                        },
                        new
                        {
                            LangId = 58,
                            LanguageCode = "fo",
                            Lcid = "fo",
                            Locale = "Faroese"
                        },
                        new
                        {
                            LangId = 59,
                            LanguageCode = "fa",
                            Lcid = "fa",
                            Locale = "Farsi - Persian"
                        },
                        new
                        {
                            LangId = 60,
                            LanguageCode = "fi",
                            Lcid = "fi",
                            Locale = "Finnish"
                        },
                        new
                        {
                            LangId = 61,
                            LanguageCode = "fr",
                            Lcid = "fr-be",
                            Locale = "French - Belgium"
                        },
                        new
                        {
                            LangId = 62,
                            LanguageCode = "fr",
                            Lcid = "fr-ca",
                            Locale = "French - Canada"
                        },
                        new
                        {
                            LangId = 63,
                            LanguageCode = "fr",
                            Lcid = "fr-fr",
                            Locale = "French - France"
                        },
                        new
                        {
                            LangId = 64,
                            LanguageCode = "fr",
                            Lcid = "fr-lu",
                            Locale = "French - Luxembourg"
                        },
                        new
                        {
                            LangId = 65,
                            LanguageCode = "fr",
                            Lcid = "fr-ch",
                            Locale = "French - Switzerland"
                        },
                        new
                        {
                            LangId = 66,
                            LanguageCode = "gd",
                            Lcid = "gd-ie",
                            Locale = "Gaelic - Ireland"
                        },
                        new
                        {
                            LangId = 67,
                            LanguageCode = "gd",
                            Lcid = "gd",
                            Locale = "Gaelic - Scotland"
                        },
                        new
                        {
                            LangId = 68,
                            LanguageCode = "de",
                            Lcid = "de-at",
                            Locale = "German - Austria"
                        },
                        new
                        {
                            LangId = 69,
                            LanguageCode = "de",
                            Lcid = "de-de",
                            Locale = "German - Germany"
                        },
                        new
                        {
                            LangId = 70,
                            LanguageCode = "de",
                            Lcid = "de-li",
                            Locale = "German - Liechtenstein"
                        },
                        new
                        {
                            LangId = 71,
                            LanguageCode = "de",
                            Lcid = "de-lu",
                            Locale = "German - Luxembourg"
                        },
                        new
                        {
                            LangId = 72,
                            LanguageCode = "de",
                            Lcid = "de-ch",
                            Locale = "German - Switzerland"
                        },
                        new
                        {
                            LangId = 73,
                            LanguageCode = "el",
                            Lcid = "el",
                            Locale = "Greek"
                        },
                        new
                        {
                            LangId = 74,
                            LanguageCode = "gn",
                            Lcid = "gn",
                            Locale = "Guarani - Paraguay"
                        },
                        new
                        {
                            LangId = 75,
                            LanguageCode = "gu",
                            Lcid = "gu",
                            Locale = "Gujarati"
                        },
                        new
                        {
                            LangId = 76,
                            LanguageCode = "he",
                            Lcid = "he",
                            Locale = "Hebrew"
                        },
                        new
                        {
                            LangId = 77,
                            LanguageCode = "hi",
                            Lcid = "hi",
                            Locale = "Hindi"
                        },
                        new
                        {
                            LangId = 78,
                            LanguageCode = "hu",
                            Lcid = "hu",
                            Locale = "Hungarian"
                        },
                        new
                        {
                            LangId = 79,
                            LanguageCode = "is",
                            Lcid = "is",
                            Locale = "Icelandic"
                        },
                        new
                        {
                            LangId = 80,
                            LanguageCode = "id",
                            Lcid = "id",
                            Locale = "Indonesian"
                        },
                        new
                        {
                            LangId = 81,
                            LanguageCode = "it",
                            Lcid = "it-it",
                            Locale = "Italian - Italy"
                        },
                        new
                        {
                            LangId = 82,
                            LanguageCode = "it",
                            Lcid = "it-ch",
                            Locale = "Italian - Switzerland"
                        },
                        new
                        {
                            LangId = 83,
                            LanguageCode = "ja",
                            Lcid = "ja",
                            Locale = "Japanese"
                        },
                        new
                        {
                            LangId = 84,
                            LanguageCode = "kn",
                            Lcid = "kn",
                            Locale = "Kannada"
                        },
                        new
                        {
                            LangId = 85,
                            LanguageCode = "ks",
                            Lcid = "ks",
                            Locale = "Kashmiri"
                        },
                        new
                        {
                            LangId = 86,
                            LanguageCode = "kk",
                            Lcid = "kk",
                            Locale = "Kazakh"
                        },
                        new
                        {
                            LangId = 87,
                            LanguageCode = "km",
                            Lcid = "km",
                            Locale = "Khmer"
                        },
                        new
                        {
                            LangId = 88,
                            LanguageCode = "ko",
                            Lcid = "ko",
                            Locale = "Korean"
                        },
                        new
                        {
                            LangId = 89,
                            LanguageCode = "lo",
                            Lcid = "lo",
                            Locale = "Lao"
                        },
                        new
                        {
                            LangId = 90,
                            LanguageCode = "la",
                            Lcid = "la",
                            Locale = "Latin"
                        },
                        new
                        {
                            LangId = 91,
                            LanguageCode = "lv",
                            Lcid = "lv",
                            Locale = "Latvian"
                        },
                        new
                        {
                            LangId = 92,
                            LanguageCode = "lt",
                            Lcid = "lt",
                            Locale = "Lithuanian"
                        },
                        new
                        {
                            LangId = 93,
                            LanguageCode = "ms",
                            Lcid = "ms-bn",
                            Locale = "Malay - Brunei"
                        },
                        new
                        {
                            LangId = 94,
                            LanguageCode = "ms",
                            Lcid = "ms-my",
                            Locale = "Malay - Malaysia"
                        },
                        new
                        {
                            LangId = 95,
                            LanguageCode = "ml",
                            Lcid = "ml",
                            Locale = "Malayalam"
                        },
                        new
                        {
                            LangId = 96,
                            LanguageCode = "mt",
                            Lcid = "mt",
                            Locale = "Maltese"
                        },
                        new
                        {
                            LangId = 97,
                            LanguageCode = "mi",
                            Lcid = "mi",
                            Locale = "Maori"
                        },
                        new
                        {
                            LangId = 98,
                            LanguageCode = "mr",
                            Lcid = "mr",
                            Locale = "Marathi"
                        },
                        new
                        {
                            LangId = 99,
                            LanguageCode = "mn",
                            Lcid = "mn",
                            Locale = "Mongolian"
                        },
                        new
                        {
                            LangId = 100,
                            LanguageCode = "mn",
                            Lcid = "mn",
                            Locale = "Mongolian"
                        },
                        new
                        {
                            LangId = 101,
                            LanguageCode = "ne",
                            Lcid = "ne",
                            Locale = "Nepali"
                        },
                        new
                        {
                            LangId = 102,
                            LanguageCode = "nb",
                            Lcid = "no-no",
                            Locale = "Norwegian - Bokml"
                        },
                        new
                        {
                            LangId = 103,
                            LanguageCode = "nn",
                            Lcid = "no-no",
                            Locale = "Norwegian - Nynorsk"
                        },
                        new
                        {
                            LangId = 104,
                            LanguageCode = "or",
                            Lcid = "or",
                            Locale = "Oriya"
                        },
                        new
                        {
                            LangId = 105,
                            LanguageCode = "pl",
                            Lcid = "pl",
                            Locale = "Polish"
                        },
                        new
                        {
                            LangId = 106,
                            LanguageCode = "pt",
                            Lcid = "pt-br",
                            Locale = "Portuguese - Brazil"
                        },
                        new
                        {
                            LangId = 107,
                            LanguageCode = "pt",
                            Lcid = "pt-pt",
                            Locale = "Portuguese - Portugal"
                        },
                        new
                        {
                            LangId = 108,
                            LanguageCode = "pa",
                            Lcid = "pa",
                            Locale = "Punjabi"
                        },
                        new
                        {
                            LangId = 109,
                            LanguageCode = "rm",
                            Lcid = "rm",
                            Locale = "Raeto-Romance"
                        },
                        new
                        {
                            LangId = 110,
                            LanguageCode = "ro",
                            Lcid = "ro-mo",
                            Locale = "Romanian - Moldova"
                        },
                        new
                        {
                            LangId = 111,
                            LanguageCode = "ro",
                            Lcid = "ro",
                            Locale = "Romanian - Romania"
                        },
                        new
                        {
                            LangId = 112,
                            LanguageCode = "ru",
                            Lcid = "ru",
                            Locale = "Russian"
                        },
                        new
                        {
                            LangId = 113,
                            LanguageCode = "ru",
                            Lcid = "ru-mo",
                            Locale = "Russian - Moldova"
                        },
                        new
                        {
                            LangId = 114,
                            LanguageCode = "sa",
                            Lcid = "sa",
                            Locale = "Sanskrit"
                        },
                        new
                        {
                            LangId = 115,
                            LanguageCode = "sr",
                            Lcid = "sr-sp",
                            Locale = "Serbian - Cyrillic"
                        },
                        new
                        {
                            LangId = 116,
                            LanguageCode = "sr",
                            Lcid = "sr-sp",
                            Locale = "Serbian - Latin"
                        },
                        new
                        {
                            LangId = 117,
                            LanguageCode = "tn",
                            Lcid = "tn",
                            Locale = "Setsuana"
                        },
                        new
                        {
                            LangId = 118,
                            LanguageCode = "sd",
                            Lcid = "sd",
                            Locale = "Sindhi"
                        },
                        new
                        {
                            LangId = 119,
                            LanguageCode = "Sinhalese",
                            Lcid = "si",
                            Locale = "Sinhala"
                        },
                        new
                        {
                            LangId = 120,
                            LanguageCode = "sk",
                            Lcid = "sk",
                            Locale = "Slovak"
                        },
                        new
                        {
                            LangId = 121,
                            LanguageCode = "sl",
                            Lcid = "sl",
                            Locale = "Slovenian"
                        },
                        new
                        {
                            LangId = 122,
                            LanguageCode = "so",
                            Lcid = "so",
                            Locale = "Somali"
                        },
                        new
                        {
                            LangId = 123,
                            LanguageCode = "sb",
                            Lcid = "sb",
                            Locale = "Sorbian"
                        },
                        new
                        {
                            LangId = 124,
                            LanguageCode = "es",
                            Lcid = "es-ar",
                            Locale = "Spanish - Argentina"
                        },
                        new
                        {
                            LangId = 125,
                            LanguageCode = "es",
                            Lcid = "es-bo",
                            Locale = "Spanish - Bolivia"
                        },
                        new
                        {
                            LangId = 126,
                            LanguageCode = "es",
                            Lcid = "es-cl",
                            Locale = "Spanish - Chile"
                        },
                        new
                        {
                            LangId = 127,
                            LanguageCode = "es",
                            Lcid = "es-co",
                            Locale = "Spanish - Colombia"
                        },
                        new
                        {
                            LangId = 128,
                            LanguageCode = "es",
                            Lcid = "es-cr",
                            Locale = "Spanish - Costa Rica"
                        },
                        new
                        {
                            LangId = 129,
                            LanguageCode = "es",
                            Lcid = "es-do",
                            Locale = "Spanish - Dominican Republic"
                        },
                        new
                        {
                            LangId = 130,
                            LanguageCode = "es",
                            Lcid = "es-ec",
                            Locale = "Spanish - Ecuador"
                        },
                        new
                        {
                            LangId = 131,
                            LanguageCode = "es",
                            Lcid = "es-sv",
                            Locale = "Spanish - El Salvador"
                        },
                        new
                        {
                            LangId = 132,
                            LanguageCode = "es",
                            Lcid = "es-gt",
                            Locale = "Spanish - Guatemala"
                        },
                        new
                        {
                            LangId = 133,
                            LanguageCode = "es",
                            Lcid = "es-hn",
                            Locale = "Spanish - Honduras"
                        },
                        new
                        {
                            LangId = 134,
                            LanguageCode = "es",
                            Lcid = "es-mx",
                            Locale = "Spanish - Mexico"
                        },
                        new
                        {
                            LangId = 135,
                            LanguageCode = "es",
                            Lcid = "es-ni",
                            Locale = "Spanish - Nicaragua"
                        },
                        new
                        {
                            LangId = 136,
                            LanguageCode = "es",
                            Lcid = "es-pa",
                            Locale = "Spanish - Panama"
                        },
                        new
                        {
                            LangId = 137,
                            LanguageCode = "es",
                            Lcid = "es-py",
                            Locale = "Spanish - Paraguay"
                        },
                        new
                        {
                            LangId = 138,
                            LanguageCode = "es",
                            Lcid = "es-pe",
                            Locale = "Spanish - Peru"
                        },
                        new
                        {
                            LangId = 139,
                            LanguageCode = "es",
                            Lcid = "es-pr",
                            Locale = "Spanish - Puerto Rico"
                        },
                        new
                        {
                            LangId = 140,
                            LanguageCode = "es",
                            Lcid = "es-es",
                            Locale = "Spanish - Spain (Traditional)"
                        },
                        new
                        {
                            LangId = 141,
                            LanguageCode = "es",
                            Lcid = "es-uy",
                            Locale = "Spanish - Uruguay"
                        },
                        new
                        {
                            LangId = 142,
                            LanguageCode = "es",
                            Lcid = "es-ve",
                            Locale = "Spanish - Venezuela"
                        },
                        new
                        {
                            LangId = 143,
                            LanguageCode = "sw",
                            Lcid = "sw",
                            Locale = "Swahili"
                        },
                        new
                        {
                            LangId = 144,
                            LanguageCode = "sv",
                            Lcid = "sv-fi",
                            Locale = "Swedish - Finland"
                        },
                        new
                        {
                            LangId = 145,
                            LanguageCode = "sv",
                            Lcid = "sv-se",
                            Locale = "Swedish - Sweden"
                        },
                        new
                        {
                            LangId = 146,
                            LanguageCode = "tg",
                            Lcid = "tg",
                            Locale = "Tajik"
                        },
                        new
                        {
                            LangId = 147,
                            LanguageCode = "ta",
                            Lcid = "ta",
                            Locale = "Tamil"
                        },
                        new
                        {
                            LangId = 148,
                            LanguageCode = "tt",
                            Lcid = "tt",
                            Locale = "Tatar"
                        },
                        new
                        {
                            LangId = 149,
                            LanguageCode = "te",
                            Lcid = "te",
                            Locale = "Telugu"
                        },
                        new
                        {
                            LangId = 150,
                            LanguageCode = "th",
                            Lcid = "th",
                            Locale = "Thai"
                        },
                        new
                        {
                            LangId = 151,
                            LanguageCode = "bo",
                            Lcid = "bo",
                            Locale = "Tibetan"
                        },
                        new
                        {
                            LangId = 152,
                            LanguageCode = "ts",
                            Lcid = "ts",
                            Locale = "Tsonga"
                        },
                        new
                        {
                            LangId = 153,
                            LanguageCode = "tr",
                            Lcid = "tr",
                            Locale = "Turkish"
                        },
                        new
                        {
                            LangId = 154,
                            LanguageCode = "tk",
                            Lcid = "tk",
                            Locale = "Turkmen"
                        },
                        new
                        {
                            LangId = 155,
                            LanguageCode = "uk",
                            Lcid = "uk",
                            Locale = "Ukrainian"
                        },
                        new
                        {
                            LangId = 157,
                            LanguageCode = "ur",
                            Lcid = "ur",
                            Locale = "Urdu"
                        },
                        new
                        {
                            LangId = 158,
                            LanguageCode = "uz",
                            Lcid = "uz-uz",
                            Locale = "Uzbek - Cyrillic"
                        },
                        new
                        {
                            LangId = 159,
                            LanguageCode = "uz",
                            Lcid = "uz-uz",
                            Locale = "Uzbek - Latin"
                        },
                        new
                        {
                            LangId = 160,
                            LanguageCode = "vi",
                            Lcid = "vi",
                            Locale = "Vietnamese"
                        },
                        new
                        {
                            LangId = 161,
                            LanguageCode = "cy",
                            Lcid = "cy",
                            Locale = "Welsh"
                        },
                        new
                        {
                            LangId = 162,
                            LanguageCode = "xh",
                            Lcid = "xh",
                            Locale = "Xhosa"
                        },
                        new
                        {
                            LangId = 163,
                            LanguageCode = "yi",
                            Lcid = "yi",
                            Locale = "Yiddish"
                        },
                        new
                        {
                            LangId = 164,
                            LanguageCode = "zu",
                            Lcid = "zu",
                            Locale = "Zulu"
                        });
                });

            modelBuilder.Entity("opensis.data.Models.LoginSession", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emailaddress");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ipaddress");

                    b.Property<bool?>("IsExpired")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_expired");

                    b.Property<DateTime?>("LoginTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("login_time");

                    b.Property<string>("Token")
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id", "TenantId", "SchoolId", "EmailAddress")
                        .HasName("PK_login_session_id");

                    b.ToTable("login_session", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Membership", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSuperadmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_superadmin");

                    b.Property<bool?>("IsSystem")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_system");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("profile");

                    b.Property<string>("ProfileType")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("profile_type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "MembershipId")
                        .HasName("PK_membership_tenant_id");

                    b.ToTable("membership", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Notice", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("NoticeId")
                        .HasColumnType("int")
                        .HasColumnName("notice_id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("body");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool>("Isactive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isactive");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("TargetMembershipIds")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("target_membership_ids");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("date")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("date")
                        .HasColumnName("valid_to");

                    b.Property<bool>("VisibleToAllSchool")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("visible_to_all_school");

                    b.HasKey("TenantId", "SchoolId", "NoticeId")
                        .HasName("PK_notice_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "NoticeId", "CreatedOn", "SortOrder" }, "IX_notice");

                    b.ToTable("notice", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ParentAddress", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("AddressLineOne")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address_line_one");

                    b.Property<string>("AddressLineTwo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address_line_two");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.Property<bool>("StudentAddressSame")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("student_address_same");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("zip");

                    b.HasKey("TenantId", "SchoolId", "ParentId", "StudentId")
                        .HasName("PK_parent_address_tenant_id");

                    b.ToTable("parent_address", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ParentAssociationship", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<bool>("Associationship")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("associationship");

                    b.Property<string>("ContactType")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("contact_type");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsCustodian")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_custodian");

                    b.Property<string>("Relationship")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("relationship");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "ParentId", "StudentId")
                        .HasName("PK_parent_associationship_tenant_id");

                    b.ToTable("parent_associationship", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ParentInfo", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<bool?>("BusDropoff")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bus_dropoff");

                    b.Property<string>("BusNo")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("bus_No");

                    b.Property<bool?>("BusPickup")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bus_pickup");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("home_phone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPortalUser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_portal_user");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("LoginEmail")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("login_email");

                    b.Property<string>("Middlename")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("middlename");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("mobile");

                    b.Property<Guid>("ParentGuid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("parent_guid")
                        .HasDefaultValueSql("(N'00000000-0000-0000-0000-000000000000')")
                        .IsFixedLength();

                    b.Property<byte[]>("ParentPhoto")
                        .HasColumnType("longblob")
                        .HasColumnName("parent_photo");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("personal_email");

                    b.Property<string>("Salutation")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("salutation");

                    b.Property<string>("Suffix")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("suffix");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserProfile")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_profile");

                    b.Property<string>("WorkEmail")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("work_email");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("work_phone");

                    b.HasKey("TenantId", "SchoolId", "ParentId")
                        .HasName("PK_parent_info_tenant_id");

                    b.ToTable("parent_info", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ParentListView", b =>
                {
                    b.Property<string>("AddressLineOne")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address_line_one");

                    b.Property<string>("AddressLineTwo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address_line_two");

                    b.Property<bool>("Associationship")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("associationship");

                    b.Property<bool?>("BusDropoff")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bus_dropoff");

                    b.Property<string>("BusNo")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("bus_No");

                    b.Property<bool?>("BusPickup")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bus_pickup");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("FirstGivenName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_given_name");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("home_phone");

                    b.Property<bool>("IsPortalUser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_portal_user");

                    b.Property<string>("LastFamilyName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_family_name");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("LoginEmail")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("login_email");

                    b.Property<string>("Middlename")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("middlename");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("mobile");

                    b.Property<Guid>("ParentGuid")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("parent_guid")
                        .IsFixedLength();

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<byte[]>("ParentPhoto")
                        .HasColumnType("longblob")
                        .HasColumnName("parent_photo");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("personal_email");

                    b.Property<string>("Relationship")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("relationship");

                    b.Property<string>("Salutation")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("salutation");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.Property<bool?>("StudentAddressSame")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("student_address_same");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("StudentMiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_middle_name");

                    b.Property<string>("Suffix")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("suffix");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserProfile")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_profile");

                    b.Property<string>("WorkEmail")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("work_email");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("work_phone");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("zip");

                    b.ToView("parent_list_view");
                });

            modelBuilder.Entity("opensis.data.Models.PermissionCategory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("PermissionCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("permission_category_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("EnableAdd")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_add");

                    b.Property<bool?>("EnableDelete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_delete");

                    b.Property<bool?>("EnableEdit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_edit");

                    b.Property<bool?>("EnableView")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_view");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("path");

                    b.Property<string>("PermissionCategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("permission_category_name");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int")
                        .HasColumnName("permission_group_id");

                    b.Property<string>("ShortCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("short_code");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "PermissionCategoryId")
                        .HasName("PK_permission_category_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "PermissionGroupId" }, "IX_permission_category_tenant_id_school_id_permiss");

                    b.ToTable("permission_category", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.PermissionGroup", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int")
                        .HasColumnName("permission_group_id");

                    b.Property<bool?>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active");

                    b.Property<string>("BadgeType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("badgeType");

                    b.Property<string>("BadgeValue")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("badgeValue");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("icon");

                    b.Property<string>("IconType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("icon_type");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_system");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("path");

                    b.Property<string>("PermissionGroupName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("permission_group_name");

                    b.Property<string>("ShortName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("short_name");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "PermissionGroupId")
                        .HasName("PK_permission_group_tenant_id");

                    b.ToTable("permission_group", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.PermissionSubcategory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("PermissionSubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("permission_subcategory_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("EnableAdd")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_add");

                    b.Property<bool?>("EnableDelete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_delete");

                    b.Property<bool?>("EnableEdit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_edit");

                    b.Property<bool?>("EnableView")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_view");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsSystem")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_system");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("path");

                    b.Property<int>("PermissionCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("permission_category_id");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int")
                        .HasColumnName("permission_group_id");

                    b.Property<string>("PermissionSubcategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("permission_subcategory_name");

                    b.Property<string>("ShortCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("short_code");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "PermissionSubcategoryId")
                        .HasName("PK_permission_subcategory_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "PermissionCategoryId" }, "IX_permission_subcategory_tenant_id_school_id_perm");

                    b.ToTable("permission_subcategory", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Plans", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<byte[]>("Features")
                        .HasColumnType("longblob")
                        .HasColumnName("features");

                    b.Property<int?>("MaxApiChecks")
                        .HasColumnType("int")
                        .HasColumnName("max_api_checks");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "PlanId")
                        .HasName("PK_plans_tenant_id");

                    b.ToTable("plans", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Programs", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("program_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("ProgramName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("program_name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "ProgramId")
                        .HasName("PK_programs_tenant_id");

                    b.ToTable("programs", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ProgressPeriods", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("marking_period_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("DoesComments")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_comments");

                    b.Property<bool?>("DoesExam")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_exam");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_grades");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnType("date")
                        .HasColumnName("post_end_date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnType("date")
                        .HasColumnName("post_start_date");

                    b.Property<int?>("QuarterId")
                        .HasColumnType("int")
                        .HasColumnName("quarter_id");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("short_name");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasName("PK_progress_periods_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "QuarterId" }, "IX_progress_periods_tenant_id_school_id_quarter_id");

                    b.ToTable("progress_periods", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Quarters", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("marking_period_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("DoesComments")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_comments");

                    b.Property<bool?>("DoesExam")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_exam");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_grades");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnType("date")
                        .HasColumnName("post_end_date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnType("date")
                        .HasColumnName("post_start_date");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("int")
                        .HasColumnName("semester_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("short_name");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(10,0)")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasName("PK_quarters_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "SemesterId" }, "IX_quarters_tenant_id_school_id_semester_id");

                    b.ToTable("quarters", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ReleaseNumber", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("ReleaseNumber1")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("release_number");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "ReleaseNumber1")
                        .HasName("PK_release_number_tenant_id");

                    b.ToTable("release_number", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.RolePermission", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("RolePermissionId")
                        .HasColumnType("int")
                        .HasColumnName("role_permission_id");

                    b.Property<bool?>("CanAdd")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_add");

                    b.Property<bool?>("CanDelete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_delete");

                    b.Property<bool?>("CanEdit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_edit");

                    b.Property<bool?>("CanView")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_view");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<int?>("PermissionCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("permission_category_id");

                    b.Property<int?>("PermissionGroupId")
                        .HasColumnType("int")
                        .HasColumnName("permission_group_id");

                    b.Property<int?>("PermissionSubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("permission_subcategory_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "RolePermissionId")
                        .HasName("PK_role_permission_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "MembershipId" }, "IX_role_permission_tenant_id_school_id_membership_");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "PermissionCategoryId" }, "IX_role_permission_tenant_id_school_id_permission_");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "PermissionGroupId" }, "role_permission_tenant_id_school_id_permission");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "PermissionSubcategoryId" }, "role_permission_tenant_id_school_id_permission_id");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Rooms", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isactive");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "RoomId")
                        .HasName("PK_rooms_tenant_id");

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ScheduledJob", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasColumnName("job_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("ApiTitle")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("api_title");

                    b.Property<string>("ControllerPath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("controller_path");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("JobScheduleDate")
                        .HasColumnType("date")
                        .HasColumnName("job_schedule_date");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("job_title");

                    b.Property<bool?>("LastRunStatus")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("last_run_status");

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_run_time");

                    b.Property<string>("TaskJson")
                        .HasColumnType("longtext")
                        .HasColumnName("task_json");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "JobId");

                    b.ToTable("scheduled_job", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ScheduledJobHistory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasColumnName("job_id");

                    b.Property<int>("JobRunId")
                        .HasColumnType("int")
                        .HasColumnName("job_run_id");

                    b.Property<bool?>("JobStatus")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("job_status");

                    b.Property<DateTime?>("RunTime")
                        .HasColumnType("datetime")
                        .HasColumnName("run_time");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("date")
                        .HasColumnName("scheduled_date");

                    b.HasKey("TenantId", "SchoolId", "JobId", "JobRunId");

                    b.ToTable("scheduled_job_history", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.SchoolCalendars", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("CalenderId")
                        .HasColumnType("int")
                        .HasColumnName("calender_id");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Days")
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("days");

                    b.Property<bool?>("DefaultCalender")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("default_calender");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<bool?>("SessionCalendar")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("session_calendar");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("VisibleToMembershipId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("visible_to_membership_id");

                    b.HasKey("TenantId", "SchoolId", "CalenderId")
                        .HasName("PK_school_calendars_tenant_id");

                    b.ToTable("school_calendars", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.SchoolDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Affiliation")
                        .HasColumnType("longtext")
                        .HasColumnName("affiliation");

                    b.Property<string>("Associations")
                        .HasColumnType("longtext")
                        .HasColumnName("associations");

                    b.Property<string>("CommonToiletAccessibility")
                        .HasColumnType("longtext")
                        .HasColumnName("common_toilet_accessibility");

                    b.Property<string>("ComonToiletType")
                        .HasColumnType("longtext")
                        .HasColumnName("comon_toilet_type");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("CurrentlyAvailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("currently_available");

                    b.Property<DateTime?>("DateSchoolClosed")
                        .HasColumnType("date")
                        .HasColumnName("date_school_closed");

                    b.Property<DateTime?>("DateSchoolOpened")
                        .HasColumnType("date")
                        .HasColumnName("date_school_opened");

                    b.Property<bool?>("Electricity")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("electricity");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("email")
                        .IsFixedLength();

                    b.Property<string>("Facebook")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("facebook")
                        .IsFixedLength();

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("char(20)")
                        .HasColumnName("fax")
                        .IsFixedLength();

                    b.Property<string>("FemaleToiletAccessibility")
                        .HasColumnType("longtext")
                        .HasColumnName("female_toilet_accessibility");

                    b.Property<string>("FemaleToiletType")
                        .HasColumnType("longtext")
                        .HasColumnName("female_toilet_type");

                    b.Property<string>("Gender")
                        .HasMaxLength(15)
                        .HasColumnType("char(15)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<bool?>("HandwashingAvailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("handwashing_available");

                    b.Property<string>("HighestGradeLevel")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("highest_grade_level")
                        .IsFixedLength();

                    b.Property<string>("HygeneEducation")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("hygene_education")
                        .IsFixedLength();

                    b.Property<string>("Instagram")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("instagram")
                        .IsFixedLength();

                    b.Property<bool?>("Internet")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("internet");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("linkedin")
                        .IsFixedLength();

                    b.Property<string>("Locale")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("locale")
                        .IsFixedLength();

                    b.Property<string>("LowestGradeLevel")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("lowest_grade_level")
                        .IsFixedLength();

                    b.Property<string>("MainSourceOfDrinkingWater")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("main_source_of_drinking_water")
                        .IsFixedLength();

                    b.Property<string>("MaleToiletAccessibility")
                        .HasColumnType("longtext")
                        .HasColumnName("male_toilet_accessibility");

                    b.Property<string>("MaleToiletType")
                        .HasColumnType("longtext")
                        .HasColumnName("male_toilet_type");

                    b.Property<string>("NameOfAssistantPrincipal")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("name_of_assistant_principal")
                        .IsFixedLength();

                    b.Property<string>("NameOfPrincipal")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("name_of_principal")
                        .IsFixedLength();

                    b.Property<bool?>("RunningWater")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("running_water");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<byte[]>("SchoolLogo")
                        .HasColumnType("longblob")
                        .HasColumnName("school_logo");

                    b.Property<bool?>("SoapAndWaterAvailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("soap_and_water_available");

                    b.Property<bool?>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("Telephone")
                        .HasMaxLength(30)
                        .HasColumnType("char(30)")
                        .HasColumnName("telephone")
                        .IsFixedLength();

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<short?>("TotalCommonToilets")
                        .HasColumnType("smallint")
                        .HasColumnName("total_common_toilets");

                    b.Property<short?>("TotalCommonToiletsUsable")
                        .HasColumnType("smallint")
                        .HasColumnName("total_common_toilets_usable");

                    b.Property<short?>("TotalFemaleToilets")
                        .HasColumnType("smallint")
                        .HasColumnName("total_female_toilets");

                    b.Property<short?>("TotalFemaleToiletsUsable")
                        .HasColumnType("smallint")
                        .HasColumnName("total_female_toilets_usable");

                    b.Property<short?>("TotalMaleToilets")
                        .HasColumnType("smallint")
                        .HasColumnName("total_male_toilets");

                    b.Property<short?>("TotalMaleToiletsUsable")
                        .HasColumnType("smallint")
                        .HasColumnName("total_male_toilets_usable");

                    b.Property<string>("Twitter")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("twitter")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("Website")
                        .HasMaxLength(150)
                        .HasColumnType("char(150)")
                        .HasColumnName("website")
                        .IsFixedLength();

                    b.Property<string>("Youtube")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasColumnName("youtube")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "SchoolId" }, "IX_school_detail_tenant_id_school_id");

                    b.ToTable("school_detail", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.SchoolMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("AlternateName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("alternate_name");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("city")
                        .IsFixedLength();

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("country")
                        .IsFixedLength();

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("county")
                        .IsFixedLength();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("CurrentPeriodEnds")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("current_period_ends");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("district")
                        .IsFixedLength();

                    b.Property<string>("Division")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("division")
                        .IsFixedLength();

                    b.Property<string>("Features")
                        .HasColumnType("longtext")
                        .HasColumnName("features");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<int?>("MaxApiChecks")
                        .HasColumnType("int")
                        .HasColumnName("max_api_checks");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("plan_id");

                    b.Property<string>("SchoolAltId")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("school_alt_id")
                        .IsFixedLength();

                    b.Property<string>("SchoolClassification")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("school_classification")
                        .IsFixedLength();

                    b.Property<string>("SchoolDistrictId")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("school_district_id")
                        .IsFixedLength();

                    b.Property<Guid>("SchoolGuid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("school_guid")
                        .HasDefaultValueSql("(N'00000000-0000-0000-0000-000000000000')")
                        .IsFixedLength();

                    b.Property<string>("SchoolInternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("school_internal_id");

                    b.Property<string>("SchoolLevel")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("school_level")
                        .IsFixedLength();

                    b.Property<string>("SchoolName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("school_name");

                    b.Property<string>("SchoolStateId")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("school_state_id")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("state")
                        .IsFixedLength();

                    b.Property<string>("StreetAddress1")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("street_address_1");

                    b.Property<string>("StreetAddress2")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("street_address_2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .HasColumnType("char(20)")
                        .HasColumnName("zip")
                        .IsFixedLength();

                    b.HasKey("TenantId", "SchoolId")
                        .HasName("PK_school_master_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "PlanId" }, "IX_school_master_tenant_id_school_id_plan_id");

                    b.ToTable("school_master", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.SchoolPreference", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<long>("SchoolPreferenceId")
                        .HasColumnType("bigint")
                        .HasColumnName("school_preference_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("FullDayMinutes")
                        .HasColumnType("int")
                        .HasColumnName("full_day_minutes");

                    b.Property<int?>("HalfDayMinutes")
                        .HasColumnType("int")
                        .HasColumnName("half_day_minutes");

                    b.Property<int?>("MaxInactivityDays")
                        .HasColumnType("int")
                        .HasColumnName("max_inactivity_days");

                    b.Property<int?>("MaxLoginFailure")
                        .HasColumnType("int")
                        .HasColumnName("max_login_failure");

                    b.Property<string>("SchoolAltId")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("school_alt_id")
                        .IsFixedLength();

                    b.Property<Guid>("SchoolGuid")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("school_guid")
                        .IsFixedLength();

                    b.Property<string>("SchoolInternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("school_internal_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "SchoolPreferenceId")
                        .HasName("PK_school_preference_tenant_id");

                    b.ToTable("school_preference", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.SchoolRollover", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("ReenrollmentDate")
                        .HasColumnType("date")
                        .HasColumnName("reenrollment_date");

                    b.Property<string>("RolloverContent")
                        .HasColumnType("longtext")
                        .HasColumnName("rollover_content");

                    b.Property<bool?>("RolloverStatus")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("rollover_status");

                    b.Property<DateTime?>("SchoolBeginDate")
                        .HasColumnType("date")
                        .HasColumnName("school_begin_date");

                    b.Property<DateTime?>("SchoolEndDate")
                        .HasColumnType("date")
                        .HasColumnName("school_end_date");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "RolloverId")
                        .HasName("PK_school_rollover_tenant_id");

                    b.ToTable("school_rollover", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.SchoolYears", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("marking_period_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("DoesComments")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_comments");

                    b.Property<bool?>("DoesExam")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_exam");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_grades");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnType("date")
                        .HasColumnName("post_end_date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnType("date")
                        .HasColumnName("post_start_date");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("short_name");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(10,0)")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasName("PK_school_years_tenant_id");

                    b.ToTable("school_years", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.SearchFilter", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("Module")
                        .HasMaxLength(15)
                        .HasColumnType("char(15)")
                        .HasColumnName("module")
                        .IsFixedLength();

                    b.Property<int>("FilterId")
                        .HasColumnType("int")
                        .HasColumnName("filter_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("char(150)")
                        .HasColumnName("created_by")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Emailaddress")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emailaddress");

                    b.Property<string>("FilterName")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("filter_name")
                        .IsFixedLength();

                    b.Property<string>("JsonList")
                        .HasColumnType("longtext")
                        .HasColumnName("json_list");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("char(150)")
                        .HasColumnName("updated_by")
                        .IsFixedLength();

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "Module", "FilterId")
                        .HasName("PK_search_filter_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "FilterName" }, "IX_search_filter");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "Emailaddress" }, "IX_search_filter_tenant_id_school_id_emailaddress");

                    b.ToTable("search_filter", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Sections", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "SectionId")
                        .HasName("PK_sections_tenant_id");

                    b.ToTable("sections", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Semesters", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("marking_period_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("DoesComments")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_comments");

                    b.Property<bool?>("DoesExam")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_exam");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("does_grades");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnType("date")
                        .HasColumnName("post_end_date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnType("date")
                        .HasColumnName("post_start_date");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("short_name");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(10,0)")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("YearId")
                        .HasColumnType("int")
                        .HasColumnName("year_id");

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasName("PK_semesters_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "YearId" }, "IX_semesters_tenant_id_school_id_year_id");

                    b.ToTable("semesters", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StaffCertificateInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CertificationCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("certification_code");

                    b.Property<DateTime?>("CertificationDate")
                        .HasColumnType("date")
                        .HasColumnName("certification_date");

                    b.Property<string>("CertificationDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("certification_description");

                    b.Property<DateTime?>("CertificationExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("certification_expiry_date");

                    b.Property<string>("CertificationName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("certification_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("PrimaryCertification")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("primary_certification");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("short_name");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<Guid?>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "StaffId" }, "IX_staff_certificate_info_tenant_id_staff_id");

                    b.ToTable("staff_certificate_info", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StaffCoursesectionSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CourseSectionName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("course_section_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DurationEndDate")
                        .HasColumnType("date")
                        .HasColumnName("duration_end_date");

                    b.Property<DateTime?>("DurationStartDate")
                        .HasColumnType("date")
                        .HasColumnName("duration_start_date");

                    b.Property<DateTime?>("EffectiveDropDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("effective_drop_date");

                    b.Property<bool?>("IsAssigned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_assigned");

                    b.Property<bool?>("IsDropped")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_dropped");

                    b.Property<string>("MeetingDays")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("meeting_days");

                    b.Property<int?>("PrgrsprdMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("prgrsprd_marking_period_id");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("smstr_marking_period_id");

                    b.Property<Guid>("StaffGuid")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("staff_guid")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("YrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("yr_marking_period_id");

                    b.HasKey("TenantId", "SchoolId", "StaffId", "CourseId", "CourseSectionId")
                        .HasName("PK_staff_coursesection_schedule_tenant_id");

                    b.HasIndex("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "CourseId", "CourseSectionId" }, "IX_staff_coursesection_schedule_tenant_id_school_i");

                    b.HasIndex(new[] { "TenantId", "StaffId" }, "IX_staff_coursesection_schedule_tenant_id_staff_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "QtrMarkingPeriodId" }, "staff_coursesection_schedule_tenant_id_1");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "SmstrMarkingPeriodId" }, "staff_coursesection_schedule_tenant_id_2");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "YrMarkingPeriodId" }, "staff_coursesection_schedule_tenant_id_3");

                    b.ToTable("staff_coursesection_schedule", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StaffMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<string>("AlternateId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("alternate_id");

                    b.Property<bool?>("BusDropoff")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bus_dropoff");

                    b.Property<string>("BusNo")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("bus_no");

                    b.Property<bool?>("BusPickup")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bus_pickup");

                    b.Property<int?>("CountryOfBirth")
                        .HasColumnType("int")
                        .HasColumnName("country_of_birth");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("DisabilityDescription")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("disability_description");

                    b.Property<string>("DistrictId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("district_id");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("EmergencyEmail")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emergency_email");

                    b.Property<string>("EmergencyFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("emergency_first_name");

                    b.Property<string>("EmergencyHomePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("emergency_home_phone");

                    b.Property<string>("EmergencyLastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("emergency_last_name");

                    b.Property<string>("EmergencyMobilePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("emergency_mobile_phone");

                    b.Property<string>("EmergencyWorkPhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("emergency_work_phone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ethnicity");

                    b.Property<string>("Facebook")
                        .HasColumnType("longtext")
                        .HasColumnName("facebook");

                    b.Property<string>("FirstGivenName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_given_name");

                    b.Property<int?>("FirstLanguage")
                        .HasColumnType("int")
                        .HasColumnName("first_language");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("gender");

                    b.Property<string>("HomeAddressCity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_address_city");

                    b.Property<string>("HomeAddressCountry")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_address_country");

                    b.Property<string>("HomeAddressLineOne")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("home_address_line_one");

                    b.Property<string>("HomeAddressLineTwo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("home_address_line_two");

                    b.Property<string>("HomeAddressState")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_address_state");

                    b.Property<string>("HomeAddressZip")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("home_address_zip");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("home_phone");

                    b.Property<bool?>("HomeroomTeacher")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("homeroom_teacher");

                    b.Property<string>("Instagram")
                        .HasColumnType("longtext")
                        .HasColumnName("instagram");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_title");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("date")
                        .HasColumnName("joining_date");

                    b.Property<string>("LastFamilyName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_family_name");

                    b.Property<string>("Linkedin")
                        .HasColumnType("longtext")
                        .HasColumnName("linkedin");

                    b.Property<string>("LoginEmailAddress")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("login_email_address");

                    b.Property<string>("MailingAddressCity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mailing_address_city");

                    b.Property<string>("MailingAddressCountry")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mailing_address_country");

                    b.Property<string>("MailingAddressLineOne")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mailing_address_line_one");

                    b.Property<string>("MailingAddressLineTwo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mailing_address_line_two");

                    b.Property<bool?>("MailingAddressSameToHome")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mailing_address_same_to_home");

                    b.Property<string>("MailingAddressState")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mailing_address_state");

                    b.Property<string>("MailingAddressZip")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("mailing_address_zip");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("marital_status");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("mobile_phone");

                    b.Property<int?>("Nationality")
                        .HasColumnType("int")
                        .HasColumnName("nationality");

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("office_phone");

                    b.Property<string>("OtherGovtIssuedNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("other_govt_issued_number");

                    b.Property<string>("OtherGradeLevelTaught")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("other_grade_level_taught");

                    b.Property<string>("OtherSubjectTaught")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("other_subject_taught");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("personal_email");

                    b.Property<bool?>("PhysicalDisability")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("physical_disability");

                    b.Property<bool?>("PortalAccess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("portal_access");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("preferred_name");

                    b.Property<string>("PreviousName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("previous_name");

                    b.Property<string>("PrimaryGradeLevelTaught")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("primary_grade_level_taught");

                    b.Property<string>("PrimarySubjectTaught")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("primary_subject_taught");

                    b.Property<string>("Profile")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("profile");

                    b.Property<string>("Race")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("race");

                    b.Property<string>("RelationshipToStaff")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("relationship_to_staff");

                    b.Property<string>("Salutation")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("salutation");

                    b.Property<string>("SchoolEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("school_email");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int?>("SecondLanguage")
                        .HasColumnType("int")
                        .HasColumnName("second_language");

                    b.Property<string>("SocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("social_security_number");

                    b.Property<Guid>("StaffGuid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("staff_guid")
                        .HasDefaultValueSql("(N'00000000-0000-0000-0000-000000000000')")
                        .IsFixedLength();

                    b.Property<string>("StaffInternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("staff_internal_id");

                    b.Property<byte[]>("StaffPhoto")
                        .HasColumnType("longblob")
                        .HasColumnName("staff_photo");

                    b.Property<string>("StateId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state_id");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("suffix");

                    b.Property<int?>("ThirdLanguage")
                        .HasColumnType("int")
                        .HasColumnName("third_language");

                    b.Property<string>("Twitter")
                        .HasColumnType("longtext")
                        .HasColumnName("twitter");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("Youtube")
                        .HasColumnType("longtext")
                        .HasColumnName("youtube");

                    b.HasKey("TenantId", "StaffId")
                        .HasName("PK_staff_master_tenant_id");

                    b.HasIndex(new[] { "FirstLanguage" }, "IX_staff_master_first_language");

                    b.HasIndex(new[] { "SecondLanguage" }, "IX_staff_master_second_language");

                    b.HasIndex(new[] { "TenantId", "SchoolId" }, "IX_staff_master_tenant_id_school_id");

                    b.HasIndex(new[] { "ThirdLanguage" }, "IX_staff_master_third_language");

                    b.ToTable("staff_master", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StaffScheduleView", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("ConflictComment")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("conflict_comment");

                    b.Property<string>("CourseSectionName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("course_section_name");

                    b.Property<string>("CourseShortName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_short_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool>("Scheduled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("scheduled");

                    b.Property<string>("StaffInternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("staff_internal_id");

                    b.Property<string>("StaffName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("staff_name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StaffId", "CourseId", "CourseSectionId")
                        .HasName("PK_staff_schedule_view_tenant_id");

                    b.ToTable("staff_schedule_view", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StaffSchoolInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int?>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<string>("Profile")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("profile");

                    b.Property<int?>("SchoolAttachedId")
                        .HasColumnType("int")
                        .HasColumnName("school_attached_id");

                    b.Property<string>("SchoolAttachedName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("school_attached_name");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid?>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "SchoolId", "MembershipId");

                    b.HasIndex(new[] { "TenantId", "StaffId" }, "IX_staff_school_info_tenant_id_staff_id");

                    b.ToTable("staff_school_info", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("countryid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_state_countryid");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentAttendance", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("date")
                        .HasColumnName("attendance_date");

                    b.Property<int>("BlockId")
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<int>("AttendanceCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("attendance_category_id");

                    b.Property<int>("AttendanceCode")
                        .HasColumnType("int")
                        .HasColumnName("attendance_code");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<long>("StudentAttendanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("student_attendance_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "StaffId", "CourseId", "CourseSectionId", "AttendanceDate", "BlockId", "PeriodId")
                        .HasName("PK_student_attendance_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentId" }, "IX_student_attendance");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "CourseSectionId" }, "IX_student_attendance_1");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StaffId" }, "IX_student_attendance_2");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentId", "AttendanceDate" }, "IX_student_attendance_3");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "AttendanceCategoryId", "AttendanceCode" }, "IX_student_attendance_tenant_id_school_id_attendan");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "BlockId", "PeriodId" }, "IX_student_attendance_tenant_id_school_id_block_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "MembershipId" }, "IX_student_attendance_tenant_id_school_id_membersh");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StaffId", "CourseId", "CourseSectionId" }, "IX_student_attendance_tenant_id_school_id_staff_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentId", "CourseId", "CourseSectionId" }, "IX_student_attendance_tenant_id_school_id_student_");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentId", "StudentAttendanceId" }, "student_attendance$AK_student_attendance_tenant_id")
                        .IsUnique();

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentId", "StudentAttendanceId" }, "student_attendance$student_attendance_id_idx")
                        .IsUnique();

                    b.ToTable("student_attendance", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentAttendanceComments", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<long>("StudentAttendanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("student_attendance_id");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CommentTimestamp")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("comment_timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "StudentAttendanceId", "CommentId")
                        .HasName("PK_student_attendance_comments_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "MembershipId" }, "IX_student_attendance_comments_tenant_id_school_id");

                    b.ToTable("student_attendance_comments", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentAttendanceHistory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<long>("AttendanceHistoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("attendance_history_id");

                    b.Property<int>("AttendanceCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("attendance_category_id");

                    b.Property<int>("AttendanceCode")
                        .HasColumnType("int")
                        .HasColumnName("attendance_code");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("date")
                        .HasColumnName("attendance_date");

                    b.Property<int>("BlockId")
                        .HasColumnType("int")
                        .HasColumnName("block_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<DateTime>("ModificationTimestamp")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("modification_timestamp");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "AttendanceHistoryId")
                        .HasName("PK_student_attendance_history_tenant_id");

                    b.ToTable("student_attendance_history", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentComments", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "CommentId")
                        .HasName("PK_student_comments_tenant_id");

                    b.ToTable("student_comments", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentCoursesectionSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("AlternateId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("alternate_id");

                    b.Property<int?>("CalendarId")
                        .HasColumnType("int")
                        .HasColumnName("calendar_id");

                    b.Property<string>("CourseSectionName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("course_section_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("EffectiveDropDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("effective_drop_date");

                    b.Property<DateTime?>("EffectiveStartDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("effective_start_date");

                    b.Property<string>("FirstGivenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_given_name");

                    b.Property<int?>("FirstLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("first_language_id");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<int?>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<bool?>("IsDropped")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_dropped");

                    b.Property<string>("LastFamilyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_family_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("middle_name");

                    b.Property<Guid>("StudentGuid")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("student_guid")
                        .IsFixedLength();

                    b.Property<string>("StudentInternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_internal_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "CourseId", "CourseSectionId")
                        .HasName("PK_student_coursesection_schedule_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentId" }, "IX_student_coursesection_schedule");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "CourseId", "CourseSectionId" }, "IX_student_coursesection_schedule_1");

                    b.ToTable("student_coursesection_schedule", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentDailyAttendance", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("date")
                        .HasColumnName("attendance_date");

                    b.Property<string>("AttendanceCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("attendance_code");

                    b.Property<string>("AttendanceComment")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("attendance_comment");

                    b.Property<int?>("AttendanceMinutes")
                        .HasColumnType("int")
                        .HasColumnName("attendance_minutes");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<int?>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("section_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "AttendanceDate")
                        .HasName("PK_student_daily_attendance_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "GradeScaleId" }, "IX_student_daily_attendance_tenant_id_school_id_gr");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "SectionId" }, "IX_student_daily_attendance_tenant_id_school_id_se");

                    b.ToTable("student_daily_attendance", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentDocuments", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("document_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<byte[]>("FileUploaded")
                        .HasColumnType("longblob")
                        .HasColumnName("file_uploaded");

                    b.Property<string>("Filename")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("filename");

                    b.Property<string>("Filetype")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("filetype");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("uploaded_by");

                    b.Property<DateTime?>("UploadedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("uploaded_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "DocumentId")
                        .HasName("PK_student_documents_tenant_id");

                    b.ToTable("student_documents", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentEffortGradeDetail", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<long>("StudentEffortGradeSrlno")
                        .HasColumnType("bigint")
                        .HasColumnName("student_effort_grade_srlno");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("EffortCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("effort_category_id");

                    b.Property<int?>("EffortGradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("effort_grade_scale_id");

                    b.Property<int?>("EffortItemId")
                        .HasColumnType("int")
                        .HasColumnName("effort_item_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "StudentEffortGradeSrlno", "Id")
                        .HasName("PK_student_effort_grade_detail_tenant_id");

                    b.ToTable("student_effort_grade_detail", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentEffortGradeMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<long>("StudentEffortGradeSrlno")
                        .HasColumnType("bigint")
                        .HasColumnName("student_effort_grade_srlno");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int?>("CalendarId")
                        .HasColumnType("int")
                        .HasColumnName("calendar_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsCustomMarkingPeriod")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_custom_marking_period");

                    b.Property<bool?>("IsExamGrade")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_exam_grade");

                    b.Property<int?>("PrgrsprdMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("prgrsprd_marking_period_id");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("smstr_marking_period_id");

                    b.Property<string>("TeacherComment")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("teacher_comment");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("YrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("yr_marking_period_id");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "StudentEffortGradeSrlno")
                        .HasName("PK_student_effort_grade_master_tenant_id");

                    b.HasIndex("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "SmstrMarkingPeriodId" }, "IX_std_effort_gd_master_tid_school_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "QtrMarkingPeriodId" }, "IX_std_effort_grade_master_tid_school_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "YrMarkingPeriodId" }, "IX_std_effort_grade_mster_tid_school_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "CalendarId" }, "IX_student_effort_grade_master_tenant_id_school_id");

                    b.ToTable("student_effort_grade_master", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentEnrollment", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int")
                        .HasColumnName("enrollment_id");

                    b.Property<int?>("CalenderId")
                        .HasColumnType("int")
                        .HasColumnName("calender_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("EnrollmentCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("enrollment_code");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("date")
                        .HasColumnName("enrollment_date");

                    b.Property<string>("ExitCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("exit_code");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("date")
                        .HasColumnName("exit_date");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<string>("GradeLevelTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("grade_level_title");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("RollingOption")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rolling_option");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("school_name");

                    b.Property<string>("SchoolTransferred")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("school_transferred");

                    b.Property<Guid>("StudentGuid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("student_guid")
                        .HasDefaultValueSql("(N'00000000-0000-0000-0000-000000000000')")
                        .IsFixedLength();

                    b.Property<string>("TransferredGrade")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transferred_grade");

                    b.Property<int?>("TransferredSchoolId")
                        .HasColumnType("int")
                        .HasColumnName("transferred_school_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "EnrollmentId")
                        .HasName("PK_student_enrollment_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "GradeId" }, "IX_student_enrollment_tenant_id_school_id_grade_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentGuid" }, "IX_student_enrollment_tenant_id_school_id_student_");

                    b.ToTable("student_enrollment", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentEnrollmentCode", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("EnrollmentCode")
                        .HasColumnType("int")
                        .HasColumnName("enrollment_code");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("short_name")
                        .IsFixedLength();

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "EnrollmentCode")
                        .HasName("PK_student_enrollment_code_tenant_id");

                    b.ToTable("student_enrollment_code", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentFinalGrade", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<long>("StudentFinalGradeSrlno")
                        .HasColumnType("bigint")
                        .HasColumnName("student_final_grade_srlno");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<bool?>("BasedOnStandardGrade")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("based_on_standard_grade");

                    b.Property<int?>("CalendarId")
                        .HasColumnType("int")
                        .HasColumnName("calendar_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<decimal?>("CreditAttempted")
                        .HasColumnType("decimal(8,3)")
                        .HasColumnName("creditattempted");

                    b.Property<decimal?>("CreditEarned")
                        .HasColumnType("decimal(8,3)")
                        .HasColumnName("creditearned");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<string>("GradeObtained")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)")
                        .HasColumnName("grade_obtained")
                        .IsFixedLength();

                    b.Property<int?>("GradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("grade_scale_id");

                    b.Property<bool?>("IsCustomMarkingPeriod")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_custom_marking_period");

                    b.Property<bool?>("IsExamGrade")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_exam_grade");

                    b.Property<bool?>("IsPercent")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_percent");

                    b.Property<decimal?>("PercentMarks")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("percent_marks");

                    b.Property<int?>("PrgrsprdMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("prgrsprd_marking_period_id");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("smstr_marking_period_id");

                    b.Property<string>("TeacherComment")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("teacher_comment");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("YrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("yr_marking_period_id");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "StudentFinalGradeSrlno")
                        .HasName("PK_student_final_grade_tenant_id");

                    b.HasIndex("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "QtrMarkingPeriodId" }, "IX_student_final_grade_tenant_id_school_id_qtr_mar");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "SmstrMarkingPeriodId" }, "IX_student_final_grade_tenant_id_school_id_smstr_m");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "YrMarkingPeriodId" }, "IX_student_final_grade_tenant_id_school_id_yr_mark");

                    b.ToTable("student_final_grade", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentFinalGradeComments", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<long>("StudentFinalGradeSrlno")
                        .HasColumnType("bigint")
                        .HasColumnName("student_final_grade_srlno");

                    b.Property<int>("CourseCommentId")
                        .HasColumnType("int")
                        .HasColumnName("course_comment_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "StudentFinalGradeSrlno", "CourseCommentId")
                        .HasName("PK_student_final_grade_comments_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "CourseCommentId" }, "IX_student_final_grade_comments_tenant_id_school_i");

                    b.ToTable("student_final_grade_comments", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentFinalGradeStandard", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<int?>("CalendarId")
                        .HasColumnType("int")
                        .HasColumnName("calendar_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("GradeObtained")
                        .HasColumnType("int")
                        .HasColumnName("grade_obtained");

                    b.Property<int?>("PrgrsprdMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("prgrsprd_marking_period_id");

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("qtr_marking_period_id");

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("smstr_marking_period_id");

                    b.Property<int?>("StandardGradeScaleId")
                        .HasColumnType("int")
                        .HasColumnName("standard_grade_scale_id");

                    b.Property<long>("StudentFinalGradeSrlno")
                        .HasColumnType("bigint")
                        .HasColumnName("student_final_grade_srlno");

                    b.Property<string>("TeacherComment")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("teacher_comment");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("YrMarkingPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("yr_marking_period_id");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "Id")
                        .HasName("PK_student_final_grade_standard_tenant_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentId", "StudentFinalGradeSrlno" }, "IX_student_final_grade_standard_tenant_id_school_i");

                    b.ToTable("student_final_grade_standard", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentListView", b =>
                {
                    b.Property<string>("AdmissionNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("admission_number");

                    b.Property<string>("AlternateId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("alternate_id");

                    b.Property<string>("BusNo")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("bus_no");

                    b.Property<int?>("CalenderId")
                        .HasColumnType("int")
                        .HasColumnName("calender_id");

                    b.Property<int?>("CountryOfBirth")
                        .HasColumnType("int")
                        .HasColumnName("country_of_birth");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("DistrictId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("district_id");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<bool?>("EconomicDisadvantage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("economic_disadvantage");

                    b.Property<bool?>("Eligibility504")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("eligibility_504");

                    b.Property<string>("EnrollmentCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("enrollment_code");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("date")
                        .HasColumnName("enrollment_date");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int")
                        .HasColumnName("enrollment_id");

                    b.Property<string>("EnrollmentType")
                        .HasMaxLength(8)
                        .HasColumnType("char(8)")
                        .HasColumnName("enrollment_type")
                        .IsFixedLength();

                    b.Property<DateTime?>("EstimatedGradDate")
                        .HasColumnType("date")
                        .HasColumnName("estimated_grad_date");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ethnicity");

                    b.Property<string>("Facebook")
                        .HasColumnType("longtext")
                        .HasColumnName("facebook");

                    b.Property<string>("FirstGivenName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_given_name");

                    b.Property<int?>("FirstLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("first_language_id");

                    b.Property<bool?>("FreeLunchEligibility")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("free_lunch_eligibility");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("gender");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<string>("GradeLevelTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("grade_level_title");

                    b.Property<string>("HomeAddressCity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_address_city");

                    b.Property<string>("HomeAddressCountry")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_address_country");

                    b.Property<string>("HomeAddressLineOne")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("home_address_line_one");

                    b.Property<string>("HomeAddressLineTwo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("home_address_line_two");

                    b.Property<string>("HomeAddressState")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_address_state");

                    b.Property<string>("HomeAddressZip")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("home_address_zip");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("home_phone");

                    b.Property<string>("Instagram")
                        .HasColumnType("longtext")
                        .HasColumnName("instagram");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("LastFamilyName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_family_name");

                    b.Property<bool?>("LepIndicator")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lep_indicator");

                    b.Property<string>("Linkedin")
                        .HasColumnType("longtext")
                        .HasColumnName("linkedin");

                    b.Property<string>("MailingAddressCity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mailing_address_city");

                    b.Property<string>("MailingAddressCountry")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mailing_address_country");

                    b.Property<string>("MailingAddressLineOne")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mailing_address_line_one");

                    b.Property<string>("MailingAddressLineTwo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mailing_address_line_two");

                    b.Property<bool?>("MailingAddressSameToHome")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mailing_address_same_to_home");

                    b.Property<string>("MailingAddressState")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mailing_address_state");

                    b.Property<string>("MailingAddressZip")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("mailing_address_zip");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("marital_status");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("mobile_phone");

                    b.Property<int?>("Nationality")
                        .HasColumnType("int")
                        .HasColumnName("nationality");

                    b.Property<string>("OtherGovtIssuedNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("other_govt_issued_number");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("personal_email");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("preferred_name");

                    b.Property<string>("PreviousName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("previous_name");

                    b.Property<string>("Race")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("race");

                    b.Property<string>("RollNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("roll_number");

                    b.Property<string>("RollingOption")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rolling_option");

                    b.Property<string>("Salutation")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("salutation");

                    b.Property<bool?>("SchoolBusDropOff")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("school_bus_drop_off");

                    b.Property<bool?>("SchoolBusPickUp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("school_bus_pick_up");

                    b.Property<string>("SchoolEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("school_email");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("school_name");

                    b.Property<int?>("SecondLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("second_language_id");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("section_id");

                    b.Property<string>("SectionName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("section_name");

                    b.Property<string>("SocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("social_security_number");

                    b.Property<bool?>("SpecialEducationIndicator")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("special_education_indicator");

                    b.Property<string>("StateId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state_id");

                    b.Property<Guid>("StudentGuid")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("student_guid")
                        .IsFixedLength();

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("StudentInternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_internal_id");

                    b.Property<string>("StudentPortalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_portal_id");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("suffix");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int?>("ThirdLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("third_language_id");

                    b.Property<string>("Twitter")
                        .HasColumnType("longtext")
                        .HasColumnName("twitter");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("Youtube")
                        .HasColumnType("longtext")
                        .HasColumnName("youtube");

                    b.ToView("student_list_view");
                });

            modelBuilder.Entity("opensis.data.Models.StudentMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("AdmissionNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("admission_number");

                    b.Property<string>("AlertDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("alert_description");

                    b.Property<string>("AlternateId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("alternate_id");

                    b.Property<string>("Associationship")
                        .HasColumnType("longtext")
                        .HasColumnName("associationship");

                    b.Property<string>("BusNo")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("bus_no");

                    b.Property<int?>("CountryOfBirth")
                        .HasColumnType("int")
                        .HasColumnName("country_of_birth");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("CriticalAlert")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("critical_alert");

                    b.Property<string>("Dentist")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("dentist");

                    b.Property<string>("DentistPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dentist_phone");

                    b.Property<string>("DistrictId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("district_id");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<bool?>("EconomicDisadvantage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("economic_disadvantage");

                    b.Property<bool?>("Eligibility504")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("eligibility_504");

                    b.Property<string>("EnrollmentType")
                        .HasMaxLength(8)
                        .HasColumnType("char(8)")
                        .HasColumnName("enrollment_type")
                        .IsFixedLength();

                    b.Property<DateTime?>("EstimatedGradDate")
                        .HasColumnType("date")
                        .HasColumnName("estimated_grad_date");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ethnicity");

                    b.Property<string>("Facebook")
                        .HasColumnType("longtext")
                        .HasColumnName("facebook");

                    b.Property<string>("FirstGivenName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_given_name");

                    b.Property<int?>("FirstLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("first_language_id");

                    b.Property<bool?>("FreeLunchEligibility")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("free_lunch_eligibility");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("gender");

                    b.Property<string>("HomeAddressCity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_address_city");

                    b.Property<string>("HomeAddressCountry")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_address_country");

                    b.Property<string>("HomeAddressLineOne")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("home_address_line_one");

                    b.Property<string>("HomeAddressLineTwo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("home_address_line_two");

                    b.Property<string>("HomeAddressState")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_address_state");

                    b.Property<string>("HomeAddressZip")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("home_address_zip");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("home_phone");

                    b.Property<string>("Instagram")
                        .HasColumnType("longtext")
                        .HasColumnName("instagram");

                    b.Property<string>("InsuranceCompany")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("insurance_company");

                    b.Property<string>("InsuranceCompanyPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("insurance_company_phone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("LastFamilyName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_family_name");

                    b.Property<bool?>("LepIndicator")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lep_indicator");

                    b.Property<string>("Linkedin")
                        .HasColumnType("longtext")
                        .HasColumnName("linkedin");

                    b.Property<string>("MailingAddressCity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mailing_address_city");

                    b.Property<string>("MailingAddressCountry")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mailing_address_country");

                    b.Property<string>("MailingAddressLineOne")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mailing_address_line_one");

                    b.Property<string>("MailingAddressLineTwo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mailing_address_line_two");

                    b.Property<bool?>("MailingAddressSameToHome")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mailing_address_same_to_home");

                    b.Property<string>("MailingAddressState")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mailing_address_state");

                    b.Property<string>("MailingAddressZip")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("mailing_address_zip");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("marital_status");

                    b.Property<string>("MedicalFacility")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("medical_facility");

                    b.Property<string>("MedicalFacilityPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("medical_facility_phone");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("mobile_phone");

                    b.Property<int?>("Nationality")
                        .HasColumnType("int")
                        .HasColumnName("nationality");

                    b.Property<string>("OtherGovtIssuedNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("other_govt_issued_number");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("personal_email");

                    b.Property<string>("PolicyHolder")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("policy_holder");

                    b.Property<string>("PolicyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy_number");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("preferred_name");

                    b.Property<string>("PreviousName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("previous_name");

                    b.Property<string>("PrimaryCarePhysician")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("primary_care_physician");

                    b.Property<string>("PrimaryCarePhysicianPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("primary_care_physician_phone");

                    b.Property<string>("Race")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("race");

                    b.Property<string>("RollNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("roll_number");

                    b.Property<string>("Salutation")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("salutation");

                    b.Property<bool?>("SchoolBusDropOff")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("school_bus_drop_off");

                    b.Property<bool?>("SchoolBusPickUp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("school_bus_pick_up");

                    b.Property<string>("SchoolEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("school_email");

                    b.Property<int?>("SecondLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("second_language_id");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("section_id");

                    b.Property<string>("SocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("social_security_number");

                    b.Property<bool?>("SpecialEducationIndicator")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("special_education_indicator");

                    b.Property<string>("StateId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state_id");

                    b.Property<Guid>("StudentGuid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("student_guid")
                        .HasDefaultValueSql("(N'00000000-0000-0000-0000-000000000000')")
                        .IsFixedLength();

                    b.Property<string>("StudentInternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_internal_id");

                    b.Property<byte[]>("StudentPhoto")
                        .HasColumnType("longblob")
                        .HasColumnName("student_photo");

                    b.Property<string>("StudentPortalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_portal_id");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("suffix");

                    b.Property<int?>("ThirdLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("third_language_id");

                    b.Property<string>("Twitter")
                        .HasColumnType("longtext")
                        .HasColumnName("twitter");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("Vision")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("vision");

                    b.Property<string>("VisionPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("vision_phone");

                    b.Property<string>("Youtube")
                        .HasColumnType("longtext")
                        .HasColumnName("youtube");

                    b.HasKey("TenantId", "SchoolId", "StudentId")
                        .HasName("PK_student_master_tenant_id");

                    b.HasIndex(new[] { "FirstLanguageId" }, "IX_student_master_first_language_id");

                    b.HasIndex(new[] { "SecondLanguageId" }, "IX_student_master_second_language_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "SectionId" }, "IX_student_master_tenant_id_school_id_section_id");

                    b.HasIndex(new[] { "ThirdLanguageId" }, "IX_student_master_third_language_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentGuid" }, "student_master$AK_student_master_tenant_id_school_")
                        .IsUnique();

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentGuid" }, "student_master$IX_student_master")
                        .IsUnique();

                    b.ToTable("student_master", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentMedicalAlert", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AlertDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("alert_description");

                    b.Property<string>("AlertType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("alert_type");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "Id")
                        .HasName("PK_student_medical_alert_tenant_id");

                    b.ToTable("student_medical_alert", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentMedicalImmunization", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("ImmunizationDate")
                        .HasColumnType("date")
                        .HasColumnName("immunization_date");

                    b.Property<string>("ImmunizationType")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("immunization_type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "Id")
                        .HasName("PK_student_medical_immunization_tenant_id");

                    b.ToTable("student_medical_immunization", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentMedicalNote", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("MedicalNote")
                        .HasColumnType("longtext")
                        .HasColumnName("medical_note");

                    b.Property<DateTime?>("NoteDate")
                        .HasColumnType("date")
                        .HasColumnName("note_date");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "Id")
                        .HasName("PK_student_medical_note_tenant_id");

                    b.ToTable("student_medical_note", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentMedicalNurseVisit", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("NurseVisitDate")
                        .HasColumnType("date")
                        .HasColumnName("nurse_visit_date");

                    b.Property<string>("Reason")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("reason");

                    b.Property<string>("Result")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("result");

                    b.Property<DateTime?>("TimeIn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("time_in");

                    b.Property<DateTime?>("TimeOut")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("time_out");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "Id")
                        .HasName("PK_student_medical_nurse_visit_tenant_id");

                    b.ToTable("student_medical_nurse_visit", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentMedicalProvider", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("DentistName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("dentist_name");

                    b.Property<string>("DentistPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dentist_phone");

                    b.Property<string>("InsuranceCompany")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("insurance_company");

                    b.Property<string>("InsuranceCompanyPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("insurance_company_phone");

                    b.Property<string>("PolicyHolderName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("policy_holder_name");

                    b.Property<string>("PolicyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy_number");

                    b.Property<string>("PreferredMedicalFacility")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("preferred_medical_facility");

                    b.Property<string>("PreferredMedicalFacilityPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("preferred_medical_facility_phone");

                    b.Property<string>("PrimaryCarePhysician")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("primary_care_physician");

                    b.Property<string>("PrimaryCarePhysicianPhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("primary_care_physician_phone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("VisionName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("vision_name");

                    b.Property<string>("VisionProviderPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("vision_provider_phone");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "Id")
                        .HasName("PK_student_medical_provider_tenant_id");

                    b.ToTable("student_medical_provider", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentMissingAttendance", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("MissingAttendanceId")
                        .HasColumnType("int")
                        .HasColumnName("missing_attendance_id");

                    b.Property<int?>("AttendanceCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("attendance_category_id");

                    b.Property<int?>("AttendanceCode")
                        .HasColumnType("int")
                        .HasColumnName("attendance_code");

                    b.Property<int?>("BlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("block_id")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_id")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CourseSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_section_id")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("MissingAttendanceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("missing_attendance_date")
                        .HasDefaultValueSql("('0001-01-01')");

                    b.Property<int?>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("period_id")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "MissingAttendanceId")
                        .HasName("PK_student_missing_attendance_1");

                    b.HasIndex("TenantId", "StaffId");

                    b.HasIndex("TenantId", "SchoolId", "BlockId", "PeriodId");

                    b.HasIndex("TenantId", "SchoolId", "StaffId", "CourseId", "CourseSectionId");

                    b.ToTable("student_missing_attendance", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentReportCardDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("comments");

                    b.Property<string>("CourseName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("course_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<decimal?>("Gpa")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("gpa");

                    b.Property<string>("Grade")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("grade");

                    b.Property<string>("GradeTitle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("grade_title");

                    b.Property<string>("MarkingPeriodTitle")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("marking_period_title")
                        .IsFixedLength();

                    b.Property<string>("OverallTeacherComments")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("overall_teacher_comments");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("SchoolYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("school_year");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("Teacher")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("teacher");

                    b.Property<string>("TeacherComments")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("teacher_comments");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentId", "SchoolYear", "MarkingPeriodTitle" }, "IX_student_report_card_detail_tenant_id_school_id_");

                    b.ToTable("student_report_card_detail", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentReportCardMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("SchoolYear")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("school_year");

                    b.Property<string>("MarkingPeriodTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("marking_period_title")
                        .HasDefaultValueSql("(N'')")
                        .IsFixedLength();

                    b.Property<int?>("Absences")
                        .HasColumnType("int")
                        .HasColumnName("absences");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("ExcusedAbsences")
                        .HasColumnType("int")
                        .HasColumnName("excused_absences");

                    b.Property<string>("GradeTitle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("grade_title");

                    b.Property<DateTime?>("ReportGenerationDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("report_generation_date");

                    b.Property<string>("StudentInternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_internal_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("YodAbsence")
                        .HasColumnType("int")
                        .HasColumnName("yod_absence");

                    b.Property<string>("YodAttendance")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("yod_attendance");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "SchoolYear", "MarkingPeriodTitle")
                        .HasName("PK_student_report_card_master_tenant_id");

                    b.ToTable("student_report_card_master", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentScheduleView", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("course_section_id");

                    b.Property<string>("ConflictComment")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("conflict_comment");

                    b.Property<string>("CourseSectionName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("course_section_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<bool>("Scheduled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("scheduled");

                    b.Property<string>("StudentInternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_internal_id");

                    b.Property<string>("StudentName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("student_name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "CourseId", "CourseSectionId")
                        .HasName("PK_student_schedule_view_tenant_id");

                    b.ToTable("student_schedule_view", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentTranscriptDetail", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("CourseCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_code");

                    b.Property<string>("CourseName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("course_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<decimal?>("CreditEarned")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("credit_earned");

                    b.Property<decimal?>("CreditHours")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("credit_hours");

                    b.Property<decimal?>("GpValue")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("gp_value");

                    b.Property<string>("Grade")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("grade")
                        .IsFixedLength();

                    b.Property<string>("GradeTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("grade_title")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("Id", "TenantId", "SchoolId", "StudentId")
                        .HasName("PK_student_transcript_detail_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "StudentId", "GradeTitle" }, "IX_student_transcript_detail_tenant_id_school_id_s");

                    b.ToTable("student_transcript_detail", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.StudentTranscriptMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("GradeTitle")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("grade_title");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<decimal?>("CreditAttempted")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("credit_attempted");

                    b.Property<decimal?>("CumulativeGpa")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("cumulative_gpa");

                    b.Property<DateTime?>("GeneratedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("generated_on");

                    b.Property<decimal?>("Gpa")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("gpa");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("school_name");

                    b.Property<string>("SchoolYear")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("school_year");

                    b.Property<string>("StudentInternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_internal_id");

                    b.Property<decimal?>("TotalCreditAttempted")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("total_credit_attempted");

                    b.Property<decimal?>("TotalCreditEarned")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("total_credit_earned");

                    b.Property<decimal?>("TotalGradeCreditEarned")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("total_grade_credit_earned");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "GradeTitle")
                        .HasName("PK_student_transcript_master_tenant_id");

                    b.ToTable("student_transcript_master", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.Subject", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("academic_year");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<int?>("RolloverId")
                        .HasColumnType("int")
                        .HasColumnName("rollover_id");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subject_name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.HasKey("TenantId", "SchoolId", "SubjectId")
                        .HasName("PK_subject_tenant_id");

                    b.ToTable("subject", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.UserAccessLog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<DateTime>("LoginAttemptDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("login_attempt_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Emailaddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emailaddress");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ipaddress");

                    b.Property<int?>("LoginFailureCount")
                        .HasColumnType("int")
                        .HasColumnName("login_failure_count");

                    b.Property<bool?>("LoginStatus")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("login_status");

                    b.Property<int?>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<string>("Profile")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("profile");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("user_name");

                    b.HasKey("Id", "TenantId", "SchoolId", "LoginAttemptDate")
                        .HasName("PK_user_access_log_id");

                    b.ToTable("user_access_log", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.UserMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emailaddress");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsTenantadmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_tenantadmin");

                    b.Property<int>("LangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lang_id")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("LastUsedSchoolId")
                        .HasColumnType("int")
                        .HasColumnName("last_used_school_id");

                    b.Property<DateTime?>("LoginAttemptDate")
                        .HasColumnType("date")
                        .HasColumnName("login_attempt_date");

                    b.Property<int?>("LoginFailureCount")
                        .HasColumnType("int")
                        .HasColumnName("login_failure_count");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("passwordhash");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TenantId", "SchoolId", "EmailAddress")
                        .HasName("PK_user_master_tenant_id");

                    b.HasIndex(new[] { "LangId" }, "IX_user_master_lang_id");

                    b.HasIndex(new[] { "TenantId", "SchoolId", "MembershipId" }, "IX_user_master_tenant_id_school_id_membership_id");

                    b.ToTable("user_master", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.UserSecretQuestions", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id")
                        .IsFixedLength();

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("school_id");

                    b.Property<string>("Emailaddress")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emailaddress");

                    b.Property<string>("Book")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("book");

                    b.Property<string>("Cartoon")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cartoon");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_on");

                    b.Property<string>("Hero")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("hero");

                    b.Property<string>("Movie")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("movie");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("updated_on");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TenantId", "SchoolId", "Emailaddress")
                        .HasName("PK_user_secret_questions_tenant_id");

                    b.ToTable("user_secret_questions", (string)null);
                });

            modelBuilder.Entity("opensis.data.Models.ApiControllerKeyMapping", b =>
                {
                    b.HasOne("opensis.data.Models.ApiControllerList", "ApiControllerList")
                        .WithMany("ApiControllerKeyMapping")
                        .HasForeignKey("TenantId", "ControllerId")
                        .IsRequired()
                        .HasConstraintName("api_controller_key_mapping$FK_api_controller_list");

                    b.HasOne("opensis.data.Models.ApiKeysMaster", "ApiKeysMaster")
                        .WithMany("ApiControllerKeyMapping")
                        .HasForeignKey("TenantId", "SchoolId", "KeyId")
                        .IsRequired()
                        .HasConstraintName("api_controller_key_mapping$FK_api_keys_master");

                    b.Navigation("ApiControllerList");

                    b.Navigation("ApiKeysMaster");
                });

            modelBuilder.Entity("opensis.data.Models.Assignment", b =>
                {
                    b.HasOne("opensis.data.Models.StaffMaster", "StaffMaster")
                        .WithMany("Assignment")
                        .HasForeignKey("TenantId", "StaffId")
                        .HasConstraintName("assignment$FK_assignment_staff_master");

                    b.HasOne("opensis.data.Models.AssignmentType", "AssignmentType")
                        .WithMany("Assignment")
                        .HasForeignKey("TenantId", "SchoolId", "AssignmentTypeId")
                        .IsRequired()
                        .HasConstraintName("assignment$FK_assignment_assignment_type");

                    b.Navigation("AssignmentType");

                    b.Navigation("StaffMaster");
                });

            modelBuilder.Entity("opensis.data.Models.AssignmentType", b =>
                {
                    b.HasOne("opensis.data.Models.ProgressPeriods", "ProgressPeriod")
                        .WithMany("AssignmentTypes")
                        .HasForeignKey("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId")
                        .HasConstraintName("FK_assignment_type_progress_periods");

                    b.HasOne("opensis.data.Models.Quarters", "Quarter")
                        .WithMany("AssignmentTypes")
                        .HasForeignKey("TenantId", "SchoolId", "QtrMarkingPeriodId")
                        .HasConstraintName("FK_assignment_type_quarters");

                    b.HasOne("opensis.data.Models.Semesters", "Semester")
                        .WithMany("AssignmentTypes")
                        .HasForeignKey("TenantId", "SchoolId", "SmstrMarkingPeriodId")
                        .HasConstraintName("FK_assignment_type_semesters");

                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYear")
                        .WithMany("AssignmentTypes")
                        .HasForeignKey("TenantId", "SchoolId", "YrMarkingPeriodId")
                        .HasConstraintName("FK_assignment_type_school_years");

                    b.Navigation("ProgressPeriod");

                    b.Navigation("Quarter");

                    b.Navigation("SchoolYear");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("opensis.data.Models.AttendanceCode", b =>
                {
                    b.HasOne("opensis.data.Models.AttendanceCodeCategories", "AttendanceCodeCategories")
                        .WithMany("AttendanceCode")
                        .HasForeignKey("TenantId", "SchoolId", "AttendanceCategoryId")
                        .IsRequired()
                        .HasConstraintName("attendance_code$FK_categories");

                    b.Navigation("AttendanceCodeCategories");
                });

            modelBuilder.Entity("opensis.data.Models.AttendanceCodeCategories", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("AttendanceCodeCategories")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("attendance_code_categories$FK_school");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.Block", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Block")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("block$FK_block_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.BlockPeriod", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("BlockPeriod")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("block_period$FK_block_period_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.City", b =>
                {
                    b.HasOne("opensis.data.Models.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("city$FK_city_state");

                    b.Navigation("State");
                });

            modelBuilder.Entity("opensis.data.Models.CourseBlockSchedule", b =>
                {
                    b.HasOne("opensis.data.Models.Block", "Block")
                        .WithMany("CourseBlockSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId")
                        .HasConstraintName("course_block_schedule$FK_block");

                    b.HasOne("opensis.data.Models.Rooms", "Rooms")
                        .WithMany("CourseBlockSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "RoomId")
                        .HasConstraintName("course_block_schedule$FK_rooms");

                    b.HasOne("opensis.data.Models.BlockPeriod", "BlockPeriod")
                        .WithMany("CourseBlockSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .HasConstraintName("course_block_schedule$FK_periods");

                    b.Navigation("Block");

                    b.Navigation("BlockPeriod");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("opensis.data.Models.CourseCalendarSchedule", b =>
                {
                    b.HasOne("opensis.data.Models.Rooms", "Rooms")
                        .WithMany("CourseCalendarSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "RoomId")
                        .HasConstraintName("course_calendar_schedule$FK_rooms");

                    b.HasOne("opensis.data.Models.BlockPeriod", "BlockPeriod")
                        .WithMany("CourseCalendarSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .HasConstraintName("course_calendar_schedule$FK_periods");

                    b.Navigation("BlockPeriod");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("opensis.data.Models.CourseFixedSchedule", b =>
                {
                    b.HasOne("opensis.data.Models.Rooms", "Rooms")
                        .WithMany("CourseFixedSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "RoomId")
                        .HasConstraintName("course_fixed_schedule$FK_rooms");

                    b.HasOne("opensis.data.Models.BlockPeriod", "BlockPeriod")
                        .WithMany("CourseFixedSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .HasConstraintName("course_fixed_schedule$FK_periods");

                    b.Navigation("BlockPeriod");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("opensis.data.Models.CourseSection", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("course_section$FK_course_section_school_master");

                    b.HasOne("opensis.data.Models.AttendanceCodeCategories", "AttendanceCodeCategories")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "AttendanceCategoryId")
                        .HasConstraintName("course_section$FK_categories");

                    b.HasOne("opensis.data.Models.SchoolCalendars", "SchoolCalendars")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "CalendarId")
                        .HasConstraintName("course_section$FK_course_section_school_calendars");

                    b.HasOne("opensis.data.Models.Course", "Course")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId")
                        .IsRequired()
                        .HasConstraintName("course_section$FK_course_section_course");

                    b.HasOne("opensis.data.Models.GradeScale", "GradeScale")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "GradeScaleId")
                        .HasConstraintName("course_section$FK_course_section_grade_scale");

                    b.HasOne("opensis.data.Models.ProgressPeriods", "ProgressPeriods")
                        .WithMany("CourseSections")
                        .HasForeignKey("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId")
                        .HasConstraintName("FK_course_section_progress_periods");

                    b.HasOne("opensis.data.Models.Quarters", "Quarters")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "QtrMarkingPeriodId")
                        .HasConstraintName("course_section$FK_course_section_quarters");

                    b.HasOne("opensis.data.Models.Semesters", "Semesters")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "SmstrMarkingPeriodId")
                        .HasConstraintName("course_section$FK_course_section_semesters");

                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYears")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "YrMarkingPeriodId")
                        .HasConstraintName("course_section$FK_course_section_school_years");

                    b.Navigation("AttendanceCodeCategories");

                    b.Navigation("Course");

                    b.Navigation("GradeScale");

                    b.Navigation("ProgressPeriods");

                    b.Navigation("Quarters");

                    b.Navigation("SchoolCalendars");

                    b.Navigation("SchoolMaster");

                    b.Navigation("SchoolYears");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("opensis.data.Models.CourseStandard", b =>
                {
                    b.HasOne("opensis.data.Models.Course", "Course")
                        .WithMany("CourseStandard")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId")
                        .IsRequired()
                        .HasConstraintName("course_standard$FK_course");

                    b.HasOne("opensis.data.Models.GradeUsStandard", "GradeUsStandard")
                        .WithMany("CourseStandard")
                        .HasForeignKey("TenantId", "SchoolId", "StandardRefNo", "GradeStandardId")
                        .IsRequired()
                        .HasConstraintName("course_standard$FK_us_standard");

                    b.Navigation("Course");

                    b.Navigation("GradeUsStandard");
                });

            modelBuilder.Entity("opensis.data.Models.CourseVariableSchedule", b =>
                {
                    b.HasOne("opensis.data.Models.Rooms", "Rooms")
                        .WithMany("CourseVariableSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "RoomId")
                        .HasConstraintName("course_variable_schedule$FK_rooms");

                    b.HasOne("opensis.data.Models.BlockPeriod", "BlockPeriod")
                        .WithMany("CourseVariableSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .HasConstraintName("course_variable_schedule$FK_block_periods");

                    b.Navigation("BlockPeriod");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("opensis.data.Models.CustomFields", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("CustomFields")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("custom_fields$FK_custom_fields_school_master");

                    b.HasOne("opensis.data.Models.FieldsCategory", "FieldsCategory")
                        .WithMany("CustomFields")
                        .HasForeignKey("TenantId", "SchoolId", "CategoryId")
                        .IsRequired()
                        .HasConstraintName("custom_fields$FK_custom_fields_fields_category");

                    b.Navigation("FieldsCategory");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.CustomFieldsValue", b =>
                {
                    b.HasOne("opensis.data.Models.CustomFields", "CustomFields")
                        .WithMany("CustomFieldsValue")
                        .HasForeignKey("TenantId", "SchoolId", "CategoryId", "FieldId")
                        .IsRequired()
                        .HasConstraintName("custom_fields_value$FK_fields");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("opensis.data.Models.DpdownValuelist", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("DpdownValuelist")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("dpdown_valuelist$FK_dpdown_valuelist_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.EffortGradeLibraryCategoryItem", b =>
                {
                    b.HasOne("opensis.data.Models.EffortGradeLibraryCategory", "EffortGradeLibraryCategory")
                        .WithMany("EffortGradeLibraryCategoryItem")
                        .HasForeignKey("TenantId", "SchoolId", "EffortCategoryId")
                        .IsRequired()
                        .HasConstraintName("library_category_item$FK_category");

                    b.Navigation("EffortGradeLibraryCategory");
                });

            modelBuilder.Entity("opensis.data.Models.FieldsCategory", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("FieldsCategory")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("fields_category$FK_custom_category_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.Grade", b =>
                {
                    b.HasOne("opensis.data.Models.GradeScale", "GradeScale")
                        .WithMany("Grade")
                        .HasForeignKey("TenantId", "SchoolId", "GradeScaleId")
                        .IsRequired()
                        .HasConstraintName("grade$FK_grade_grade_scale");

                    b.Navigation("GradeScale");
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfiguration", b =>
                {
                    b.HasOne("opensis.data.Models.CourseSection", "CourseSection")
                        .WithMany("GradebookConfiguration")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId", "CourseSectionId")
                        .IsRequired()
                        .HasConstraintName("grd_conf_course_sec");

                    b.Navigation("CourseSection");
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfigurationGradescale", b =>
                {
                    b.HasOne("opensis.data.Models.GradebookConfiguration", "GradebookConfiguration")
                        .WithMany("GradebookConfigurationGradescale")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId")
                        .IsRequired()
                        .HasConstraintName("gradebook_conf_gradescale");

                    b.Navigation("GradebookConfiguration");
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfigurationProgressPeriod", b =>
                {
                    b.HasOne("opensis.data.Models.ProgressPeriods", "ProgressPeriod")
                        .WithMany("GradebookConfigurationProgressPeriods")
                        .HasForeignKey("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId")
                        .HasConstraintName("FK_gradebook_conf_progress_periods");

                    b.HasOne("opensis.data.Models.GradebookConfiguration", "GradebookConfiguration")
                        .WithMany("GradebookConfigurationProgressPeriods")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId")
                        .IsRequired()
                        .HasConstraintName("FK_gb_conf_progPeriod_conf");

                    b.Navigation("GradebookConfiguration");

                    b.Navigation("ProgressPeriod");
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfigurationQuarter", b =>
                {
                    b.HasOne("opensis.data.Models.Quarters", "Quarters")
                        .WithMany("GradebookConfigurationQuarter")
                        .HasForeignKey("TenantId", "SchoolId", "QtrMarkingPeriodId")
                        .HasConstraintName("gradebook_configuration_quarter$FK_quarters");

                    b.HasOne("opensis.data.Models.GradebookConfiguration", "GradebookConfiguration")
                        .WithMany("GradebookConfigurationQuarter")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId")
                        .IsRequired()
                        .HasConstraintName("gradebook_configuration_quarter$FK_configuration");

                    b.Navigation("GradebookConfiguration");

                    b.Navigation("Quarters");
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfigurationSemester", b =>
                {
                    b.HasOne("opensis.data.Models.Quarters", "Quarters")
                        .WithMany("GradebookConfigurationSemester")
                        .HasForeignKey("TenantId", "SchoolId", "QtrMarkingPeriodId")
                        .HasConstraintName("gradebook_configuration_semester$FK_quarters");

                    b.HasOne("opensis.data.Models.Semesters", "Semesters")
                        .WithMany("GradebookConfigurationSemester")
                        .HasForeignKey("TenantId", "SchoolId", "SmstrMarkingPeriodId")
                        .HasConstraintName("gradebook_config_semester$FK_semester");

                    b.HasOne("opensis.data.Models.GradebookConfiguration", "GradebookConfiguration")
                        .WithMany("GradebookConfigurationSemester")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId")
                        .IsRequired()
                        .HasConstraintName("gradebook_configuration_semester$FK_semester");

                    b.Navigation("GradebookConfiguration");

                    b.Navigation("Quarters");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfigurationYear", b =>
                {
                    b.HasOne("opensis.data.Models.Semesters", "Semesters")
                        .WithMany("GradebookConfigurationYear")
                        .HasForeignKey("TenantId", "SchoolId", "SmstrMarkingPeriodId")
                        .HasConstraintName("gradebook_config_year$FK_sem");

                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYears")
                        .WithMany("GradebookConfigurationYear")
                        .HasForeignKey("TenantId", "SchoolId", "YrMarkingPeriodId")
                        .HasConstraintName("gradebook_config_year$FK_school_years");

                    b.HasOne("opensis.data.Models.GradebookConfiguration", "GradebookConfiguration")
                        .WithMany("GradebookConfigurationYear")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "AcademicYear", "GradebookConfigurationId")
                        .IsRequired()
                        .HasConstraintName("gradebook_config_year$FK_config");

                    b.Navigation("GradebookConfiguration");

                    b.Navigation("SchoolYears");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("opensis.data.Models.GradebookGrades", b =>
                {
                    b.HasOne("opensis.data.Models.Assignment", "Assignment")
                        .WithMany("GradebookGrades")
                        .HasForeignKey("TenantId", "SchoolId", "AssignmentId")
                        .IsRequired()
                        .HasConstraintName("gradebook_grades$FK_assignment");

                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("GradebookGrades")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("gradebook_grades$FK_studmast");

                    b.Navigation("Assignment");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.Gradelevels", b =>
                {
                    b.HasOne("opensis.data.Models.GradeAgeRange", "AgeRange")
                        .WithMany("Gradelevels")
                        .HasForeignKey("AgeRangeId")
                        .HasConstraintName("gradelevels$FK_gradelevels_grade_age_range");

                    b.HasOne("opensis.data.Models.GradeEquivalency", "Equivalency")
                        .WithMany("Gradelevels")
                        .HasForeignKey("EquivalencyId")
                        .HasConstraintName("gradelevels$FK_gradelevels_grade_equivalency");

                    b.HasOne("opensis.data.Models.GradeEducationalStage", "IscedCodeNavigation")
                        .WithMany("Gradelevels")
                        .HasForeignKey("IscedCode")
                        .HasConstraintName("gradelevels$FK_gradelevels_grade_educational_stage");

                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Gradelevels")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("gradelevels$FK_gradelevels_school_master");

                    b.Navigation("AgeRange");

                    b.Navigation("Equivalency");

                    b.Navigation("IscedCodeNavigation");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.GradeScale", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("GradeScale")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("grade_scale$FK_grade_scale_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.HistoricalCreditTransfer", b =>
                {
                    b.HasOne("opensis.data.Models.HistoricalGrade", "HistoricalGrade")
                        .WithMany("HistoricalCreditTransfer")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId", "HistGradeId")
                        .IsRequired()
                        .HasConstraintName("hist_credit_trf$FK_hist_grade");

                    b.Navigation("HistoricalGrade");
                });

            modelBuilder.Entity("opensis.data.Models.Membership", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Membership")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("membership$fk_table_membership_table_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.ParentAddress", b =>
                {
                    b.HasOne("opensis.data.Models.ParentInfo", "ParentInfo")
                        .WithMany("ParentAddress")
                        .HasForeignKey("TenantId", "SchoolId", "ParentId")
                        .IsRequired()
                        .HasConstraintName("parent_address$FK_parent_address_parent_info");

                    b.Navigation("ParentInfo");
                });

            modelBuilder.Entity("opensis.data.Models.PermissionCategory", b =>
                {
                    b.HasOne("opensis.data.Models.PermissionGroup", "PermissionGroup")
                        .WithMany("PermissionCategory")
                        .HasForeignKey("TenantId", "SchoolId", "PermissionGroupId")
                        .IsRequired()
                        .HasConstraintName("permission_category$FK_group");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("opensis.data.Models.PermissionGroup", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("PermissionGroup")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("permission_group$FK_permission_group_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.PermissionSubcategory", b =>
                {
                    b.HasOne("opensis.data.Models.PermissionCategory", "PermissionCategory")
                        .WithMany("PermissionSubcategory")
                        .HasForeignKey("TenantId", "SchoolId", "PermissionCategoryId")
                        .IsRequired()
                        .HasConstraintName("permission_subcategory$FK_category");

                    b.Navigation("PermissionCategory");
                });

            modelBuilder.Entity("opensis.data.Models.ProgressPeriods", b =>
                {
                    b.HasOne("opensis.data.Models.Quarters", "Quarters")
                        .WithMany("ProgressPeriods")
                        .HasForeignKey("TenantId", "SchoolId", "QuarterId")
                        .HasConstraintName("progress_periods$FK_quarters");

                    b.Navigation("Quarters");
                });

            modelBuilder.Entity("opensis.data.Models.Quarters", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Quarters")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("quarters$FK_quarters_school_master");

                    b.HasOne("opensis.data.Models.Semesters", "Semesters")
                        .WithMany("Quarters")
                        .HasForeignKey("TenantId", "SchoolId", "SemesterId")
                        .HasConstraintName("quarters$FK_quarters_semesters");

                    b.Navigation("SchoolMaster");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("opensis.data.Models.RolePermission", b =>
                {
                    b.HasOne("opensis.data.Models.Membership", "Membership")
                        .WithMany("RolePermission")
                        .HasForeignKey("TenantId", "SchoolId", "MembershipId")
                        .HasConstraintName("role_permission$FK_membership");

                    b.HasOne("opensis.data.Models.PermissionCategory", "PermissionCategory")
                        .WithMany("RolePermission")
                        .HasForeignKey("TenantId", "SchoolId", "PermissionCategoryId")
                        .HasConstraintName("role_permission$FK_category");

                    b.HasOne("opensis.data.Models.PermissionGroup", "PermissionGroup")
                        .WithMany("RolePermission")
                        .HasForeignKey("TenantId", "SchoolId", "PermissionGroupId")
                        .HasConstraintName("role_permission$FK_groupId");

                    b.HasOne("opensis.data.Models.PermissionSubcategory", "PermissionSubcategory")
                        .WithMany("RolePermission")
                        .HasForeignKey("TenantId", "SchoolId", "PermissionSubcategoryId")
                        .HasConstraintName("role_permission$FK_subcategory");

                    b.Navigation("Membership");

                    b.Navigation("PermissionCategory");

                    b.Navigation("PermissionGroup");

                    b.Navigation("PermissionSubcategory");
                });

            modelBuilder.Entity("opensis.data.Models.ScheduledJobHistory", b =>
                {
                    b.HasOne("opensis.data.Models.ScheduledJob", "ScheduledJob")
                        .WithMany("ScheduledJobHistories")
                        .HasForeignKey("TenantId", "SchoolId", "JobId")
                        .IsRequired()
                        .HasConstraintName("FK_job_history_job");

                    b.Navigation("ScheduledJob");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolCalendars", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolCalendars")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("school_calendars$FK_school_calendars_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolDetail", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolDetail")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("school_detail$FK_school_detail_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolMaster", b =>
                {
                    b.HasOne("opensis.data.Models.Plans", "Plans")
                        .WithMany("SchoolMaster")
                        .HasForeignKey("TenantId", "SchoolId", "PlanId")
                        .HasConstraintName("school_master$FK_school_master_plans");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolPreference", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolPreference")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("school_preference$FK_school");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolRollover", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolRollover")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("school_rollover$FK_school_rollover_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolYears", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolYears")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("school_years$FK_school_years_school_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.SearchFilter", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SearchFilter")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("search_filter$FK_search_filter_school_master");

                    b.HasOne("opensis.data.Models.UserMaster", "UserMaster")
                        .WithMany("SearchFilter")
                        .HasForeignKey("TenantId", "SchoolId", "Emailaddress")
                        .HasConstraintName("search_filter$FK_search_filter_user_master");

                    b.Navigation("SchoolMaster");

                    b.Navigation("UserMaster");
                });

            modelBuilder.Entity("opensis.data.Models.Semesters", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Semesters")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("semesters$FK_semesters_school_master");

                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYears")
                        .WithMany("Semesters")
                        .HasForeignKey("TenantId", "SchoolId", "YearId")
                        .HasConstraintName("semesters$FK_semesters_school_years");

                    b.Navigation("SchoolMaster");

                    b.Navigation("SchoolYears");
                });

            modelBuilder.Entity("opensis.data.Models.StaffCertificateInfo", b =>
                {
                    b.HasOne("opensis.data.Models.StaffMaster", "StaffMaster")
                        .WithMany("StaffCertificateInfo")
                        .HasForeignKey("TenantId", "StaffId")
                        .HasConstraintName("staff_certificate_info$FK_staff");

                    b.Navigation("StaffMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StaffCoursesectionSchedule", b =>
                {
                    b.HasOne("opensis.data.Models.StaffMaster", "StaffMaster")
                        .WithMany("StaffCoursesectionSchedule")
                        .HasForeignKey("TenantId", "StaffId")
                        .IsRequired()
                        .HasConstraintName("staff_coursesection_schedule$FK_staff_master");

                    b.HasOne("opensis.data.Models.ProgressPeriods", "ProgressPeriod")
                        .WithMany("StaffCoursesectionSchedules")
                        .HasForeignKey("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId")
                        .HasConstraintName("FK_staff_cs_sch_progress_periods");

                    b.HasOne("opensis.data.Models.Quarters", "Quarter")
                        .WithMany("StaffCoursesectionSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "QtrMarkingPeriodId")
                        .HasConstraintName("staff_coursesection_schedule$FK_quarters");

                    b.HasOne("opensis.data.Models.Semesters", "Semester")
                        .WithMany("StaffCoursesectionSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "SmstrMarkingPeriodId")
                        .HasConstraintName("staff_coursesection_schedule$FK_semesters");

                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYear")
                        .WithMany("StaffCoursesectionSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "YrMarkingPeriodId")
                        .HasConstraintName("staff_coursesection_schedule$FK_years");

                    b.HasOne("opensis.data.Models.CourseSection", "CourseSection")
                        .WithMany("StaffCoursesectionSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId", "CourseSectionId")
                        .IsRequired()
                        .HasConstraintName("staff_coursesection_schedule$FK_section");

                    b.Navigation("CourseSection");

                    b.Navigation("ProgressPeriod");

                    b.Navigation("Quarter");

                    b.Navigation("SchoolYear");

                    b.Navigation("Semester");

                    b.Navigation("StaffMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StaffMaster", b =>
                {
                    b.HasOne("opensis.data.Models.Language", "FirstLanguageNavigation")
                        .WithMany("StaffMasterFirstLanguageNavigation")
                        .HasForeignKey("FirstLanguage")
                        .HasConstraintName("staff_master$FK_staff_master_language");

                    b.HasOne("opensis.data.Models.Language", "SecondLanguageNavigation")
                        .WithMany("StaffMasterSecondLanguageNavigation")
                        .HasForeignKey("SecondLanguage")
                        .HasConstraintName("staff_master$FK_staff_master_language1");

                    b.HasOne("opensis.data.Models.Language", "ThirdLanguageNavigation")
                        .WithMany("StaffMasterThirdLanguageNavigation")
                        .HasForeignKey("ThirdLanguage")
                        .HasConstraintName("staff_master$FK_staff_master_language2");

                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("StaffMaster")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("staff_master$FK_staff_master_school_master");

                    b.Navigation("FirstLanguageNavigation");

                    b.Navigation("SchoolMaster");

                    b.Navigation("SecondLanguageNavigation");

                    b.Navigation("ThirdLanguageNavigation");
                });

            modelBuilder.Entity("opensis.data.Models.StaffSchoolInfo", b =>
                {
                    b.HasOne("opensis.data.Models.StaffMaster", "StaffMaster")
                        .WithMany("StaffSchoolInfo")
                        .HasForeignKey("TenantId", "StaffId")
                        .HasConstraintName("staff_school_info$FK_master");

                    b.HasOne("opensis.data.Models.Membership", "Membership")
                        .WithMany("StaffSchoolInfos")
                        .HasForeignKey("TenantId", "SchoolId", "MembershipId")
                        .HasConstraintName("staff_school_info$FK_membership");

                    b.Navigation("Membership");

                    b.Navigation("StaffMaster");
                });

            modelBuilder.Entity("opensis.data.Models.State", b =>
                {
                    b.HasOne("opensis.data.Models.Country", "Country")
                        .WithMany("State")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("state$FK_state_country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("opensis.data.Models.StudentAttendance", b =>
                {
                    b.HasOne("opensis.data.Models.Membership", "Membership")
                        .WithMany("StudentAttendance")
                        .HasForeignKey("TenantId", "SchoolId", "MembershipId")
                        .HasConstraintName("student_attendance$FK_membership");

                    b.HasOne("opensis.data.Models.AttendanceCode", "AttendanceCodeNavigation")
                        .WithMany("StudentAttendance")
                        .HasForeignKey("TenantId", "SchoolId", "AttendanceCategoryId", "AttendanceCode")
                        .IsRequired()
                        .HasConstraintName("student_attendance$FK_code");

                    b.HasOne("opensis.data.Models.BlockPeriod", "BlockPeriod")
                        .WithMany("StudentAttendance")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .IsRequired()
                        .HasConstraintName("student_attendance$FKperiod");

                    b.HasOne("opensis.data.Models.StaffCoursesectionSchedule", "StaffCoursesectionSchedule")
                        .WithMany("StudentAttendance")
                        .HasForeignKey("TenantId", "SchoolId", "StaffId", "CourseId", "CourseSectionId")
                        .IsRequired()
                        .HasConstraintName("student_attendance$FK_staff_cs_sch");

                    b.HasOne("opensis.data.Models.StudentCoursesectionSchedule", "StudentCoursesectionSchedule")
                        .WithMany("StudentAttendance")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId", "CourseId", "CourseSectionId")
                        .IsRequired()
                        .HasConstraintName("student_attd_coursesec_sch");

                    b.Navigation("AttendanceCodeNavigation");

                    b.Navigation("BlockPeriod");

                    b.Navigation("Membership");

                    b.Navigation("StaffCoursesectionSchedule");

                    b.Navigation("StudentCoursesectionSchedule");
                });

            modelBuilder.Entity("opensis.data.Models.StudentAttendanceComments", b =>
                {
                    b.HasOne("opensis.data.Models.Membership", "Membership")
                        .WithMany("StudentAttendanceComments")
                        .HasForeignKey("TenantId", "SchoolId", "MembershipId")
                        .HasConstraintName("student_attendance_comments$FK_membership");

                    b.HasOne("opensis.data.Models.StudentAttendance", "StudentAttendance")
                        .WithMany("StudentAttendanceComments")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId", "StudentAttendanceId")
                        .HasPrincipalKey("TenantId", "SchoolId", "StudentId", "StudentAttendanceId")
                        .IsRequired()
                        .HasConstraintName("std_attd_comments$FK_std_atd");

                    b.Navigation("Membership");

                    b.Navigation("StudentAttendance");
                });

            modelBuilder.Entity("opensis.data.Models.StudentAttendanceHistory", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentAttendanceHistory")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_attendance_history$FK_student");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentComments", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentComments")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_comments$FK_std_master");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentCoursesectionSchedule", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("StudentCoursesectionSchedule")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("sch_mast_std_cs_sch");

                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentCoursesectionSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("std_mast_cs_sch");

                    b.HasOne("opensis.data.Models.CourseSection", "CourseSection")
                        .WithMany("StudentCoursesectionSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId", "CourseSectionId")
                        .IsRequired()
                        .HasConstraintName("std_cs_cs_sch");

                    b.Navigation("CourseSection");

                    b.Navigation("SchoolMaster");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentDailyAttendance", b =>
                {
                    b.HasOne("opensis.data.Models.GradeScale", "GradeScale")
                        .WithMany("StudentDailyAttendance")
                        .HasForeignKey("TenantId", "SchoolId", "GradeScaleId")
                        .HasConstraintName("student_daily_attendance$FK_grade_scale");

                    b.HasOne("opensis.data.Models.Sections", "Sections")
                        .WithMany("StudentDailyAttendance")
                        .HasForeignKey("TenantId", "SchoolId", "SectionId")
                        .HasConstraintName("student_daily_attendance$FK_sections");

                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentDailyAttendance")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_daily_attendance$FK_master");

                    b.Navigation("GradeScale");

                    b.Navigation("Sections");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentDocuments", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentDocuments")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_documents$FK_master");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentEffortGradeDetail", b =>
                {
                    b.HasOne("opensis.data.Models.StudentEffortGradeMaster", "StudentEffortGradeMaster")
                        .WithMany("StudentEffortGradeDetail")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId", "StudentEffortGradeSrlno")
                        .IsRequired()
                        .HasConstraintName("std_effort_master_detail");

                    b.Navigation("StudentEffortGradeMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentEffortGradeMaster", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolCalendars", "SchoolCalendars")
                        .WithMany("StudentEffortGradeMaster")
                        .HasForeignKey("TenantId", "SchoolId", "CalendarId")
                        .HasConstraintName("student_effort_grade_calendars");

                    b.HasOne("opensis.data.Models.ProgressPeriods", "ProgressPeriod")
                        .WithMany("StudentEffortGradeMasters")
                        .HasForeignKey("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId")
                        .HasConstraintName("FK_student_effort_grade_master_progress_periods");

                    b.HasOne("opensis.data.Models.Quarters", "Quarters")
                        .WithMany("StudentEffortGradeMaster")
                        .HasForeignKey("TenantId", "SchoolId", "QtrMarkingPeriodId")
                        .HasConstraintName("student_effort_grade_quarters");

                    b.HasOne("opensis.data.Models.Semesters", "Semesters")
                        .WithMany("StudentEffortGradeMaster")
                        .HasForeignKey("TenantId", "SchoolId", "SmstrMarkingPeriodId")
                        .HasConstraintName("student_effort_grade_semesters");

                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYears")
                        .WithMany("StudentEffortGradeMaster")
                        .HasForeignKey("TenantId", "SchoolId", "YrMarkingPeriodId")
                        .HasConstraintName("student_effort_grade_years");

                    b.Navigation("ProgressPeriod");

                    b.Navigation("Quarters");

                    b.Navigation("SchoolCalendars");

                    b.Navigation("SchoolYears");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("opensis.data.Models.StudentEnrollment", b =>
                {
                    b.HasOne("opensis.data.Models.Gradelevels", "Gradelevels")
                        .WithMany("StudentEnrollment")
                        .HasForeignKey("TenantId", "SchoolId", "GradeId")
                        .HasConstraintName("student_enrollment$FK_gradelevels");

                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentEnrollment")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gradelevels");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentEnrollmentCode", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("StudentEnrollmentCode")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("student_enrollment_code$FK_master");

                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentFinalGrade", b =>
                {
                    b.HasOne("opensis.data.Models.ProgressPeriods", "ProgressPeriod")
                        .WithMany("StudentFinalGrades")
                        .HasForeignKey("TenantId", "SchoolId", "PrgrsprdMarkingPeriodId")
                        .HasConstraintName("FK_student_final_grade_progress_periods");

                    b.HasOne("opensis.data.Models.Quarters", "Quarters")
                        .WithMany("StudentFinalGrade")
                        .HasForeignKey("TenantId", "SchoolId", "QtrMarkingPeriodId")
                        .HasConstraintName("student_final_grade$FK_quarters");

                    b.HasOne("opensis.data.Models.Semesters", "Semesters")
                        .WithMany("StudentFinalGrade")
                        .HasForeignKey("TenantId", "SchoolId", "SmstrMarkingPeriodId")
                        .HasConstraintName("student_final_grade$FK_semesters");

                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentFinalGrade")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_final_grade$FK_master");

                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYears")
                        .WithMany("StudentFinalGrade")
                        .HasForeignKey("TenantId", "SchoolId", "YrMarkingPeriodId")
                        .HasConstraintName("student_final_grade$FK_years");

                    b.Navigation("ProgressPeriod");

                    b.Navigation("Quarters");

                    b.Navigation("SchoolYears");

                    b.Navigation("Semesters");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentFinalGradeComments", b =>
                {
                    b.HasOne("opensis.data.Models.CourseCommentCategory", "CourseCommentCategory")
                        .WithMany("StudentFinalGradeComments")
                        .HasForeignKey("TenantId", "SchoolId", "CourseCommentId")
                        .IsRequired()
                        .HasConstraintName("student_final_grade_comments$FK_comment_category");

                    b.HasOne("opensis.data.Models.StudentFinalGrade", "StudentFinalGrade")
                        .WithMany("StudentFinalGradeComments")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId", "StudentFinalGradeSrlno")
                        .IsRequired()
                        .HasConstraintName("std_final_grade_cmnts$FK_final_grade");

                    b.Navigation("CourseCommentCategory");

                    b.Navigation("StudentFinalGrade");
                });

            modelBuilder.Entity("opensis.data.Models.StudentFinalGradeStandard", b =>
                {
                    b.HasOne("opensis.data.Models.StudentFinalGrade", "StudentFinalGrade")
                        .WithMany("StudentFinalGradeStandard")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId", "StudentFinalGradeSrlno")
                        .IsRequired()
                        .HasConstraintName("std_final_grade_std$FK_final_grade");

                    b.Navigation("StudentFinalGrade");
                });

            modelBuilder.Entity("opensis.data.Models.StudentMaster", b =>
                {
                    b.HasOne("opensis.data.Models.Language", "FirstLanguage")
                        .WithMany("StudentMasterFirstLanguage")
                        .HasForeignKey("FirstLanguageId")
                        .HasConstraintName("student_master$FK_student_master_language");

                    b.HasOne("opensis.data.Models.Language", "SecondLanguage")
                        .WithMany("StudentMasterSecondLanguage")
                        .HasForeignKey("SecondLanguageId")
                        .HasConstraintName("student_master$FK_student_master_language1");

                    b.HasOne("opensis.data.Models.Language", "ThirdLanguage")
                        .WithMany("StudentMasterThirdLanguage")
                        .HasForeignKey("ThirdLanguageId")
                        .HasConstraintName("student_master$FK_student_master_language2");

                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("StudentMaster")
                        .HasForeignKey("TenantId", "SchoolId")
                        .IsRequired()
                        .HasConstraintName("student_master$FK_student_master_school_master");

                    b.HasOne("opensis.data.Models.Sections", "Sections")
                        .WithMany("StudentMaster")
                        .HasForeignKey("TenantId", "SchoolId", "SectionId")
                        .HasConstraintName("student_master$FK_student_master_sections");

                    b.Navigation("FirstLanguage");

                    b.Navigation("SchoolMaster");

                    b.Navigation("SecondLanguage");

                    b.Navigation("Sections");

                    b.Navigation("ThirdLanguage");
                });

            modelBuilder.Entity("opensis.data.Models.StudentMedicalAlert", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentMedicalAlert")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_medical_alert$FK_master");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentMedicalImmunization", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentMedicalImmunization")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_medical_immunization$FK_master");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentMedicalNote", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentMedicalNote")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_medical_note$FK_master");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentMedicalNurseVisit", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentMedicalNurseVisit")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_medical_nurse_visit$FK_master");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentMedicalProvider", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentMedicalProvider")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_medical_provider$FK_master");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentMissingAttendance", b =>
                {
                    b.HasOne("opensis.data.Models.StaffMaster", "StaffMaster")
                        .WithMany("StudentMissingAttendances")
                        .HasForeignKey("TenantId", "StaffId")
                        .HasConstraintName("FK_missing_attendance_staff");

                    b.HasOne("opensis.data.Models.BlockPeriod", "BlockPeriod")
                        .WithMany("StudentMissingAttendances")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .HasConstraintName("FK_missing_attendance_block_period");

                    b.HasOne("opensis.data.Models.StaffCoursesectionSchedule", "StaffCoursesectionSchedule")
                        .WithMany("StudentMissingAttendances")
                        .HasForeignKey("TenantId", "SchoolId", "StaffId", "CourseId", "CourseSectionId")
                        .HasConstraintName("FK_missing_attendance_cs");

                    b.Navigation("BlockPeriod");

                    b.Navigation("StaffCoursesectionSchedule");

                    b.Navigation("StaffMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentReportCardDetail", b =>
                {
                    b.HasOne("opensis.data.Models.StudentReportCardMaster", "StudentReportCardMaster")
                        .WithMany("StudentReportCardDetail")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId", "SchoolYear", "MarkingPeriodTitle")
                        .HasConstraintName("student_report_card_detail$FK_master");

                    b.Navigation("StudentReportCardMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentReportCardMaster", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentReportCardMaster")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_report_card_master$FK_master");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentTranscriptDetail", b =>
                {
                    b.HasOne("opensis.data.Models.StudentTranscriptMaster", "StudentTranscriptMaster")
                        .WithMany("StudentTranscriptDetail")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId", "GradeTitle")
                        .IsRequired()
                        .HasConstraintName("student_transcript_detail$FK_transcript");

                    b.Navigation("StudentTranscriptMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentTranscriptMaster", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentTranscriptMaster")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .IsRequired()
                        .HasConstraintName("student_transcript_master$FK_master");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.UserMaster", b =>
                {
                    b.HasOne("opensis.data.Models.Language", "Lang")
                        .WithMany("UserMaster")
                        .HasForeignKey("LangId")
                        .IsRequired()
                        .HasConstraintName("user_master$FK_user_master_language");

                    b.HasOne("opensis.data.Models.Membership", "Membership")
                        .WithMany("UserMaster")
                        .HasForeignKey("TenantId", "SchoolId", "MembershipId")
                        .IsRequired()
                        .HasConstraintName("user_master$FK_user_master_membership");

                    b.Navigation("Lang");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("opensis.data.Models.UserSecretQuestions", b =>
                {
                    b.HasOne("opensis.data.Models.UserMaster", "UserMaster")
                        .WithOne("UserSecretQuestions")
                        .HasForeignKey("opensis.data.Models.UserSecretQuestions", "TenantId", "SchoolId", "Emailaddress")
                        .IsRequired()
                        .HasConstraintName("user_secret_questions$FK_master");

                    b.Navigation("UserMaster");
                });

            modelBuilder.Entity("opensis.data.Models.ApiControllerList", b =>
                {
                    b.Navigation("ApiControllerKeyMapping");
                });

            modelBuilder.Entity("opensis.data.Models.ApiKeysMaster", b =>
                {
                    b.Navigation("ApiControllerKeyMapping");
                });

            modelBuilder.Entity("opensis.data.Models.Assignment", b =>
                {
                    b.Navigation("GradebookGrades");
                });

            modelBuilder.Entity("opensis.data.Models.AssignmentType", b =>
                {
                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("opensis.data.Models.AttendanceCode", b =>
                {
                    b.Navigation("StudentAttendance");
                });

            modelBuilder.Entity("opensis.data.Models.AttendanceCodeCategories", b =>
                {
                    b.Navigation("AttendanceCode");

                    b.Navigation("CourseSection");
                });

            modelBuilder.Entity("opensis.data.Models.Block", b =>
                {
                    b.Navigation("CourseBlockSchedule");
                });

            modelBuilder.Entity("opensis.data.Models.BlockPeriod", b =>
                {
                    b.Navigation("CourseBlockSchedule");

                    b.Navigation("CourseCalendarSchedule");

                    b.Navigation("CourseFixedSchedule");

                    b.Navigation("CourseVariableSchedule");

                    b.Navigation("StudentAttendance");

                    b.Navigation("StudentMissingAttendances");
                });

            modelBuilder.Entity("opensis.data.Models.Country", b =>
                {
                    b.Navigation("State");
                });

            modelBuilder.Entity("opensis.data.Models.Course", b =>
                {
                    b.Navigation("CourseSection");

                    b.Navigation("CourseStandard");
                });

            modelBuilder.Entity("opensis.data.Models.CourseCommentCategory", b =>
                {
                    b.Navigation("StudentFinalGradeComments");
                });

            modelBuilder.Entity("opensis.data.Models.CourseSection", b =>
                {
                    b.Navigation("GradebookConfiguration");

                    b.Navigation("StaffCoursesectionSchedule");

                    b.Navigation("StudentCoursesectionSchedule");
                });

            modelBuilder.Entity("opensis.data.Models.CustomFields", b =>
                {
                    b.Navigation("CustomFieldsValue");
                });

            modelBuilder.Entity("opensis.data.Models.EffortGradeLibraryCategory", b =>
                {
                    b.Navigation("EffortGradeLibraryCategoryItem");
                });

            modelBuilder.Entity("opensis.data.Models.FieldsCategory", b =>
                {
                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("opensis.data.Models.GradeAgeRange", b =>
                {
                    b.Navigation("Gradelevels");
                });

            modelBuilder.Entity("opensis.data.Models.GradebookConfiguration", b =>
                {
                    b.Navigation("GradebookConfigurationGradescale");

                    b.Navigation("GradebookConfigurationProgressPeriods");

                    b.Navigation("GradebookConfigurationQuarter");

                    b.Navigation("GradebookConfigurationSemester");

                    b.Navigation("GradebookConfigurationYear");
                });

            modelBuilder.Entity("opensis.data.Models.GradeEducationalStage", b =>
                {
                    b.Navigation("Gradelevels");
                });

            modelBuilder.Entity("opensis.data.Models.GradeEquivalency", b =>
                {
                    b.Navigation("Gradelevels");
                });

            modelBuilder.Entity("opensis.data.Models.Gradelevels", b =>
                {
                    b.Navigation("StudentEnrollment");
                });

            modelBuilder.Entity("opensis.data.Models.GradeScale", b =>
                {
                    b.Navigation("CourseSection");

                    b.Navigation("Grade");

                    b.Navigation("StudentDailyAttendance");
                });

            modelBuilder.Entity("opensis.data.Models.GradeUsStandard", b =>
                {
                    b.Navigation("CourseStandard");
                });

            modelBuilder.Entity("opensis.data.Models.HistoricalGrade", b =>
                {
                    b.Navigation("HistoricalCreditTransfer");
                });

            modelBuilder.Entity("opensis.data.Models.Language", b =>
                {
                    b.Navigation("StaffMasterFirstLanguageNavigation");

                    b.Navigation("StaffMasterSecondLanguageNavigation");

                    b.Navigation("StaffMasterThirdLanguageNavigation");

                    b.Navigation("StudentMasterFirstLanguage");

                    b.Navigation("StudentMasterSecondLanguage");

                    b.Navigation("StudentMasterThirdLanguage");

                    b.Navigation("UserMaster");
                });

            modelBuilder.Entity("opensis.data.Models.Membership", b =>
                {
                    b.Navigation("RolePermission");

                    b.Navigation("StaffSchoolInfos");

                    b.Navigation("StudentAttendance");

                    b.Navigation("StudentAttendanceComments");

                    b.Navigation("UserMaster");
                });

            modelBuilder.Entity("opensis.data.Models.ParentInfo", b =>
                {
                    b.Navigation("ParentAddress");
                });

            modelBuilder.Entity("opensis.data.Models.PermissionCategory", b =>
                {
                    b.Navigation("PermissionSubcategory");

                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("opensis.data.Models.PermissionGroup", b =>
                {
                    b.Navigation("PermissionCategory");

                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("opensis.data.Models.PermissionSubcategory", b =>
                {
                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("opensis.data.Models.Plans", b =>
                {
                    b.Navigation("SchoolMaster");
                });

            modelBuilder.Entity("opensis.data.Models.ProgressPeriods", b =>
                {
                    b.Navigation("AssignmentTypes");

                    b.Navigation("CourseSections");

                    b.Navigation("GradebookConfigurationProgressPeriods");

                    b.Navigation("StaffCoursesectionSchedules");

                    b.Navigation("StudentEffortGradeMasters");

                    b.Navigation("StudentFinalGrades");
                });

            modelBuilder.Entity("opensis.data.Models.Quarters", b =>
                {
                    b.Navigation("AssignmentTypes");

                    b.Navigation("CourseSection");

                    b.Navigation("GradebookConfigurationQuarter");

                    b.Navigation("GradebookConfigurationSemester");

                    b.Navigation("ProgressPeriods");

                    b.Navigation("StaffCoursesectionSchedule");

                    b.Navigation("StudentEffortGradeMaster");

                    b.Navigation("StudentFinalGrade");
                });

            modelBuilder.Entity("opensis.data.Models.Rooms", b =>
                {
                    b.Navigation("CourseBlockSchedule");

                    b.Navigation("CourseCalendarSchedule");

                    b.Navigation("CourseFixedSchedule");

                    b.Navigation("CourseVariableSchedule");
                });

            modelBuilder.Entity("opensis.data.Models.ScheduledJob", b =>
                {
                    b.Navigation("ScheduledJobHistories");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolCalendars", b =>
                {
                    b.Navigation("CourseSection");

                    b.Navigation("StudentEffortGradeMaster");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolMaster", b =>
                {
                    b.Navigation("AttendanceCodeCategories");

                    b.Navigation("Block");

                    b.Navigation("BlockPeriod");

                    b.Navigation("CourseSection");

                    b.Navigation("CustomFields");

                    b.Navigation("DpdownValuelist");

                    b.Navigation("FieldsCategory");

                    b.Navigation("GradeScale");

                    b.Navigation("Gradelevels");

                    b.Navigation("Membership");

                    b.Navigation("PermissionGroup");

                    b.Navigation("Quarters");

                    b.Navigation("SchoolCalendars");

                    b.Navigation("SchoolDetail");

                    b.Navigation("SchoolPreference");

                    b.Navigation("SchoolRollover");

                    b.Navigation("SchoolYears");

                    b.Navigation("SearchFilter");

                    b.Navigation("Semesters");

                    b.Navigation("StaffMaster");

                    b.Navigation("StudentCoursesectionSchedule");

                    b.Navigation("StudentEnrollmentCode");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolYears", b =>
                {
                    b.Navigation("AssignmentTypes");

                    b.Navigation("CourseSection");

                    b.Navigation("GradebookConfigurationYear");

                    b.Navigation("Semesters");

                    b.Navigation("StaffCoursesectionSchedule");

                    b.Navigation("StudentEffortGradeMaster");

                    b.Navigation("StudentFinalGrade");
                });

            modelBuilder.Entity("opensis.data.Models.Sections", b =>
                {
                    b.Navigation("StudentDailyAttendance");

                    b.Navigation("StudentMaster");
                });

            modelBuilder.Entity("opensis.data.Models.Semesters", b =>
                {
                    b.Navigation("AssignmentTypes");

                    b.Navigation("CourseSection");

                    b.Navigation("GradebookConfigurationSemester");

                    b.Navigation("GradebookConfigurationYear");

                    b.Navigation("Quarters");

                    b.Navigation("StaffCoursesectionSchedule");

                    b.Navigation("StudentEffortGradeMaster");

                    b.Navigation("StudentFinalGrade");
                });

            modelBuilder.Entity("opensis.data.Models.StaffCoursesectionSchedule", b =>
                {
                    b.Navigation("StudentAttendance");

                    b.Navigation("StudentMissingAttendances");
                });

            modelBuilder.Entity("opensis.data.Models.StaffMaster", b =>
                {
                    b.Navigation("Assignment");

                    b.Navigation("StaffCertificateInfo");

                    b.Navigation("StaffCoursesectionSchedule");

                    b.Navigation("StaffSchoolInfo");

                    b.Navigation("StudentMissingAttendances");
                });

            modelBuilder.Entity("opensis.data.Models.State", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("opensis.data.Models.StudentAttendance", b =>
                {
                    b.Navigation("StudentAttendanceComments");
                });

            modelBuilder.Entity("opensis.data.Models.StudentCoursesectionSchedule", b =>
                {
                    b.Navigation("StudentAttendance");
                });

            modelBuilder.Entity("opensis.data.Models.StudentEffortGradeMaster", b =>
                {
                    b.Navigation("StudentEffortGradeDetail");
                });

            modelBuilder.Entity("opensis.data.Models.StudentFinalGrade", b =>
                {
                    b.Navigation("StudentFinalGradeComments");

                    b.Navigation("StudentFinalGradeStandard");
                });

            modelBuilder.Entity("opensis.data.Models.StudentMaster", b =>
                {
                    b.Navigation("GradebookGrades");

                    b.Navigation("StudentAttendanceHistory");

                    b.Navigation("StudentComments");

                    b.Navigation("StudentCoursesectionSchedule");

                    b.Navigation("StudentDailyAttendance");

                    b.Navigation("StudentDocuments");

                    b.Navigation("StudentEnrollment");

                    b.Navigation("StudentFinalGrade");

                    b.Navigation("StudentMedicalAlert");

                    b.Navigation("StudentMedicalImmunization");

                    b.Navigation("StudentMedicalNote");

                    b.Navigation("StudentMedicalNurseVisit");

                    b.Navigation("StudentMedicalProvider");

                    b.Navigation("StudentReportCardMaster");

                    b.Navigation("StudentTranscriptMaster");
                });

            modelBuilder.Entity("opensis.data.Models.StudentReportCardMaster", b =>
                {
                    b.Navigation("StudentReportCardDetail");
                });

            modelBuilder.Entity("opensis.data.Models.StudentTranscriptMaster", b =>
                {
                    b.Navigation("StudentTranscriptDetail");
                });

            modelBuilder.Entity("opensis.data.Models.UserMaster", b =>
                {
                    b.Navigation("SearchFilter");

                    b.Navigation("UserSecretQuestions")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
