// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using opensis.data.Models;

namespace opensis.data.Migrations.MySqlMigrations
{
    [DbContext(typeof(CRMContextMySQL))]
    [Migration("20210305120830_AlterFKPKPermissionCategoryIdInPermissionSubCategory")]
    partial class AlterFKPKPermissionCategoryIdInPermissionSubCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("opensis.data.Models.AttendanceCode", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("AttendanceCategoryId")
                        .HasColumnName("attendance_category_id")
                        .HasColumnType("int");

                    b.Property<int>("AttendanceCode1")
                        .HasColumnName("attendance_code")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<string>("AllowEntryBy")
                        .HasColumnName("allow_entry_by")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("DefaultCode")
                        .HasColumnName("default_code")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("StateCode")
                        .HasColumnName("state_code")
                        .HasColumnType("varchar(8) CHARACTER SET utf8mb4")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "AttendanceCategoryId", "AttendanceCode1");

                    b.ToTable("attendance_code");
                });

            modelBuilder.Entity("opensis.data.Models.AttendanceCodeCategories", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("AttendanceCategoryId")
                        .HasColumnName("attendance_category_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "AttendanceCategoryId");

                    b.ToTable("attendance_code_categories");
                });

            modelBuilder.Entity("opensis.data.Models.Block", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("BlockId")
                        .HasColumnName("block_id")
                        .HasColumnType("int");

                    b.Property<long?>("BlockSortOrder")
                        .HasColumnName("block_sort_order")
                        .HasColumnType("bigint");

                    b.Property<string>("BlockTitle")
                        .HasColumnName("block_title")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "BlockId");

                    b.ToTable("block");
                });

            modelBuilder.Entity("opensis.data.Models.BlockPeriod", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("BlockId")
                        .HasColumnName("block_id")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnName("period_id")
                        .HasColumnType("int");

                    b.Property<bool?>("CalculateAttendance")
                        .HasColumnName("calculate_attendance")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("PeriodEndTime")
                        .HasColumnName("period_end_time")
                        .HasColumnType("char(8) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("PeriodShortName")
                        .HasColumnName("period_short_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PeriodSortOrder")
                        .HasColumnName("period_sort_order")
                        .HasColumnType("int");

                    b.Property<string>("PeriodStartTime")
                        .HasColumnName("period_start_time")
                        .HasColumnType("char(8) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("PeriodTitle")
                        .HasColumnName("period_title")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "BlockId", "PeriodId");

                    b.ToTable("block_period");
                });

            modelBuilder.Entity("opensis.data.Models.CalendarEvents", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CalendarId")
                        .HasColumnName("calendar_id")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnName("event_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<string>("EventColor")
                        .HasColumnName("event_color")
                        .HasColumnType("varchar(7) CHARACTER SET utf8mb4")
                        .HasComment("will contain HEX code e.g. #5175bc.")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SchoolDate")
                        .HasColumnName("school_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<bool?>("SystemWideEvent")
                        .HasColumnName("system_wide_event")
                        .HasColumnType("tinyint(1)")
                        .HasComment("event applicable to all calenders within academic year");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("VisibleToMembershipId")
                        .HasColumnName("visible_to_membership_id")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasComment("membershipids separated by comma")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "CalendarId", "EventId");

                    b.ToTable("calendar_events");
                });

            modelBuilder.Entity("opensis.data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("StateId")
                        .HasColumnName("stateid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("city");
                });

            modelBuilder.Entity("opensis.data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnName("countrycode")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "AS",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 5,
                            CountryCode = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 6,
                            CountryCode = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 7,
                            CountryCode = "AI",
                            Name = "Anguilla"
                        },
                        new
                        {
                            Id = 8,
                            CountryCode = "AQ",
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 9,
                            CountryCode = "AG",
                            Name = "Antigua And Barbuda"
                        },
                        new
                        {
                            Id = 10,
                            CountryCode = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 11,
                            CountryCode = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 12,
                            CountryCode = "AW",
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 13,
                            CountryCode = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 14,
                            CountryCode = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 15,
                            CountryCode = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 16,
                            CountryCode = "BS",
                            Name = "Bahamas The"
                        },
                        new
                        {
                            Id = 17,
                            CountryCode = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 18,
                            CountryCode = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 19,
                            CountryCode = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 20,
                            CountryCode = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 21,
                            CountryCode = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 22,
                            CountryCode = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 23,
                            CountryCode = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 24,
                            CountryCode = "BM",
                            Name = "Bermuda"
                        },
                        new
                        {
                            Id = 25,
                            CountryCode = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 26,
                            CountryCode = "BO",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 27,
                            CountryCode = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 28,
                            CountryCode = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 29,
                            CountryCode = "BV",
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Id = 30,
                            CountryCode = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 31,
                            CountryCode = "IO",
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            Id = 32,
                            CountryCode = "BN",
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = 33,
                            CountryCode = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 34,
                            CountryCode = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 35,
                            CountryCode = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 36,
                            CountryCode = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 37,
                            CountryCode = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 38,
                            CountryCode = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 39,
                            CountryCode = "CV",
                            Name = "Cape Verde"
                        },
                        new
                        {
                            Id = 40,
                            CountryCode = "KY",
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            Id = 41,
                            CountryCode = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = 42,
                            CountryCode = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 43,
                            CountryCode = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 44,
                            CountryCode = "CN",
                            Name = "China"
                        },
                        new
                        {
                            Id = 45,
                            CountryCode = "CX",
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Id = 46,
                            CountryCode = "CC",
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            Id = 47,
                            CountryCode = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 48,
                            CountryCode = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = 49,
                            CountryCode = "CG",
                            Name = "Congo"
                        },
                        new
                        {
                            Id = 50,
                            CountryCode = "CD",
                            Name = "Congo The Democratic Republic Of The"
                        },
                        new
                        {
                            Id = 51,
                            CountryCode = "CK",
                            Name = "Cook Islands"
                        },
                        new
                        {
                            Id = 52,
                            CountryCode = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 53,
                            CountryCode = "CI",
                            Name = "Cote D'Ivoire (Ivory Coast)"
                        },
                        new
                        {
                            Id = 54,
                            CountryCode = "HR",
                            Name = "Croatia (Hrvatska)"
                        },
                        new
                        {
                            Id = 55,
                            CountryCode = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 56,
                            CountryCode = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 57,
                            CountryCode = "CZ",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 58,
                            CountryCode = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 59,
                            CountryCode = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 60,
                            CountryCode = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 61,
                            CountryCode = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 62,
                            CountryCode = "TP",
                            Name = "East Timor"
                        },
                        new
                        {
                            Id = 63,
                            CountryCode = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 64,
                            CountryCode = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 65,
                            CountryCode = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 66,
                            CountryCode = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 67,
                            CountryCode = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 68,
                            CountryCode = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 69,
                            CountryCode = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 70,
                            CountryCode = "XA",
                            Name = "External Territories of Australia"
                        },
                        new
                        {
                            Id = 71,
                            CountryCode = "FK",
                            Name = "Falkland Islands"
                        },
                        new
                        {
                            Id = 72,
                            CountryCode = "FO",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            Id = 73,
                            CountryCode = "FJ",
                            Name = "Fiji Islands"
                        },
                        new
                        {
                            Id = 74,
                            CountryCode = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 75,
                            CountryCode = "FR",
                            Name = "France"
                        },
                        new
                        {
                            Id = 76,
                            CountryCode = "GF",
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = 77,
                            CountryCode = "PF",
                            Name = "French Polynesia"
                        },
                        new
                        {
                            Id = 78,
                            CountryCode = "TF",
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            Id = 79,
                            CountryCode = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 80,
                            CountryCode = "GM",
                            Name = "Gambia The"
                        },
                        new
                        {
                            Id = 81,
                            CountryCode = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 82,
                            CountryCode = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 83,
                            CountryCode = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 84,
                            CountryCode = "GI",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 85,
                            CountryCode = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 86,
                            CountryCode = "GL",
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = 87,
                            CountryCode = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 88,
                            CountryCode = "GP",
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = 89,
                            CountryCode = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 90,
                            CountryCode = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 91,
                            CountryCode = "XU",
                            Name = "Guernsey and Alderney"
                        },
                        new
                        {
                            Id = 92,
                            CountryCode = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 93,
                            CountryCode = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 94,
                            CountryCode = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 95,
                            CountryCode = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 96,
                            CountryCode = "HM",
                            Name = "Heard and McDonald Islands"
                        },
                        new
                        {
                            Id = 97,
                            CountryCode = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 98,
                            CountryCode = "HK",
                            Name = "Hong Kong S.A.R."
                        },
                        new
                        {
                            Id = 99,
                            CountryCode = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 100,
                            CountryCode = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 101,
                            CountryCode = "IN",
                            Name = "India"
                        },
                        new
                        {
                            Id = 102,
                            CountryCode = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 103,
                            CountryCode = "IR",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 104,
                            CountryCode = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 105,
                            CountryCode = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 106,
                            CountryCode = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 107,
                            CountryCode = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 108,
                            CountryCode = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 109,
                            CountryCode = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 110,
                            CountryCode = "XJ",
                            Name = "Jersey"
                        },
                        new
                        {
                            Id = 111,
                            CountryCode = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 112,
                            CountryCode = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 113,
                            CountryCode = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 114,
                            CountryCode = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 115,
                            CountryCode = "KP",
                            Name = "Korea North"
                        },
                        new
                        {
                            Id = 116,
                            CountryCode = "KR",
                            Name = "Korea South"
                        },
                        new
                        {
                            Id = 117,
                            CountryCode = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 118,
                            CountryCode = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 119,
                            CountryCode = "LA",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = 120,
                            CountryCode = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 121,
                            CountryCode = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 122,
                            CountryCode = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 123,
                            CountryCode = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 124,
                            CountryCode = "LY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 125,
                            CountryCode = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 126,
                            CountryCode = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 127,
                            CountryCode = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 128,
                            CountryCode = "MO",
                            Name = "Macau S.A.R."
                        },
                        new
                        {
                            Id = 129,
                            CountryCode = "MK",
                            Name = "Macedonia"
                        },
                        new
                        {
                            Id = 130,
                            CountryCode = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 131,
                            CountryCode = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 132,
                            CountryCode = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 133,
                            CountryCode = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 134,
                            CountryCode = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 135,
                            CountryCode = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 136,
                            CountryCode = "XM",
                            Name = "Man (Isle of)"
                        },
                        new
                        {
                            Id = 137,
                            CountryCode = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 138,
                            CountryCode = "MQ",
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = 139,
                            CountryCode = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 140,
                            CountryCode = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 141,
                            CountryCode = "YT",
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 142,
                            CountryCode = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 143,
                            CountryCode = "FM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = 144,
                            CountryCode = "MD",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = 145,
                            CountryCode = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 146,
                            CountryCode = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 147,
                            CountryCode = "MS",
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = 148,
                            CountryCode = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 149,
                            CountryCode = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 150,
                            CountryCode = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 151,
                            CountryCode = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 152,
                            CountryCode = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 153,
                            CountryCode = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 154,
                            CountryCode = "AN",
                            Name = "Netherlands Antilles"
                        },
                        new
                        {
                            Id = 155,
                            CountryCode = "NL",
                            Name = "Netherlands The"
                        },
                        new
                        {
                            Id = 156,
                            CountryCode = "NC",
                            Name = "New Caledonia"
                        },
                        new
                        {
                            Id = 157,
                            CountryCode = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 158,
                            CountryCode = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 159,
                            CountryCode = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 160,
                            CountryCode = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 161,
                            CountryCode = "NU",
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 162,
                            CountryCode = "NF",
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Id = 163,
                            CountryCode = "MP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = 164,
                            CountryCode = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 165,
                            CountryCode = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 166,
                            CountryCode = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 167,
                            CountryCode = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 168,
                            CountryCode = "PS",
                            Name = "Palestinian Territory Occupied"
                        },
                        new
                        {
                            Id = 169,
                            CountryCode = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 170,
                            CountryCode = "PG",
                            Name = "Papua new Guinea"
                        },
                        new
                        {
                            Id = 171,
                            CountryCode = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 172,
                            CountryCode = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 173,
                            CountryCode = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 174,
                            CountryCode = "PN",
                            Name = "Pitcairn Island"
                        },
                        new
                        {
                            Id = 175,
                            CountryCode = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 176,
                            CountryCode = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 177,
                            CountryCode = "PR",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 178,
                            CountryCode = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 179,
                            CountryCode = "RE",
                            Name = "Reunion"
                        },
                        new
                        {
                            Id = 180,
                            CountryCode = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 181,
                            CountryCode = "RU",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 182,
                            CountryCode = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 183,
                            CountryCode = "SH",
                            Name = "Saint Helena"
                        },
                        new
                        {
                            Id = 184,
                            CountryCode = "KN",
                            Name = "Saint Kitts And Nevis"
                        },
                        new
                        {
                            Id = 185,
                            CountryCode = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 186,
                            CountryCode = "PM",
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 187,
                            CountryCode = "VC",
                            Name = "Saint Vincent And The Grenadines"
                        },
                        new
                        {
                            Id = 188,
                            CountryCode = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 189,
                            CountryCode = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 190,
                            CountryCode = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 191,
                            CountryCode = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 192,
                            CountryCode = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 193,
                            CountryCode = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 194,
                            CountryCode = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 195,
                            CountryCode = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 196,
                            CountryCode = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 197,
                            CountryCode = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 198,
                            CountryCode = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 199,
                            CountryCode = "XG",
                            Name = "Smaller Territories of the UK"
                        },
                        new
                        {
                            Id = 200,
                            CountryCode = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 201,
                            CountryCode = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 202,
                            CountryCode = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 203,
                            CountryCode = "GS",
                            Name = "South Georgia"
                        },
                        new
                        {
                            Id = 204,
                            CountryCode = "SS",
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 205,
                            CountryCode = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 206,
                            CountryCode = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 207,
                            CountryCode = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 208,
                            CountryCode = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 209,
                            CountryCode = "SJ",
                            Name = "Svalbard And Jan Mayen Islands"
                        },
                        new
                        {
                            Id = 210,
                            CountryCode = "SZ",
                            Name = "Swaziland"
                        },
                        new
                        {
                            Id = 211,
                            CountryCode = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 212,
                            CountryCode = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 213,
                            CountryCode = "SY",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = 214,
                            CountryCode = "TW",
                            Name = "Taiwan"
                        },
                        new
                        {
                            Id = 215,
                            CountryCode = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 216,
                            CountryCode = "TZ",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = 217,
                            CountryCode = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 218,
                            CountryCode = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 219,
                            CountryCode = "TK",
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 220,
                            CountryCode = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 221,
                            CountryCode = "TT",
                            Name = "Trinidad And Tobago"
                        },
                        new
                        {
                            Id = 222,
                            CountryCode = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 223,
                            CountryCode = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 224,
                            CountryCode = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 225,
                            CountryCode = "TC",
                            Name = "Turks And Caicos Islands"
                        },
                        new
                        {
                            Id = 226,
                            CountryCode = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 227,
                            CountryCode = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 228,
                            CountryCode = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 229,
                            CountryCode = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 230,
                            CountryCode = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 231,
                            CountryCode = "US",
                            Name = "United States"
                        },
                        new
                        {
                            Id = 232,
                            CountryCode = "UM",
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            Id = 233,
                            CountryCode = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 234,
                            CountryCode = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 235,
                            CountryCode = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 236,
                            CountryCode = "VA",
                            Name = "Vatican City State (Holy See)"
                        },
                        new
                        {
                            Id = 237,
                            CountryCode = "VE",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 238,
                            CountryCode = "VN",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = 239,
                            CountryCode = "VG",
                            Name = "Virgin Islands (British)"
                        },
                        new
                        {
                            Id = 240,
                            CountryCode = "VI",
                            Name = "Virgin Islands (US)"
                        },
                        new
                        {
                            Id = 241,
                            CountryCode = "WF",
                            Name = "Wallis And Futuna Islands"
                        },
                        new
                        {
                            Id = 242,
                            CountryCode = "EH",
                            Name = "Western Sahara"
                        },
                        new
                        {
                            Id = 243,
                            CountryCode = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 244,
                            CountryCode = "YU",
                            Name = "Yugoslavia"
                        },
                        new
                        {
                            Id = 245,
                            CountryCode = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 246,
                            CountryCode = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("opensis.data.Models.Course", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnName("course_id")
                        .HasColumnType("int");

                    b.Property<string>("CourseCategory")
                        .HasColumnName("course_category")
                        .HasColumnType("varchar(8) CHARACTER SET utf8mb4")
                        .HasComment("'Core' or 'Elective'")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("CourseDescription")
                        .HasColumnName("course_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CourseGradeLevel")
                        .HasColumnName("course_grade_level")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CourseProgram")
                        .HasColumnName("course_program")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CourseShortName")
                        .HasColumnName("course_short_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CourseSubject")
                        .HasColumnName("course_subject")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CourseTitle")
                        .HasColumnName("course_title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<double?>("CreditHours")
                        .HasColumnName("credit_hours")
                        .HasColumnType("double");

                    b.Property<bool?>("IsCourseActive")
                        .HasColumnName("is_course_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Standard")
                        .HasColumnName("standard")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasComment("choose between US Common Core library or school specific standards library.")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StandardRefNo")
                        .HasColumnName("standard_ref_no")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "CourseId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("opensis.data.Models.CourseBlockSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnName("course_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseSectionId")
                        .HasColumnName("course_section_id")
                        .HasColumnType("int");

                    b.Property<int>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("int");

                    b.Property<int?>("BlockId")
                        .HasColumnName("block_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<int>("GradeScaleId")
                        .HasColumnName("grade_scale_id")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodId")
                        .HasColumnName("period_id")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("int");

                    b.Property<bool?>("TakeAttendance")
                        .HasColumnName("take_attendance")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "Serial")
                        .HasName("PK_course_block_schedule_1");

                    b.HasIndex("TenantId", "SchoolId", "RoomId");

                    b.HasIndex("TenantId", "SchoolId", "BlockId", "PeriodId");

                    b.ToTable("course_block_schedule");
                });

            modelBuilder.Entity("opensis.data.Models.CourseCalendarSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnName("course_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseSectionId")
                        .HasColumnName("course_section_id")
                        .HasColumnType("int");

                    b.Property<int>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("int");

                    b.Property<int?>("BlockId")
                        .HasColumnName("block_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<int>("GradeScaleId")
                        .HasColumnName("grade_scale_id")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodId")
                        .HasColumnName("period_id")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("int");

                    b.Property<bool?>("TakeAttendance")
                        .HasColumnName("take_attendance")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "Serial")
                        .HasName("PK_course_calendar_schedule_1");

                    b.HasIndex("TenantId", "SchoolId", "RoomId");

                    b.HasIndex("TenantId", "SchoolId", "BlockId", "PeriodId");

                    b.ToTable("course_calendar_schedule");
                });

            modelBuilder.Entity("opensis.data.Models.CourseFixedSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnName("course_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseSectionId")
                        .HasColumnName("course_section_id")
                        .HasColumnType("int");

                    b.Property<int>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("int");

                    b.Property<int?>("BlockId")
                        .HasColumnName("block_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<int>("GradeScaleId")
                        .HasColumnName("grade_scale_id")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodId")
                        .HasColumnName("period_id")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "Serial")
                        .HasName("PK_course_fixed_schedule_1");

                    b.HasIndex("TenantId", "SchoolId", "RoomId");

                    b.HasIndex("TenantId", "SchoolId", "BlockId", "PeriodId");

                    b.ToTable("course_fixed_schedule");
                });

            modelBuilder.Entity("opensis.data.Models.CourseSection", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnName("course_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseSectionId")
                        .HasColumnName("course_section_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("AffectsClassRank")
                        .HasColumnName("affects_class_rank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AffectsHonorRoll")
                        .HasColumnName("affects_honor_roll")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("AttendanceCategoryId")
                        .HasColumnName("attendance_category_id")
                        .HasColumnType("int");

                    b.Property<bool?>("AttendanceTaken")
                        .HasColumnName("attendance_taken")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CalendarId")
                        .HasColumnName("calendar_id")
                        .HasColumnType("int");

                    b.Property<string>("CourseSectionName")
                        .HasColumnName("course_section_name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("CreditHours")
                        .HasColumnName("credit_hours")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<bool?>("DurationBasedOnPeriod")
                        .HasColumnName("duration_based_on_period")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DurationEndDate")
                        .HasColumnName("duration_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DurationStartDate")
                        .HasColumnName("duration_start_date")
                        .HasColumnType("date");

                    b.Property<int>("GradeScaleId")
                        .HasColumnName("grade_scale_id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsWeightedCourse")
                        .HasColumnName("is_weighted_course")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MeetingDays")
                        .HasColumnName("meeting_days")
                        .HasColumnType("varchar(13) CHARACTER SET utf8mb4")
                        .HasComment("Starting Sunday as 0, 0|1|2|3|4|5|6")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<bool?>("OnlineClassRoom")
                        .HasColumnName("online_class_room")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OnlineClassroomPassword")
                        .HasColumnName("online_classroom_password")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("OnlineClassroomUrl")
                        .HasColumnName("online_classroom_url")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("QtrMarkingPeriodId")
                        .HasColumnName("qtr_marking_period_id")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleType")
                        .HasColumnName("schedule_type")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasComment("Fixed Schedule (1) / Variable Schedule (2) / Calendar Days (3) / Bell schedule (4)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int?>("Seats")
                        .HasColumnName("seats")
                        .HasColumnType("int");

                    b.Property<int?>("SmstrMarkingPeriodId")
                        .HasColumnName("smstr_marking_period_id")
                        .HasColumnType("int");

                    b.Property<int?>("StandardGradeScaleId")
                        .HasColumnName("standard_grade_scale_id")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.Property<bool?>("UseStandards")
                        .HasColumnName("use_standards")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("YrMarkingPeriodId")
                        .HasColumnName("yr_marking_period_id")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId")
                        .HasName("PK_course_section_1");

                    b.HasIndex("TenantId", "SchoolId", "AttendanceCategoryId");

                    b.HasIndex("TenantId", "SchoolId", "CalendarId");

                    b.HasIndex("TenantId", "SchoolId", "GradeScaleId");

                    b.HasIndex("TenantId", "SchoolId", "QtrMarkingPeriodId");

                    b.HasIndex("TenantId", "SchoolId", "SmstrMarkingPeriodId");

                    b.HasIndex("TenantId", "SchoolId", "YrMarkingPeriodId");

                    b.ToTable("course_section");
                });

            modelBuilder.Entity("opensis.data.Models.CourseStandard", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnName("course_id")
                        .HasColumnType("int");

                    b.Property<string>("StandardRefNo")
                        .HasColumnName("standard_ref_no")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "StandardRefNo");

                    b.HasIndex("TenantId", "SchoolId", "StandardRefNo");

                    b.ToTable("course_standard");
                });

            modelBuilder.Entity("opensis.data.Models.CourseVariableSchedule", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnName("course_id")
                        .HasColumnType("int");

                    b.Property<int>("CourseSectionId")
                        .HasColumnName("course_section_id")
                        .HasColumnType("int");

                    b.Property<int>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("int");

                    b.Property<int?>("BlockId")
                        .HasColumnName("block_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("Day")
                        .HasColumnName("day")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("GradeScaleId")
                        .HasColumnName("grade_scale_id")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodId")
                        .HasColumnName("period_id")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("int");

                    b.Property<bool?>("TakeAttendance")
                        .HasColumnName("take_attendance")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "CourseId", "CourseSectionId", "Serial")
                        .HasName("PK_course_variable_schedule_1");

                    b.HasIndex("TenantId", "SchoolId", "RoomId");

                    b.HasIndex("TenantId", "SchoolId", "BlockId", "PeriodId");

                    b.ToTable("course_variable_schedule");
                });

            modelBuilder.Entity("opensis.data.Models.CustomFields", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int")
                        .HasComment("Take categoryid from custom_category table");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("int");

                    b.Property<string>("DefaultSelection")
                        .HasColumnName("default_selection")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasComment("default value selection on form load")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Hide")
                        .HasColumnName("hide")
                        .HasColumnType("tinyint(1)")
                        .HasComment("hide the custom field on UI");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnName("last_update")
                        .HasColumnType("datetime");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnName("module")
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasComment("module like \"school\", \"student\" etc.")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool?>("Required")
                        .HasColumnName("required")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Whether value input is required");

                    b.Property<bool?>("Search")
                        .HasColumnName("search")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SelectOptions")
                        .HasColumnName("select_options")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("LOV for dropdown separated by | character.")
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<bool?>("SystemField")
                        .HasColumnName("system_field")
                        .HasColumnType("tinyint(1)")
                        .HasComment("wheher it is applicable throughput all forms");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasComment("Field Name")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasComment("Datatype")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "CategoryId", "FieldId");

                    b.ToTable("custom_fields");
                });

            modelBuilder.Entity("opensis.data.Models.CustomFieldsValue", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnName("target_id")
                        .HasColumnType("int")
                        .HasComment("Target_is school/student/staff id for whom custom field value is entered. For School module it will be always school id.");

                    b.Property<string>("Module")
                        .HasColumnName("module")
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasComment("'Student' | 'School' | 'Staff'")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldTitle")
                        .HasColumnName("custom_field_title")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldType")
                        .HasColumnName("custom_field_type")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasComment("'Select' or 'Text'")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue")
                        .HasColumnName("custom_field_value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("User input value...Textbox->textvalue, Select-->Value separated by '|', Date --> Date in string")
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnName("last_update")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "CategoryId", "FieldId", "TargetId", "Module");

                    b.ToTable("custom_fields_value");
                });

            modelBuilder.Entity("opensis.data.Models.DpdownValuelist", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("LovColumnValue")
                        .IsRequired()
                        .HasColumnName("lov_column_value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("LovName")
                        .IsRequired()
                        .HasColumnName("lov_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "SchoolId");

                    b.ToTable("dpdown_valuelist");
                });

            modelBuilder.Entity("opensis.data.Models.EffortGradeLibraryCategory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("EffortCategoryId")
                        .HasColumnName("effort_category_id")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnName("category_name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "EffortCategoryId")
                        .HasName("PK_effort_category");

                    b.ToTable("effort_grade_library_category");
                });

            modelBuilder.Entity("opensis.data.Models.EffortGradeLibraryCategoryItem", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("EffortCategoryId")
                        .HasColumnName("effort_category_id")
                        .HasColumnType("int");

                    b.Property<int>("EffortItemId")
                        .HasColumnName("effort_item_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("EffortItemTitle")
                        .HasColumnName("effort_item_title")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "EffortCategoryId", "EffortItemId")
                        .HasName("PK_effort_category_item");

                    b.ToTable("effort_grade_library_category_item");
                });

            modelBuilder.Entity("opensis.data.Models.EffortGradeScale", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("EffortGradeScaleId")
                        .HasColumnName("effort_grade_scale_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("GradeScaleComment")
                        .HasColumnName("grade_scale_comment")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("GradeScaleValue")
                        .HasColumnName("grade_scale_value")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "EffortGradeScaleId");

                    b.ToTable("effort_grade_scale");
                });

            modelBuilder.Entity("opensis.data.Models.FieldsCategory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<bool?>("Hide")
                        .HasColumnName("hide")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSystemCategory")
                        .HasColumnName("is_system_category")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnName("last_update")
                        .HasColumnType("datetime");

                    b.Property<string>("Module")
                        .HasColumnName("module")
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasComment("module like \"school\", \"student\" etc.")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool?>("Required")
                        .HasColumnName("required")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Search")
                        .HasColumnName("search")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "CategoryId")
                        .HasName("PK_custom_category");

                    b.ToTable("fields_category");
                });

            modelBuilder.Entity("opensis.data.Models.Grade", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("GradeScaleId")
                        .HasColumnName("grade_scale_id")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnName("grade_id")
                        .HasColumnType("int");

                    b.Property<int?>("Breakoff")
                        .HasColumnName("breakoff")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<decimal?>("UnweightedGpValue")
                        .HasColumnName("unweighted_gp_value")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("WeightedGpValue")
                        .HasColumnName("weighted_gp_value")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("TenantId", "SchoolId", "GradeScaleId", "GradeId");

                    b.ToTable("grade");
                });

            modelBuilder.Entity("opensis.data.Models.GradeEquivalency", b =>
                {
                    b.Property<string>("IscedGradeLevel")
                        .HasColumnName("isced_grade_level")
                        .HasColumnType("varchar(8) CHARACTER SET utf8mb4")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("AgeRange")
                        .HasColumnName("age_range")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("GradeDescription")
                        .HasColumnName("grade_description")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IscedGradeLevel");

                    b.ToTable("grade_equivalency");

                    b.HasData(
                        new
                        {
                            IscedGradeLevel = "ISCED 01",
                            AgeRange = "0-2",
                            GradeDescription = "Early childhood education"
                        },
                        new
                        {
                            IscedGradeLevel = "ISCED 02",
                            AgeRange = "0-2",
                            GradeDescription = "Pre-primary education"
                        },
                        new
                        {
                            IscedGradeLevel = "ISCED 1",
                            AgeRange = "5-7",
                            GradeDescription = "Primary education"
                        },
                        new
                        {
                            IscedGradeLevel = "ISCED 2",
                            AgeRange = "6-10",
                            GradeDescription = "Lower secondary education"
                        },
                        new
                        {
                            IscedGradeLevel = "ISCED 3",
                            AgeRange = "9-12",
                            GradeDescription = "Upper secondary education"
                        },
                        new
                        {
                            IscedGradeLevel = "ISCED 4",
                            AgeRange = "10-11",
                            GradeDescription = "Post-secondary non-tertiary education"
                        },
                        new
                        {
                            IscedGradeLevel = "ISCED 5",
                            AgeRange = "14-16",
                            GradeDescription = "Short-cycle tertiary education"
                        },
                        new
                        {
                            IscedGradeLevel = "ISCED 6",
                            AgeRange = "17-23",
                            GradeDescription = "Bachelor's or equivalent"
                        },
                        new
                        {
                            IscedGradeLevel = "ISCED 7",
                            AgeRange = "21-25",
                            GradeDescription = "Master's or equivalent"
                        },
                        new
                        {
                            IscedGradeLevel = "ISCED 8",
                            AgeRange = "22-28",
                            GradeDescription = "Doctoral or equivalent level"
                        });
                });

            modelBuilder.Entity("opensis.data.Models.GradeScale", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("GradeScaleId")
                        .HasColumnName("grade_scale_id")
                        .HasColumnType("int");

                    b.Property<bool?>("CalculateGpa")
                        .HasColumnName("calculate_gpa")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("GradeScaleComment")
                        .HasColumnName("grade_scale_comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("GradeScaleName")
                        .HasColumnName("grade_scale_name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<decimal?>("GradeScaleValue")
                        .HasColumnName("grade_scale_value")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.Property<bool?>("UseAsStandardGradeScale")
                        .HasColumnName("use_as_standard_grade_scale")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("TenantId", "SchoolId", "GradeScaleId");

                    b.ToTable("grade_scale");
                });

            modelBuilder.Entity("opensis.data.Models.GradeUsStandard", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<string>("StandardRefNo")
                        .HasColumnName("standard_ref_no")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Course")
                        .HasColumnName("course")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("Domain")
                        .HasColumnName("domain")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("GradeLevel")
                        .HasColumnName("grade_level")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("GradeStandardId")
                        .HasColumnName("grade_standard_id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSchoolSpecific")
                        .HasColumnName("is_school_specific")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StandardDetails")
                        .HasColumnName("standard_details")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Topic")
                        .HasColumnName("topic")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "StandardRefNo");

                    b.ToTable("grade_us_standard");
                });

            modelBuilder.Entity("opensis.data.Models.Gradelevels", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnName("grade_id")
                        .HasColumnType("int");

                    b.Property<string>("IscedGradeLevel")
                        .HasColumnName("isced_grade_level")
                        .HasColumnType("varchar(8) CHARACTER SET utf8mb4")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("NextGradeId")
                        .HasColumnName("next_grade_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "GradeId")
                        .HasName("pk_gradelevels");

                    b.HasIndex("IscedGradeLevel");

                    b.ToTable("gradelevels");
                });

            modelBuilder.Entity("opensis.data.Models.HonorRolls", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("HonorRollId")
                        .HasColumnName("honor_roll_id")
                        .HasColumnType("int");

                    b.Property<int?>("Breakoff")
                        .HasColumnName("breakoff")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("HonorRoll")
                        .HasColumnName("honor_roll")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnName("marking_period_id")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "HonorRollId");

                    b.HasIndex("TenantId", "SchoolId", "MarkingPeriodId");

                    b.ToTable("honor_rolls");
                });

            modelBuilder.Entity("opensis.data.Models.Language", b =>
                {
                    b.Property<int>("LangId")
                        .HasColumnName("lang_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("LanguageCode")
                        .HasColumnName("language_code")
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Lcid")
                        .HasColumnName("lcid")
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Locale")
                        .HasColumnName("locale")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("LangId")
                        .HasName("pk_table_language");

                    b.ToTable("language");

                    b.HasData(
                        new
                        {
                            LangId = 1,
                            LanguageCode = "af",
                            Lcid = "af",
                            Locale = "Afrikaans"
                        },
                        new
                        {
                            LangId = 2,
                            LanguageCode = "sq",
                            Lcid = "sq",
                            Locale = "Albanian"
                        },
                        new
                        {
                            LangId = 3,
                            LanguageCode = "am",
                            Lcid = "am",
                            Locale = "Amharic"
                        },
                        new
                        {
                            LangId = 4,
                            LanguageCode = "ar",
                            Lcid = "ar-dz",
                            Locale = "Arabic - Algeria"
                        },
                        new
                        {
                            LangId = 5,
                            LanguageCode = "ar",
                            Lcid = "ar-bh",
                            Locale = "Arabic - Bahrain"
                        },
                        new
                        {
                            LangId = 6,
                            LanguageCode = "ar",
                            Lcid = "ar-eg",
                            Locale = "Arabic - Egypt"
                        },
                        new
                        {
                            LangId = 7,
                            LanguageCode = "ar",
                            Lcid = "ar-iq",
                            Locale = "Arabic - Iraq"
                        },
                        new
                        {
                            LangId = 8,
                            LanguageCode = "ar",
                            Lcid = "ar-jo",
                            Locale = "Arabic - Jordan"
                        },
                        new
                        {
                            LangId = 9,
                            LanguageCode = "ar",
                            Lcid = "ar-kw",
                            Locale = "Arabic - Kuwait"
                        },
                        new
                        {
                            LangId = 10,
                            LanguageCode = "ar",
                            Lcid = "ar-lb",
                            Locale = "Arabic - Lebanon"
                        },
                        new
                        {
                            LangId = 11,
                            LanguageCode = "ar",
                            Lcid = "ar-ly",
                            Locale = "Arabic - Libya"
                        },
                        new
                        {
                            LangId = 12,
                            LanguageCode = "ar",
                            Lcid = "ar-ma",
                            Locale = "Arabic - Morocco"
                        },
                        new
                        {
                            LangId = 13,
                            LanguageCode = "ar",
                            Lcid = "ar-om",
                            Locale = "Arabic - Oman"
                        },
                        new
                        {
                            LangId = 14,
                            LanguageCode = "ar",
                            Lcid = "ar-qa",
                            Locale = "Arabic - Qatar"
                        },
                        new
                        {
                            LangId = 15,
                            LanguageCode = "ar",
                            Lcid = "ar-sa",
                            Locale = "Arabic - Saudi Arabia"
                        },
                        new
                        {
                            LangId = 16,
                            LanguageCode = "ar",
                            Lcid = "ar-sy",
                            Locale = "Arabic - Syria"
                        },
                        new
                        {
                            LangId = 17,
                            LanguageCode = "ar",
                            Lcid = "ar-tn",
                            Locale = "Arabic - Tunisia"
                        },
                        new
                        {
                            LangId = 18,
                            LanguageCode = "ar",
                            Lcid = "ar-ae",
                            Locale = "Arabic - United Arab Emirates"
                        },
                        new
                        {
                            LangId = 19,
                            LanguageCode = "ar",
                            Lcid = "ar-ye",
                            Locale = "Arabic - Yemen"
                        },
                        new
                        {
                            LangId = 20,
                            LanguageCode = "hy",
                            Lcid = "hy",
                            Locale = "Armenian"
                        },
                        new
                        {
                            LangId = 21,
                            LanguageCode = "as",
                            Lcid = "as",
                            Locale = "Assamese"
                        },
                        new
                        {
                            LangId = 22,
                            LanguageCode = "az",
                            Lcid = "az-az",
                            Locale = "Azeri - Cyrillic"
                        },
                        new
                        {
                            LangId = 23,
                            LanguageCode = "az",
                            Lcid = "az-az",
                            Locale = "Azeri - Latin"
                        },
                        new
                        {
                            LangId = 24,
                            LanguageCode = "eu",
                            Lcid = "eu",
                            Locale = "Basque"
                        },
                        new
                        {
                            LangId = 25,
                            LanguageCode = "be",
                            Lcid = "be",
                            Locale = "Belarusian"
                        },
                        new
                        {
                            LangId = 26,
                            LanguageCode = "bn",
                            Lcid = "bn",
                            Locale = "Bengali - Bangladesh"
                        },
                        new
                        {
                            LangId = 27,
                            LanguageCode = "bn",
                            Lcid = "bn",
                            Locale = "Bengali - India"
                        },
                        new
                        {
                            LangId = 28,
                            LanguageCode = "bs",
                            Lcid = "bs",
                            Locale = "Bosnian"
                        },
                        new
                        {
                            LangId = 29,
                            LanguageCode = "bg",
                            Lcid = "bg",
                            Locale = "Bulgarian"
                        },
                        new
                        {
                            LangId = 30,
                            LanguageCode = "my",
                            Lcid = "my",
                            Locale = "Burmese"
                        },
                        new
                        {
                            LangId = 31,
                            LanguageCode = "ca",
                            Lcid = "ca",
                            Locale = "Catalan"
                        },
                        new
                        {
                            LangId = 32,
                            LanguageCode = "zh",
                            Lcid = "zh-cn",
                            Locale = "Chinese - China"
                        },
                        new
                        {
                            LangId = 33,
                            LanguageCode = "zh",
                            Lcid = "zh-hk",
                            Locale = "Chinese - Hong Kong SAR"
                        },
                        new
                        {
                            LangId = 34,
                            LanguageCode = "zh",
                            Lcid = "zh-mo",
                            Locale = "Chinese - Macau SAR"
                        },
                        new
                        {
                            LangId = 35,
                            LanguageCode = "zh",
                            Lcid = "zh-sg",
                            Locale = "Chinese - Singapore"
                        },
                        new
                        {
                            LangId = 36,
                            LanguageCode = "zh",
                            Lcid = "zh-tw",
                            Locale = "Chinese - Taiwan"
                        },
                        new
                        {
                            LangId = 37,
                            LanguageCode = "hr",
                            Lcid = "hr",
                            Locale = "Croatian"
                        },
                        new
                        {
                            LangId = 38,
                            LanguageCode = "cs",
                            Lcid = "cs",
                            Locale = "Czech"
                        },
                        new
                        {
                            LangId = 39,
                            LanguageCode = "da",
                            Lcid = "da",
                            Locale = "Danish"
                        },
                        new
                        {
                            LangId = 40,
                            LanguageCode = "Dhivehi",
                            Lcid = "Maldivian",
                            Locale = "Divehi"
                        },
                        new
                        {
                            LangId = 41,
                            LanguageCode = "nl",
                            Lcid = "nl-be",
                            Locale = "Dutch - Belgium"
                        },
                        new
                        {
                            LangId = 42,
                            LanguageCode = "nl",
                            Lcid = "nl-nl",
                            Locale = "Dutch - Netherlands"
                        },
                        new
                        {
                            LangId = 43,
                            LanguageCode = "en",
                            Lcid = "en-au",
                            Locale = "English - Australia"
                        },
                        new
                        {
                            LangId = 44,
                            LanguageCode = "en",
                            Lcid = "en-bz",
                            Locale = "English - Belize"
                        },
                        new
                        {
                            LangId = 45,
                            LanguageCode = "en",
                            Lcid = "en-ca",
                            Locale = "English - Canada"
                        },
                        new
                        {
                            LangId = 46,
                            LanguageCode = "en",
                            Lcid = "en-cb",
                            Locale = "English - Caribbean"
                        },
                        new
                        {
                            LangId = 47,
                            LanguageCode = "en",
                            Lcid = "en-gb",
                            Locale = "English - Great Britain"
                        },
                        new
                        {
                            LangId = 48,
                            LanguageCode = "en",
                            Lcid = "en-in",
                            Locale = "English - India"
                        },
                        new
                        {
                            LangId = 49,
                            LanguageCode = "en",
                            Lcid = "en-ie",
                            Locale = "English - Ireland"
                        },
                        new
                        {
                            LangId = 50,
                            LanguageCode = "en",
                            Lcid = "en-jm",
                            Locale = "English - Jamaica"
                        },
                        new
                        {
                            LangId = 51,
                            LanguageCode = "en",
                            Lcid = "en-nz",
                            Locale = "English - New Zealand"
                        },
                        new
                        {
                            LangId = 52,
                            LanguageCode = "en",
                            Lcid = "en-ph",
                            Locale = "English - Philippines"
                        },
                        new
                        {
                            LangId = 53,
                            LanguageCode = "en",
                            Lcid = "en-za",
                            Locale = "English - Southern Africa"
                        },
                        new
                        {
                            LangId = 54,
                            LanguageCode = "en",
                            Lcid = "en-tt",
                            Locale = "English - Trinidad"
                        },
                        new
                        {
                            LangId = 55,
                            LanguageCode = "en",
                            Lcid = "en-us",
                            Locale = "English - United States"
                        },
                        new
                        {
                            LangId = 56,
                            LanguageCode = "et",
                            Lcid = "et",
                            Locale = "Estonian"
                        },
                        new
                        {
                            LangId = 57,
                            LanguageCode = "mk",
                            Lcid = "mk",
                            Locale = "FYRO Macedonia"
                        },
                        new
                        {
                            LangId = 58,
                            LanguageCode = "fo",
                            Lcid = "fo",
                            Locale = "Faroese"
                        },
                        new
                        {
                            LangId = 59,
                            LanguageCode = "fa",
                            Lcid = "fa",
                            Locale = "Farsi - Persian"
                        },
                        new
                        {
                            LangId = 60,
                            LanguageCode = "fi",
                            Lcid = "fi",
                            Locale = "Finnish"
                        },
                        new
                        {
                            LangId = 61,
                            LanguageCode = "fr",
                            Lcid = "fr-be",
                            Locale = "French - Belgium"
                        },
                        new
                        {
                            LangId = 62,
                            LanguageCode = "fr",
                            Lcid = "fr-ca",
                            Locale = "French - Canada"
                        },
                        new
                        {
                            LangId = 63,
                            LanguageCode = "fr",
                            Lcid = "fr-fr",
                            Locale = "French - France"
                        },
                        new
                        {
                            LangId = 64,
                            LanguageCode = "fr",
                            Lcid = "fr-lu",
                            Locale = "French - Luxembourg"
                        },
                        new
                        {
                            LangId = 65,
                            LanguageCode = "fr",
                            Lcid = "fr-ch",
                            Locale = "French - Switzerland"
                        },
                        new
                        {
                            LangId = 66,
                            LanguageCode = "gd",
                            Lcid = "gd-ie",
                            Locale = "Gaelic - Ireland"
                        },
                        new
                        {
                            LangId = 67,
                            LanguageCode = "gd",
                            Lcid = "gd",
                            Locale = "Gaelic - Scotland"
                        },
                        new
                        {
                            LangId = 68,
                            LanguageCode = "de",
                            Lcid = "de-at",
                            Locale = "German - Austria"
                        },
                        new
                        {
                            LangId = 69,
                            LanguageCode = "de",
                            Lcid = "de-de",
                            Locale = "German - Germany"
                        },
                        new
                        {
                            LangId = 70,
                            LanguageCode = "de",
                            Lcid = "de-li",
                            Locale = "German - Liechtenstein"
                        },
                        new
                        {
                            LangId = 71,
                            LanguageCode = "de",
                            Lcid = "de-lu",
                            Locale = "German - Luxembourg"
                        },
                        new
                        {
                            LangId = 72,
                            LanguageCode = "de",
                            Lcid = "de-ch",
                            Locale = "German - Switzerland"
                        },
                        new
                        {
                            LangId = 73,
                            LanguageCode = "el",
                            Lcid = "el",
                            Locale = "Greek"
                        },
                        new
                        {
                            LangId = 74,
                            LanguageCode = "gn",
                            Lcid = "gn",
                            Locale = "Guarani - Paraguay"
                        },
                        new
                        {
                            LangId = 75,
                            LanguageCode = "gu",
                            Lcid = "gu",
                            Locale = "Gujarati"
                        },
                        new
                        {
                            LangId = 76,
                            LanguageCode = "he",
                            Lcid = "he",
                            Locale = "Hebrew"
                        },
                        new
                        {
                            LangId = 77,
                            LanguageCode = "hi",
                            Lcid = "hi",
                            Locale = "Hindi"
                        },
                        new
                        {
                            LangId = 78,
                            LanguageCode = "hu",
                            Lcid = "hu",
                            Locale = "Hungarian"
                        },
                        new
                        {
                            LangId = 79,
                            LanguageCode = "is",
                            Lcid = "is",
                            Locale = "Icelandic"
                        },
                        new
                        {
                            LangId = 80,
                            LanguageCode = "id",
                            Lcid = "id",
                            Locale = "Indonesian"
                        },
                        new
                        {
                            LangId = 81,
                            LanguageCode = "it",
                            Lcid = "it-it",
                            Locale = "Italian - Italy"
                        },
                        new
                        {
                            LangId = 82,
                            LanguageCode = "it",
                            Lcid = "it-ch",
                            Locale = "Italian - Switzerland"
                        },
                        new
                        {
                            LangId = 83,
                            LanguageCode = "ja",
                            Lcid = "ja",
                            Locale = "Japanese"
                        },
                        new
                        {
                            LangId = 84,
                            LanguageCode = "kn",
                            Lcid = "kn",
                            Locale = "Kannada"
                        },
                        new
                        {
                            LangId = 85,
                            LanguageCode = "ks",
                            Lcid = "ks",
                            Locale = "Kashmiri"
                        },
                        new
                        {
                            LangId = 86,
                            LanguageCode = "kk",
                            Lcid = "kk",
                            Locale = "Kazakh"
                        },
                        new
                        {
                            LangId = 87,
                            LanguageCode = "km",
                            Lcid = "km",
                            Locale = "Khmer"
                        },
                        new
                        {
                            LangId = 88,
                            LanguageCode = "ko",
                            Lcid = "ko",
                            Locale = "Korean"
                        },
                        new
                        {
                            LangId = 89,
                            LanguageCode = "lo",
                            Lcid = "lo",
                            Locale = "Lao"
                        },
                        new
                        {
                            LangId = 90,
                            LanguageCode = "la",
                            Lcid = "la",
                            Locale = "Latin"
                        },
                        new
                        {
                            LangId = 91,
                            LanguageCode = "lv",
                            Lcid = "lv",
                            Locale = "Latvian"
                        },
                        new
                        {
                            LangId = 92,
                            LanguageCode = "lt",
                            Lcid = "lt",
                            Locale = "Lithuanian"
                        },
                        new
                        {
                            LangId = 93,
                            LanguageCode = "ms",
                            Lcid = "ms-bn",
                            Locale = "Malay - Brunei"
                        },
                        new
                        {
                            LangId = 94,
                            LanguageCode = "ms",
                            Lcid = "ms-my",
                            Locale = "Malay - Malaysia"
                        },
                        new
                        {
                            LangId = 95,
                            LanguageCode = "ml",
                            Lcid = "ml",
                            Locale = "Malayalam"
                        },
                        new
                        {
                            LangId = 96,
                            LanguageCode = "mt",
                            Lcid = "mt",
                            Locale = "Maltese"
                        },
                        new
                        {
                            LangId = 97,
                            LanguageCode = "mi",
                            Lcid = "mi",
                            Locale = "Maori"
                        },
                        new
                        {
                            LangId = 98,
                            LanguageCode = "mr",
                            Lcid = "mr",
                            Locale = "Marathi"
                        },
                        new
                        {
                            LangId = 99,
                            LanguageCode = "mn",
                            Lcid = "mn",
                            Locale = "Mongolian"
                        },
                        new
                        {
                            LangId = 100,
                            LanguageCode = "mn",
                            Lcid = "mn",
                            Locale = "Mongolian"
                        },
                        new
                        {
                            LangId = 101,
                            LanguageCode = "ne",
                            Lcid = "ne",
                            Locale = "Nepali"
                        },
                        new
                        {
                            LangId = 102,
                            LanguageCode = "nb",
                            Lcid = "no-no",
                            Locale = "Norwegian - Bokml"
                        },
                        new
                        {
                            LangId = 103,
                            LanguageCode = "nn",
                            Lcid = "no-no",
                            Locale = "Norwegian - Nynorsk"
                        },
                        new
                        {
                            LangId = 104,
                            LanguageCode = "or",
                            Lcid = "or",
                            Locale = "Oriya"
                        },
                        new
                        {
                            LangId = 105,
                            LanguageCode = "pl",
                            Lcid = "pl",
                            Locale = "Polish"
                        },
                        new
                        {
                            LangId = 106,
                            LanguageCode = "pt",
                            Lcid = "pt-br",
                            Locale = "Portuguese - Brazil"
                        },
                        new
                        {
                            LangId = 107,
                            LanguageCode = "pt",
                            Lcid = "pt-pt",
                            Locale = "Portuguese - Portugal"
                        },
                        new
                        {
                            LangId = 108,
                            LanguageCode = "pa",
                            Lcid = "pa",
                            Locale = "Punjabi"
                        },
                        new
                        {
                            LangId = 109,
                            LanguageCode = "rm",
                            Lcid = "rm",
                            Locale = "Raeto-Romance"
                        },
                        new
                        {
                            LangId = 110,
                            LanguageCode = "ro",
                            Lcid = "ro-mo",
                            Locale = "Romanian - Moldova"
                        },
                        new
                        {
                            LangId = 111,
                            LanguageCode = "ro",
                            Lcid = "ro",
                            Locale = "Romanian - Romania"
                        },
                        new
                        {
                            LangId = 112,
                            LanguageCode = "ru",
                            Lcid = "ru",
                            Locale = "Russian"
                        },
                        new
                        {
                            LangId = 113,
                            LanguageCode = "ru",
                            Lcid = "ru-mo",
                            Locale = "Russian - Moldova"
                        },
                        new
                        {
                            LangId = 114,
                            LanguageCode = "sa",
                            Lcid = "sa",
                            Locale = "Sanskrit"
                        },
                        new
                        {
                            LangId = 115,
                            LanguageCode = "sr",
                            Lcid = "sr-sp",
                            Locale = "Serbian - Cyrillic"
                        },
                        new
                        {
                            LangId = 116,
                            LanguageCode = "sr",
                            Lcid = "sr-sp",
                            Locale = "Serbian - Latin"
                        },
                        new
                        {
                            LangId = 117,
                            LanguageCode = "tn",
                            Lcid = "tn",
                            Locale = "Setsuana"
                        },
                        new
                        {
                            LangId = 118,
                            LanguageCode = "sd",
                            Lcid = "sd",
                            Locale = "Sindhi"
                        },
                        new
                        {
                            LangId = 119,
                            LanguageCode = "Sinhalese",
                            Lcid = "si",
                            Locale = "Sinhala"
                        },
                        new
                        {
                            LangId = 120,
                            LanguageCode = "sk",
                            Lcid = "sk",
                            Locale = "Slovak"
                        },
                        new
                        {
                            LangId = 121,
                            LanguageCode = "sl",
                            Lcid = "sl",
                            Locale = "Slovenian"
                        },
                        new
                        {
                            LangId = 122,
                            LanguageCode = "so",
                            Lcid = "so",
                            Locale = "Somali"
                        },
                        new
                        {
                            LangId = 123,
                            LanguageCode = "sb",
                            Lcid = "sb",
                            Locale = "Sorbian"
                        },
                        new
                        {
                            LangId = 124,
                            LanguageCode = "es",
                            Lcid = "es-ar",
                            Locale = "Spanish - Argentina"
                        },
                        new
                        {
                            LangId = 125,
                            LanguageCode = "es",
                            Lcid = "es-bo",
                            Locale = "Spanish - Bolivia"
                        },
                        new
                        {
                            LangId = 126,
                            LanguageCode = "es",
                            Lcid = "es-cl",
                            Locale = "Spanish - Chile"
                        },
                        new
                        {
                            LangId = 127,
                            LanguageCode = "es",
                            Lcid = "es-co",
                            Locale = "Spanish - Colombia"
                        },
                        new
                        {
                            LangId = 128,
                            LanguageCode = "es",
                            Lcid = "es-cr",
                            Locale = "Spanish - Costa Rica"
                        },
                        new
                        {
                            LangId = 129,
                            LanguageCode = "es",
                            Lcid = "es-do",
                            Locale = "Spanish - Dominican Republic"
                        },
                        new
                        {
                            LangId = 130,
                            LanguageCode = "es",
                            Lcid = "es-ec",
                            Locale = "Spanish - Ecuador"
                        },
                        new
                        {
                            LangId = 131,
                            LanguageCode = "es",
                            Lcid = "es-sv",
                            Locale = "Spanish - El Salvador"
                        },
                        new
                        {
                            LangId = 132,
                            LanguageCode = "es",
                            Lcid = "es-gt",
                            Locale = "Spanish - Guatemala"
                        },
                        new
                        {
                            LangId = 133,
                            LanguageCode = "es",
                            Lcid = "es-hn",
                            Locale = "Spanish - Honduras"
                        },
                        new
                        {
                            LangId = 134,
                            LanguageCode = "es",
                            Lcid = "es-mx",
                            Locale = "Spanish - Mexico"
                        },
                        new
                        {
                            LangId = 135,
                            LanguageCode = "es",
                            Lcid = "es-ni",
                            Locale = "Spanish - Nicaragua"
                        },
                        new
                        {
                            LangId = 136,
                            LanguageCode = "es",
                            Lcid = "es-pa",
                            Locale = "Spanish - Panama"
                        },
                        new
                        {
                            LangId = 137,
                            LanguageCode = "es",
                            Lcid = "es-py",
                            Locale = "Spanish - Paraguay"
                        },
                        new
                        {
                            LangId = 138,
                            LanguageCode = "es",
                            Lcid = "es-pe",
                            Locale = "Spanish - Peru"
                        },
                        new
                        {
                            LangId = 139,
                            LanguageCode = "es",
                            Lcid = "es-pr",
                            Locale = "Spanish - Puerto Rico"
                        },
                        new
                        {
                            LangId = 140,
                            LanguageCode = "es",
                            Lcid = "es-es",
                            Locale = "Spanish - Spain (Traditional)"
                        },
                        new
                        {
                            LangId = 141,
                            LanguageCode = "es",
                            Lcid = "es-uy",
                            Locale = "Spanish - Uruguay"
                        },
                        new
                        {
                            LangId = 142,
                            LanguageCode = "es",
                            Lcid = "es-ve",
                            Locale = "Spanish - Venezuela"
                        },
                        new
                        {
                            LangId = 143,
                            LanguageCode = "sw",
                            Lcid = "sw",
                            Locale = "Swahili"
                        },
                        new
                        {
                            LangId = 144,
                            LanguageCode = "sv",
                            Lcid = "sv-fi",
                            Locale = "Swedish - Finland"
                        },
                        new
                        {
                            LangId = 145,
                            LanguageCode = "sv",
                            Lcid = "sv-se",
                            Locale = "Swedish - Sweden"
                        },
                        new
                        {
                            LangId = 146,
                            LanguageCode = "tg",
                            Lcid = "tg",
                            Locale = "Tajik"
                        },
                        new
                        {
                            LangId = 147,
                            LanguageCode = "ta",
                            Lcid = "ta",
                            Locale = "Tamil"
                        },
                        new
                        {
                            LangId = 148,
                            LanguageCode = "tt",
                            Lcid = "tt",
                            Locale = "Tatar"
                        },
                        new
                        {
                            LangId = 149,
                            LanguageCode = "te",
                            Lcid = "te",
                            Locale = "Telugu"
                        },
                        new
                        {
                            LangId = 150,
                            LanguageCode = "th",
                            Lcid = "th",
                            Locale = "Thai"
                        },
                        new
                        {
                            LangId = 151,
                            LanguageCode = "bo",
                            Lcid = "bo",
                            Locale = "Tibetan"
                        },
                        new
                        {
                            LangId = 152,
                            LanguageCode = "ts",
                            Lcid = "ts",
                            Locale = "Tsonga"
                        },
                        new
                        {
                            LangId = 153,
                            LanguageCode = "tr",
                            Lcid = "tr",
                            Locale = "Turkish"
                        },
                        new
                        {
                            LangId = 154,
                            LanguageCode = "tk",
                            Lcid = "tk",
                            Locale = "Turkmen"
                        },
                        new
                        {
                            LangId = 155,
                            LanguageCode = "uk",
                            Lcid = "uk",
                            Locale = "Ukrainian"
                        },
                        new
                        {
                            LangId = 157,
                            LanguageCode = "ur",
                            Lcid = "ur",
                            Locale = "Urdu"
                        },
                        new
                        {
                            LangId = 158,
                            LanguageCode = "uz",
                            Lcid = "uz-uz",
                            Locale = "Uzbek - Cyrillic"
                        },
                        new
                        {
                            LangId = 159,
                            LanguageCode = "uz",
                            Lcid = "uz-uz",
                            Locale = "Uzbek - Latin"
                        },
                        new
                        {
                            LangId = 160,
                            LanguageCode = "vi",
                            Lcid = "vi",
                            Locale = "Vietnamese"
                        },
                        new
                        {
                            LangId = 161,
                            LanguageCode = "cy",
                            Lcid = "cy",
                            Locale = "Welsh"
                        },
                        new
                        {
                            LangId = 162,
                            LanguageCode = "xh",
                            Lcid = "xh",
                            Locale = "Xhosa"
                        },
                        new
                        {
                            LangId = 163,
                            LanguageCode = "yi",
                            Lcid = "yi",
                            Locale = "Yiddish"
                        },
                        new
                        {
                            LangId = 164,
                            LanguageCode = "zu",
                            Lcid = "zu",
                            Locale = "Zulu"
                        });
                });

            modelBuilder.Entity("opensis.data.Models.Membership", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("MembershipId")
                        .HasColumnName("membership_id")
                        .HasColumnType("int")
                        .HasComment("can be considered as profileid of Opensis1");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSuperadmin")
                        .HasColumnName("is_superadmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSystem")
                        .HasColumnName("is_system")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnName("profile")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasComment("E.g. admin,student,teacher")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "MembershipId")
                        .HasName("pk_table_membership_1");

                    b.ToTable("membership");
                });

            modelBuilder.Entity("opensis.data.Models.Notice", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("NoticeId")
                        .HasColumnName("notice_id")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("created_time")
                        .HasColumnType("datetime");

                    b.Property<bool>("Isactive")
                        .HasColumnName("isactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TargetMembershipIds")
                        .IsRequired()
                        .HasColumnName("target_membership_ids")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasComment("Signifies group of user for whom notice is visible. to be saved as comma separated values. if user's membership_id falls in any of the value, he can see the notice.")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnName("valid_from")
                        .HasColumnType("date");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnName("valid_to")
                        .HasColumnType("date");

                    b.HasKey("TenantId", "SchoolId", "NoticeId")
                        .HasName("pk_table_notice");

                    b.ToTable("notice");
                });

            modelBuilder.Entity("opensis.data.Models.ParentAddress", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnName("student_id")
                        .HasColumnType("int");

                    b.Property<string>("AddressLineOne")
                        .HasColumnName("address_line_one")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("AddressLineTwo")
                        .HasColumnName("address_line_two")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("StudentAddressSame")
                        .HasColumnName("student_address_same")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "ParentId", "StudentId")
                        .HasName("PK_parent_address_1");

                    b.ToTable("parent_address");
                });

            modelBuilder.Entity("opensis.data.Models.ParentAssociationship", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnName("student_id")
                        .HasColumnType("int");

                    b.Property<bool>("Associationship")
                        .HasColumnName("associationship")
                        .HasColumnType("tinyint(1)")
                        .HasComment("tenantid#schoolid#studentid | tenantid#schoolid#studentid | ....");

                    b.Property<string>("ContactType")
                        .HasColumnName("contact_type")
                        .HasColumnType("varchar(9) CHARACTER SET utf8mb4")
                        .HasComment("Primary | Secondary | Other")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<bool?>("IsCustodian")
                        .HasColumnName("is_custodian")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Relationship")
                        .HasColumnName("relationship")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "ParentId", "StudentId");

                    b.ToTable("parent_associationship");
                });

            modelBuilder.Entity("opensis.data.Models.ParentInfo", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("int");

                    b.Property<bool?>("BusDropoff")
                        .HasColumnName("bus_dropoff")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BusNo")
                        .HasColumnName("bus_No")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<bool?>("BusPickup")
                        .HasColumnName("bus_pickup")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HomePhone")
                        .HasColumnName("home_phone")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool>("IsPortalUser")
                        .HasColumnName("is_portal_user")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LoginEmail")
                        .HasColumnName("login_email")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasComment("emailaddress mapped to user_master")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Middlename")
                        .HasColumnName("middlename")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<Guid>("ParentGuid")
                        .HasColumnName("parent_guid")
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("ParentPhoto")
                        .HasColumnName("parent_photo")
                        .HasColumnType("longblob");

                    b.Property<string>("PersonalEmail")
                        .HasColumnName("personal_email")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Salutation")
                        .HasColumnName("salutation")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Suffix")
                        .HasColumnName("suffix")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserProfile")
                        .HasColumnName("user_profile")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WorkEmail")
                        .HasColumnName("work_email")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("WorkPhone")
                        .HasColumnName("work_phone")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "ParentId")
                        .HasName("PK_parent_info_1");

                    b.ToTable("parent_info");
                });

            modelBuilder.Entity("opensis.data.Models.PermissionCategory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("PermissionCategoryId")
                        .HasColumnName("permission_category_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("EnableAdd")
                        .HasColumnName("enable_add")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("EnableDelete")
                        .HasColumnName("enable_delete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("EnableEdit")
                        .HasColumnName("enable_edit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("EnableView")
                        .HasColumnName("enable_view")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PermissionCategoryName")
                        .HasColumnName("permission_category_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("PermissionGroupId")
                        .HasColumnName("permission_group_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortCode")
                        .HasColumnName("short_code")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TenantId", "SchoolId", "PermissionCategoryId")
                        .HasName("PK_permission_category_1");

                    b.HasIndex("TenantId", "SchoolId", "PermissionGroupId");

                    b.ToTable("permission_category");
                });

            modelBuilder.Entity("opensis.data.Models.PermissionGroup", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnName("permission_group_id")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnName("active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BadgeType")
                        .HasColumnName("badgeType")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BadgeValue")
                        .HasColumnName("badgeValue")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IconType")
                        .HasColumnName("icon_type")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSystem")
                        .HasColumnName("is_system")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PermissionGroupName")
                        .HasColumnName("permission_group_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "PermissionGroupId");

                    b.ToTable("permission_group");
                });

            modelBuilder.Entity("opensis.data.Models.PermissionSubcategory", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("PermissionSubcategoryId")
                        .HasColumnName("permission_subcategory_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<bool?>("EnableAdd")
                        .HasColumnName("enable_add")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("EnableDelete")
                        .HasColumnName("enable_delete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("EnableEdit")
                        .HasColumnName("enable_edit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("EnableView")
                        .HasColumnName("enable_view")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("PermissionCategoryId")
                        .HasColumnName("permission_category_id")
                        .HasColumnType("int");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnName("permission_group_id")
                        .HasColumnType("int");

                    b.Property<string>("PermissionSubcategoryName")
                        .HasColumnName("permission_subcategory_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShortCode")
                        .HasColumnName("short_code")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "PermissionSubcategoryId")
                        .HasName("PK_permission_subcategory_1");

                    b.HasIndex("TenantId", "SchoolId", "PermissionCategoryId");

                    b.ToTable("permission_subcategory");
                });

            modelBuilder.Entity("opensis.data.Models.Plans", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnName("plan_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("Features")
                        .HasColumnName("features")
                        .HasColumnType("longblob");

                    b.Property<int?>("MaxApiChecks")
                        .HasColumnName("max_api_checks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "PlanId")
                        .HasName("pk_table_plans");

                    b.ToTable("plans");
                });

            modelBuilder.Entity("opensis.data.Models.Programs", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnName("program_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("ProgramName")
                        .HasColumnName("program_name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "ProgramId");

                    b.ToTable("programs");
                });

            modelBuilder.Entity("opensis.data.Models.ProgressPeriods", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnName("marking_period_id")
                        .HasColumnType("int");

                    b.Property<decimal>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<int>("QuarterId")
                        .HasColumnName("quarter_id")
                        .HasColumnType("int");

                    b.Property<bool?>("DoesComments")
                        .HasColumnName("does_comments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DoesExam")
                        .HasColumnName("does_exam")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnName("does_grades")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnName("post_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnName("post_start_date")
                        .HasColumnType("date");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId", "AcademicYear", "QuarterId")
                        .HasName("pk_table_progress_periods");

                    b.HasIndex("TenantId", "SchoolId", "QuarterId");

                    b.ToTable("progress_periods");
                });

            modelBuilder.Entity("opensis.data.Models.Quarters", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnName("marking_period_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("DoesComments")
                        .HasColumnName("does_comments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DoesExam")
                        .HasColumnName("does_exam")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnName("does_grades")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnName("post_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnName("post_start_date")
                        .HasColumnType("date");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<int?>("SemesterId")
                        .HasColumnName("semester_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasName("pk_table_quarters");

                    b.HasIndex("TenantId", "SchoolId", "SemesterId");

                    b.ToTable("quarters");
                });

            modelBuilder.Entity("opensis.data.Models.ReleaseNumber", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<string>("ReleaseNumber1")
                        .HasColumnName("release_number")
                        .HasColumnType("varchar(9) CHARACTER SET utf8mb4")
                        .HasComment("999.99.99")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnName("release_date")
                        .HasColumnType("date");

                    b.HasKey("TenantId", "SchoolId", "ReleaseNumber1");

                    b.ToTable("release_number");
                });

            modelBuilder.Entity("opensis.data.Models.RolePermission", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("RolePermissionId")
                        .HasColumnName("role_permission_id")
                        .HasColumnType("int");

                    b.Property<bool?>("CanAdd")
                        .HasColumnName("can_add")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("CanDelete")
                        .HasColumnName("can_delete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("CanEdit")
                        .HasColumnName("can_edit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("CanView")
                        .HasColumnName("can_view")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MembershipId")
                        .HasColumnName("membership_id")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionCategoryId")
                        .HasColumnName("permission_category_id")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionGroupId")
                        .HasColumnName("permission_group_id")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionSubcategoryId")
                        .HasColumnName("permission_subcategory_id")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TenantId", "SchoolId", "RolePermissionId");

                    b.HasIndex("TenantId", "SchoolId", "MembershipId");

                    b.HasIndex("TenantId", "SchoolId", "PermissionCategoryId");

                    b.HasIndex("TenantId", "SchoolId", "PermissionGroupId");

                    b.HasIndex("TenantId", "SchoolId", "PermissionSubcategoryId");

                    b.ToTable("role_permission");
                });

            modelBuilder.Entity("opensis.data.Models.Rooms", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnName("capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("isactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "RoomId")
                        .HasName("pk_table_rooms");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolCalendars", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("CalenderId")
                        .HasColumnName("calender_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<string>("Days")
                        .HasColumnName("days")
                        .HasColumnType("varchar(7) CHARACTER SET utf8mb4")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<bool?>("DefaultCalender")
                        .HasColumnName("default_calender")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("VisibleToMembershipId")
                        .HasColumnName("visible_to_membership_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "CalenderId")
                        .HasName("pk_table_school_calendars");

                    b.ToTable("school_calendars");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Affiliation")
                        .HasColumnName("affiliation")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Associations")
                        .HasColumnName("associations")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("CommonToiletAccessibility")
                        .HasColumnName("common_toilet_accessibility")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("ComonToiletType")
                        .HasColumnName("comon_toilet_type")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<bool?>("CurrentlyAvailable")
                        .HasColumnName("currently_available")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DateSchoolClosed")
                        .HasColumnName("date_school_closed")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateSchoolOpened")
                        .HasColumnName("date_school_opened")
                        .HasColumnType("date");

                    b.Property<bool?>("Electricity")
                        .HasColumnName("electricity")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Facebook")
                        .HasColumnName("facebook")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("char(20) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.Property<string>("FemaleToiletAccessibility")
                        .HasColumnName("female_toilet_accessibility")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("FemaleToiletType")
                        .HasColumnName("female_toilet_type")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("char(15) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<bool?>("HandwashingAvailable")
                        .HasColumnName("handwashing_available")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HighestGradeLevel")
                        .HasColumnName("highest_grade_level")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("HygeneEducation")
                        .HasColumnName("hygene_education")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("Instagram")
                        .HasColumnName("instagram")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<bool?>("Internet")
                        .HasColumnName("internet")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LinkedIn")
                        .HasColumnName("linkedin")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Locale")
                        .HasColumnName("locale")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("LowestGradeLevel")
                        .HasColumnName("lowest_grade_level")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("MainSourceOfDrinkingWater")
                        .HasColumnName("main_source_of_drinking_water")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("MaleToiletAccessibility")
                        .HasColumnName("male_toilet_accessibility")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("MaleToiletType")
                        .HasColumnName("male_toilet_type")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("NameOfAssistantPrincipal")
                        .HasColumnName("name_of_assistant_principal")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("NameOfPrincipal")
                        .HasColumnName("name_of_principal")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<bool?>("RunningWater")
                        .HasColumnName("running_water")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("SchoolLogo")
                        .HasColumnName("school_logo")
                        .HasColumnType("longblob");

                    b.Property<bool?>("SoapAndWaterAvailable")
                        .HasColumnName("soap_and_water_available")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Telephone")
                        .HasColumnName("telephone")
                        .HasColumnType("char(30) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<short?>("TotalCommonToilets")
                        .HasColumnName("total_common_toilets")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotalCommonToiletsUsable")
                        .HasColumnName("total_common_toilets_usable")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotalFemaleToilets")
                        .HasColumnName("total_female_toilets")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotalFemaleToiletsUsable")
                        .HasColumnName("total_female_toilets_usable")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotalMaleToilets")
                        .HasColumnName("total_male_toilets")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotalMaleToiletsUsable")
                        .HasColumnName("total_male_toilets_usable")
                        .HasColumnType("smallint");

                    b.Property<string>("Twitter")
                        .HasColumnName("twitter")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("char(150) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(150);

                    b.Property<string>("Youtube")
                        .HasColumnName("youtube")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "SchoolId");

                    b.ToTable("school_detail");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<string>("AlternateName")
                        .HasColumnName("alternate_name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("County")
                        .HasColumnName("county")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CurrentPeriodEnds")
                        .HasColumnName("current_period_ends")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModifed")
                        .HasColumnName("date_modifed")
                        .HasColumnType("datetime");

                    b.Property<string>("District")
                        .HasColumnName("district")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Division")
                        .HasColumnName("division")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Features")
                        .HasColumnName("features")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<double?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double");

                    b.Property<double?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double");

                    b.Property<int?>("MaxApiChecks")
                        .HasColumnName("max_api_checks")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PlanId")
                        .HasColumnName("plan_id")
                        .HasColumnType("int");

                    b.Property<string>("SchoolAltId")
                        .HasColumnName("school_alt_id")
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("SchoolClassification")
                        .HasColumnName("school_classification")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("SchoolDistrictId")
                        .HasColumnName("school_district_id")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<Guid>("SchoolGuid")
                        .HasColumnName("school_guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("SchoolInternalId")
                        .HasColumnName("school_internal_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SchoolLevel")
                        .HasColumnName("school_level")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("SchoolName")
                        .HasColumnName("school_name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("SchoolStateId")
                        .HasColumnName("school_state_id")
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StreetAddress1")
                        .HasColumnName("street_address_1")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("StreetAddress2")
                        .HasColumnName("street_address_2")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("TenantId", "SchoolId")
                        .HasName("pk_table_school_master");

                    b.HasIndex("TenantId", "SchoolId", "PlanId");

                    b.ToTable("school_master");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolPeriodsObsolete", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnName("period_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("Attendance")
                        .HasColumnName("attendance")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Block")
                        .HasColumnName("block")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("time(6)");

                    b.Property<string>("IgnoreScheduling")
                        .HasColumnName("ignore_scheduling")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Length")
                        .HasColumnName("length")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("time(6)");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "PeriodId")
                        .HasName("pk_table_school_periods");

                    b.ToTable("school_periods_obsolete");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolYears", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnName("marking_period_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("DoesComments")
                        .HasColumnName("does_comments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DoesExam")
                        .HasColumnName("does_exam")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnName("does_grades")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnName("post_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnName("post_start_date")
                        .HasColumnType("date");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasName("pk_table_school_years");

                    b.ToTable("school_years");
                });

            modelBuilder.Entity("opensis.data.Models.SearchFilter", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<string>("Module")
                        .HasColumnName("module")
                        .HasColumnType("char(15) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("FilterId")
                        .HasColumnName("filter_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModifed")
                        .HasColumnName("date_modifed")
                        .HasColumnType("datetime");

                    b.Property<string>("Emailaddress")
                        .HasColumnName("emailaddress")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FilterName")
                        .HasColumnName("filter_name")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("JsonList")
                        .HasColumnName("json_list")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "Module", "FilterId");

                    b.HasIndex("TenantId", "SchoolId", "Emailaddress");

                    b.HasIndex("TenantId", "SchoolId", "FilterName")
                        .HasName("IX_search_filter");

                    b.ToTable("search_filter");
                });

            modelBuilder.Entity("opensis.data.Models.Sections", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnName("section_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "SectionId")
                        .HasName("pk_table_sections");

                    b.ToTable("sections");
                });

            modelBuilder.Entity("opensis.data.Models.Semesters", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("MarkingPeriodId")
                        .HasColumnName("marking_period_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("DoesComments")
                        .HasColumnName("does_comments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DoesExam")
                        .HasColumnName("does_exam")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DoesGrades")
                        .HasColumnName("does_grades")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PostEndDate")
                        .HasColumnName("post_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PostStartDate")
                        .HasColumnName("post_start_date")
                        .HasColumnType("date");

                    b.Property<int?>("RolloverId")
                        .HasColumnName("rollover_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("YearId")
                        .HasColumnName("year_id")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasName("pk_table_semesters");

                    b.HasIndex("TenantId", "SchoolId", "YearId");

                    b.ToTable("semesters");
                });

            modelBuilder.Entity("opensis.data.Models.StaffCertificateInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("CertificationCode")
                        .HasColumnName("certification_code")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CertificationDate")
                        .HasColumnName("certification_date")
                        .HasColumnType("date");

                    b.Property<string>("CertificationDescription")
                        .HasColumnName("certification_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<DateTime?>("CertificationExpiryDate")
                        .HasColumnName("certification_expiry_date")
                        .HasColumnType("date");

                    b.Property<string>("CertificationName")
                        .HasColumnName("certification_name")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<bool?>("PrimaryCertification")
                        .HasColumnName("primary_certification")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("int");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "StaffId");

                    b.ToTable("staff_certificate_info");
                });

            modelBuilder.Entity("opensis.data.Models.StaffMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("int");

                    b.Property<string>("AlternateId")
                        .HasColumnName("alternate_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("BusDropoff")
                        .HasColumnName("bus_dropoff")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BusNo")
                        .HasColumnName("bus_no")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<bool?>("BusPickup")
                        .HasColumnName("bus_pickup")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CountryOfBirth")
                        .HasColumnName("country_of_birth")
                        .HasColumnType("int");

                    b.Property<string>("DisabilityDescription")
                        .HasColumnName("disability_description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("date");

                    b.Property<string>("EmergencyEmail")
                        .HasColumnName("emergency_email")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("EmergencyFirstName")
                        .HasColumnName("emergency_first_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmergencyHomePhone")
                        .HasColumnName("emergency_home_phone")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("EmergencyLastName")
                        .HasColumnName("emergency_last_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmergencyMobilePhone")
                        .HasColumnName("emergency_mobile_phone")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("EmergencyWorkPhone")
                        .HasColumnName("emergency_work_phone")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<string>("Ethnicity")
                        .HasColumnName("ethnicity")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Facebook")
                        .HasColumnName("facebook")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("FirstGivenName")
                        .HasColumnName("first_given_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FirstLanguage")
                        .HasColumnName("first_language")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("varchar(6) CHARACTER SET utf8mb4")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressCity")
                        .HasColumnName("home_address_city")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressCountry")
                        .HasColumnName("home_address_country")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressLineOne")
                        .HasColumnName("home_address_line_one")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressLineTwo")
                        .HasColumnName("home_address_line_two")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressState")
                        .HasColumnName("home_address_state")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressZip")
                        .HasColumnName("home_address_zip")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("HomePhone")
                        .HasColumnName("home_phone")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool?>("HomeroomTeacher")
                        .HasColumnName("homeroom_teacher")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Instagram")
                        .HasColumnName("instagram")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("JobTitle")
                        .HasColumnName("job_title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnName("joining_date")
                        .HasColumnType("date");

                    b.Property<string>("LastFamilyName")
                        .HasColumnName("last_family_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnName("last_updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Linkedin")
                        .HasColumnName("linkedin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("LoginEmailAddress")
                        .HasColumnName("login_email_address")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddressCity")
                        .HasColumnName("mailing_address_city")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddressCountry")
                        .HasColumnName("mailing_address_country")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddressLineOne")
                        .HasColumnName("mailing_address_line_one")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddressLineTwo")
                        .HasColumnName("mailing_address_line_two")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool?>("MailingAddressSameToHome")
                        .HasColumnName("mailing_address_same_to_home")
                        .HasColumnType("tinyint(1)")
                        .HasComment("if true, home address will be replicated to mailing");

                    b.Property<string>("MailingAddressState")
                        .HasColumnName("mailing_address_state")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddressZip")
                        .HasColumnName("mailing_address_zip")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("MaritalStatus")
                        .HasColumnName("marital_status")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobile_phone")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("Nationality")
                        .HasColumnName("nationality")
                        .HasColumnType("int");

                    b.Property<string>("OfficePhone")
                        .HasColumnName("office_phone")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("OtherGovtIssuedNumber")
                        .HasColumnName("other_govt_issued_number")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OtherGradeLevelTaught")
                        .HasColumnName("other_grade_level_taught")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OtherSubjectTaught")
                        .HasColumnName("other_subject_taught")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PersonalEmail")
                        .HasColumnName("personal_email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<bool?>("PhysicalDisability")
                        .HasColumnName("physical_disability")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("PortalAccess")
                        .HasColumnName("portal_access")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PreferredName")
                        .HasColumnName("preferred_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PreviousName")
                        .HasColumnName("previous_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PrimaryGradeLevelTaught")
                        .HasColumnName("primary_grade_level_taught")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PrimarySubjectTaught")
                        .HasColumnName("primary_subject_taught")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Profile")
                        .HasColumnName("profile")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Race")
                        .HasColumnName("race")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RelationshipToStaff")
                        .HasColumnName("relationship_to_staff")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Salutation")
                        .HasColumnName("salutation")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SchoolEmail")
                        .HasColumnName("school_email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int?>("SecondLanguage")
                        .HasColumnName("second_language")
                        .HasColumnType("int");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("social_security_number")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("StaffGuid")
                        .HasColumnName("staff_guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("StaffInternalId")
                        .HasColumnName("staff_internal_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte[]>("StaffPhoto")
                        .HasColumnName("staff_photo")
                        .HasColumnType("longblob");

                    b.Property<string>("StateId")
                        .HasColumnName("state_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Suffix")
                        .HasColumnName("suffix")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ThirdLanguage")
                        .HasColumnName("third_language")
                        .HasColumnType("int");

                    b.Property<string>("Twitter")
                        .HasColumnName("twitter")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("Youtube")
                        .HasColumnName("youtube")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.HasKey("TenantId", "StaffId")
                        .HasName("PK_staff_master_1");

                    b.HasIndex("FirstLanguage");

                    b.HasIndex("SecondLanguage");

                    b.HasIndex("ThirdLanguage");

                    b.HasIndex("TenantId", "SchoolId");

                    b.ToTable("staff_master");
                });

            modelBuilder.Entity("opensis.data.Models.StaffSchoolInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<string>("Profile")
                        .HasColumnName("profile")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("SchoolAttachedId")
                        .HasColumnName("school_attached_id")
                        .HasColumnType("int");

                    b.Property<string>("SchoolAttachedName")
                        .HasColumnName("school_attached_name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "StaffId");

                    b.ToTable("staff_school_info");
                });

            modelBuilder.Entity("opensis.data.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnName("countryid")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("state");
                });

            modelBuilder.Entity("opensis.data.Models.StudentComments", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnName("student_id")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnName("comment_id")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "StudentId", "CommentId");

                    b.ToTable("student_comments");
                });

            modelBuilder.Entity("opensis.data.Models.StudentDocuments", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnName("student_id")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnName("document_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileUploaded")
                        .HasColumnName("file_uploaded")
                        .HasColumnType("longblob");

                    b.Property<string>("Filename")
                        .HasColumnName("filename")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Filetype")
                        .HasColumnName("filetype")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UploadedBy")
                        .HasColumnName("uploaded_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UploadedOn")
                        .HasColumnName("uploaded_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "StudentId", "DocumentId");

                    b.ToTable("student_documents");
                });

            modelBuilder.Entity("opensis.data.Models.StudentEnrollment", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnName("student_id")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentId")
                        .HasColumnName("enrollment_id")
                        .HasColumnType("int");

                    b.Property<int?>("CalenderId")
                        .HasColumnName("calender_id")
                        .HasColumnType("int");

                    b.Property<string>("EnrollmentCode")
                        .HasColumnName("enrollment_code")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnName("enrollment_date")
                        .HasColumnType("date");

                    b.Property<string>("ExitCode")
                        .HasColumnName("exit_code")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnName("exit_date")
                        .HasColumnType("date");

                    b.Property<string>("GradeLevelTitle")
                        .HasColumnName("grade_level_title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("RollingOption")
                        .HasColumnName("rolling_option")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasComment("LOV of N/A, Transferred In,Rolled Over,New")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SchoolName")
                        .HasColumnName("school_name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SchoolTransferred")
                        .HasColumnName("school_transferred")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<Guid>("StudentGuid")
                        .HasColumnName("student_guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("TransferredGrade")
                        .HasColumnName("transferred_grade")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("TransferredSchoolId")
                        .HasColumnName("transferred_school_id")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "StudentId", "EnrollmentId");

                    b.HasIndex("TenantId", "SchoolId", "StudentGuid");

                    b.ToTable("student_enrollment");
                });

            modelBuilder.Entity("opensis.data.Models.StudentEnrollmentCode", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentCode")
                        .HasColumnName("enrollment_code")
                        .HasColumnType("int");

                    b.Property<decimal?>("AcademicYear")
                        .HasColumnName("academic_year")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "EnrollmentCode")
                        .HasName("PK_student_enrollment_codes");

                    b.ToTable("student_enrollment_code");
                });

            modelBuilder.Entity("opensis.data.Models.StudentMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnName("student_id")
                        .HasColumnType("int");

                    b.Property<string>("AdmissionNumber")
                        .HasColumnName("admission_number")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AlertDescription")
                        .HasColumnName("alert_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("AlternateId")
                        .HasColumnName("alternate_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Associationship")
                        .HasColumnName("associationship")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("tenantid#schoolid#studentid | tenantid#schoolid#studentid | ....")
                        .IsUnicode(false);

                    b.Property<string>("BusNo")
                        .HasColumnName("bus_no")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("CountryOfBirth")
                        .HasColumnName("country_of_birth")
                        .HasColumnType("int");

                    b.Property<string>("CriticalAlert")
                        .HasColumnName("critical_alert")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Dentist")
                        .HasColumnName("dentist")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DentistPhone")
                        .HasColumnName("dentist_phone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("date");

                    b.Property<bool?>("EconomicDisadvantage")
                        .HasColumnName("economic_disadvantage")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Eligibility504")
                        .HasColumnName("eligibility_504")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EnrollmentType")
                        .HasColumnName("enrollment_type")
                        .HasColumnType("char(8) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasComment("\"Internal\" or \"External\". Default \"Internal\"")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EstimatedGradDate")
                        .HasColumnName("estimated_grad_date")
                        .HasColumnType("date");

                    b.Property<string>("Ethnicity")
                        .HasColumnName("ethnicity")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Facebook")
                        .HasColumnName("facebook")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("FirstGivenName")
                        .HasColumnName("first_given_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FirstLanguageId")
                        .HasColumnName("first_language_id")
                        .HasColumnType("int")
                        .HasComment("Plan is language will be displayed in dropdown from language table and selected corresponding id will be stored into table.");

                    b.Property<bool?>("FreeLunchEligibility")
                        .HasColumnName("free_lunch_eligibility")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("varchar(6) CHARACTER SET utf8mb4")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressCity")
                        .HasColumnName("home_address_city")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressCountry")
                        .HasColumnName("home_address_country")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressLineOne")
                        .HasColumnName("home_address_line_one")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressLineTwo")
                        .HasColumnName("home_address_line_two")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressState")
                        .HasColumnName("home_address_state")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddressZip")
                        .HasColumnName("home_address_zip")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("HomePhone")
                        .HasColumnName("home_phone")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Instagram")
                        .HasColumnName("instagram")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("InsuranceCompany")
                        .HasColumnName("insurance_company")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("InsuranceCompanyPhone")
                        .HasColumnName("insurance_company_phone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastFamilyName")
                        .HasColumnName("last_family_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<bool?>("LepIndicator")
                        .HasColumnName("lep_indicator")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Linkedin")
                        .HasColumnName("linkedin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("MailingAddressCity")
                        .HasColumnName("mailing_address_city")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddressCountry")
                        .HasColumnName("mailing_address_country")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddressLineOne")
                        .HasColumnName("mailing_address_line_one")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddressLineTwo")
                        .HasColumnName("mailing_address_line_two")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool?>("MailingAddressSameToHome")
                        .HasColumnName("mailing_address_same_to_home")
                        .HasColumnType("tinyint(1)")
                        .HasComment("if true, home address will be replicated to mailing");

                    b.Property<string>("MailingAddressState")
                        .HasColumnName("mailing_address_state")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddressZip")
                        .HasColumnName("mailing_address_zip")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("MaritalStatus")
                        .HasColumnName("marital_status")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MedicalFacility")
                        .HasColumnName("medical_facility")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MedicalFacilityPhone")
                        .HasColumnName("medical_facility_phone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobile_phone")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("Nationality")
                        .HasColumnName("nationality")
                        .HasColumnType("int");

                    b.Property<string>("OtherGovtIssuedNumber")
                        .HasColumnName("other_govt_issued_number")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PersonalEmail")
                        .HasColumnName("personal_email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("PolicyHolder")
                        .HasColumnName("policy_holder")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PolicyNumber")
                        .HasColumnName("policy_number")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PreferredName")
                        .HasColumnName("preferred_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PreviousName")
                        .HasColumnName("previous_name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PrimaryCarePhysician")
                        .HasColumnName("primary_care_physician")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("PrimaryCarePhysicianPhone")
                        .HasColumnName("primary_care_physician_phone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Race")
                        .HasColumnName("race")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RollNumber")
                        .HasColumnName("roll_number")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Salutation")
                        .HasColumnName("salutation")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("SchoolBusDropOff")
                        .HasColumnName("school_bus_drop_off")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("SchoolBusPickUp")
                        .HasColumnName("school_bus_pick_up")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SchoolEmail")
                        .HasColumnName("school_email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<int?>("SecondLanguageId")
                        .HasColumnName("second_language_id")
                        .HasColumnType("int")
                        .HasComment("Plan is language will be displayed in dropdown from language table and selected corresponding id will be stored into table.");

                    b.Property<int?>("SectionId")
                        .HasColumnName("section_id")
                        .HasColumnType("int");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("social_security_number")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("SpecialEducationIndicator")
                        .HasColumnName("special_education_indicator")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StateId")
                        .HasColumnName("state_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("StudentGuid")
                        .HasColumnName("student_guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("StudentInternalId")
                        .HasColumnName("student_internal_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte[]>("StudentPhoto")
                        .HasColumnName("student_photo")
                        .HasColumnType("longblob");

                    b.Property<string>("StudentPortalId")
                        .HasColumnName("student_portal_id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Suffix")
                        .HasColumnName("suffix")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ThirdLanguageId")
                        .HasColumnName("third_language_id")
                        .HasColumnType("int")
                        .HasComment("Plan is language will be displayed in dropdown from language table and selected corresponding id will be stored into table.");

                    b.Property<string>("Twitter")
                        .HasColumnName("twitter")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Vision")
                        .HasColumnName("vision")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("VisionPhone")
                        .HasColumnName("vision_phone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Youtube")
                        .HasColumnName("youtube")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.HasKey("TenantId", "SchoolId", "StudentId")
                        .HasName("PK_student_master_1");

                    b.HasIndex("FirstLanguageId");

                    b.HasIndex("SecondLanguageId");

                    b.HasIndex("ThirdLanguageId");

                    b.HasIndex("TenantId", "SchoolId", "SectionId");

                    b.HasIndex("TenantId", "SchoolId", "StudentGuid")
                        .IsUnique()
                        .HasName("IX_student_master");

                    b.ToTable("student_master");
                });

            modelBuilder.Entity("opensis.data.Models.Subject", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime");

                    b.Property<string>("SubjectName")
                        .HasColumnName("subject_name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime");

                    b.HasKey("TenantId", "SchoolId", "SubjectId");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("opensis.data.Models.UserMaster", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("emailaddress")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lang_id")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<int>("MembershipId")
                        .HasColumnName("membership_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("passwordhash")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "SchoolId", "EmailAddress")
                        .HasName("PK_user_master_1");

                    b.HasIndex("LangId");

                    b.HasIndex("TenantId", "SchoolId", "MembershipId");

                    b.ToTable("user_master");
                });

            modelBuilder.Entity("opensis.data.Models.UserSecretQuestions", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int");

                    b.Property<string>("Emailaddress")
                        .HasColumnName("emailaddress")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Book")
                        .HasColumnName("book")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Cartoon")
                        .HasColumnName("cartoon")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hero")
                        .HasColumnName("hero")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnName("last_updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Movie")
                        .HasColumnName("movie")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "SchoolId", "Emailaddress");

                    b.ToTable("user_secret_questions");
                });

            modelBuilder.Entity("opensis.data.Models.AttendanceCode", b =>
                {
                    b.HasOne("opensis.data.Models.AttendanceCodeCategories", "AttendanceCodeCategories")
                        .WithMany("AttendanceCode")
                        .HasForeignKey("TenantId", "SchoolId", "AttendanceCategoryId")
                        .HasConstraintName("FK_attendance_code_attendance_code_categories")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.AttendanceCodeCategories", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("AttendanceCodeCategories")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_attendance_code_categories_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.Block", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Block")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_block_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.BlockPeriod", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("BlockPeriod")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_block_period_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.City", b =>
                {
                    b.HasOne("opensis.data.Models.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_city_state");
                });

            modelBuilder.Entity("opensis.data.Models.CourseBlockSchedule", b =>
                {
                    b.HasOne("opensis.data.Models.Block", "Block")
                        .WithMany("CourseBlockSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId")
                        .HasConstraintName("FK_course_block_schedule_block");

                    b.HasOne("opensis.data.Models.Rooms", "Rooms")
                        .WithMany("CourseBlockSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "RoomId")
                        .HasConstraintName("FK_course_block_schedule_rooms");

                    b.HasOne("opensis.data.Models.BlockPeriod", "BlockPeriod")
                        .WithMany("CourseBlockSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .HasConstraintName("FK_course_block_schedule_block_periods");
                });

            modelBuilder.Entity("opensis.data.Models.CourseCalendarSchedule", b =>
                {
                    b.HasOne("opensis.data.Models.Rooms", "Rooms")
                        .WithMany("CourseCalendarSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "RoomId")
                        .HasConstraintName("FK_course_calendar_schedule_rooms");

                    b.HasOne("opensis.data.Models.BlockPeriod", "BlockPeriod")
                        .WithMany("CourseCalendarSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .HasConstraintName("FK_course_calendar_schedule_block_periods");
                });

            modelBuilder.Entity("opensis.data.Models.CourseFixedSchedule", b =>
                {
                    b.HasOne("opensis.data.Models.Rooms", "Rooms")
                        .WithMany("CourseFixedSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "RoomId")
                        .HasConstraintName("FK_course_fixed_schedule_rooms");

                    b.HasOne("opensis.data.Models.BlockPeriod", "BlockPeriod")
                        .WithMany("CourseFixedSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .HasConstraintName("FK_course_fixed_schedule_block_periods");
                });

            modelBuilder.Entity("opensis.data.Models.CourseSection", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_course_section_school_master")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.AttendanceCodeCategories", "AttendanceCodeCategories")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "AttendanceCategoryId")
                        .HasConstraintName("FK_course_section_attendance_code_categories");

                    b.HasOne("opensis.data.Models.SchoolCalendars", "SchoolCalendars")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "CalendarId")
                        .HasConstraintName("FK_course_section_school_calendars");

                    b.HasOne("opensis.data.Models.Course", "Course")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId")
                        .HasConstraintName("FK_course_section_course")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.GradeScale", "GradeScale")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "GradeScaleId")
                        .HasConstraintName("FK_course_section_grade_scale")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.Quarters", "Quarters")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "QtrMarkingPeriodId")
                        .HasConstraintName("FK_course_section_quarters");

                    b.HasOne("opensis.data.Models.Semesters", "Semesters")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "SmstrMarkingPeriodId")
                        .HasConstraintName("FK_course_section_semesters");

                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYears")
                        .WithMany("CourseSection")
                        .HasForeignKey("TenantId", "SchoolId", "YrMarkingPeriodId")
                        .HasConstraintName("FK_course_section_school_years");
                });

            modelBuilder.Entity("opensis.data.Models.CourseStandard", b =>
                {
                    b.HasOne("opensis.data.Models.Course", "Course")
                        .WithMany("CourseStandard")
                        .HasForeignKey("TenantId", "SchoolId", "CourseId")
                        .HasConstraintName("FK_course_standard_course")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.GradeUsStandard", "GradeUsStandard")
                        .WithMany("CourseStandard")
                        .HasForeignKey("TenantId", "SchoolId", "StandardRefNo")
                        .HasConstraintName("FK_course_standard_grade_us_standard")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.CourseVariableSchedule", b =>
                {
                    b.HasOne("opensis.data.Models.Rooms", "Rooms")
                        .WithMany("CourseVariableSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "RoomId")
                        .HasConstraintName("FK_course_variable_schedule_rooms");

                    b.HasOne("opensis.data.Models.BlockPeriod", "BlockPeriod")
                        .WithMany("CourseVariableSchedule")
                        .HasForeignKey("TenantId", "SchoolId", "BlockId", "PeriodId")
                        .HasConstraintName("FK_course_variable_schedule_block_periods");
                });

            modelBuilder.Entity("opensis.data.Models.CustomFields", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("CustomFields")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_custom_fields_school_master")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.FieldsCategory", "FieldsCategory")
                        .WithMany("CustomFields")
                        .HasForeignKey("TenantId", "SchoolId", "CategoryId")
                        .HasConstraintName("FK_custom_fields_fields_category")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.CustomFieldsValue", b =>
                {
                    b.HasOne("opensis.data.Models.CustomFields", "CustomFields")
                        .WithMany("CustomFieldsValue")
                        .HasForeignKey("TenantId", "SchoolId", "CategoryId", "FieldId")
                        .HasConstraintName("FK_custom_fields_value_custom_fields")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.DpdownValuelist", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("DpdownValuelist")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_dpdown_valuelist_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.EffortGradeLibraryCategoryItem", b =>
                {
                    b.HasOne("opensis.data.Models.EffortGradeLibraryCategory", "EffortGradeLibraryCategory")
                        .WithMany("EffortGradeLibraryCategoryItem")
                        .HasForeignKey("TenantId", "SchoolId", "EffortCategoryId")
                        .HasConstraintName("FK_effort_category_item_effort_category")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.FieldsCategory", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("FieldsCategory")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_custom_category_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.Grade", b =>
                {
                    b.HasOne("opensis.data.Models.GradeScale", "GradeScale")
                        .WithMany("Grade")
                        .HasForeignKey("TenantId", "SchoolId", "GradeScaleId")
                        .HasConstraintName("FK_grade_grade_scale")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.GradeScale", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("GradeScale")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_grade_scale_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.Gradelevels", b =>
                {
                    b.HasOne("opensis.data.Models.GradeEquivalency", "IscedGradeLevelNavigation")
                        .WithMany("Gradelevels")
                        .HasForeignKey("IscedGradeLevel")
                        .HasConstraintName("FK_gradelevels_grade_equivalency");

                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Gradelevels")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_gradelevels_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.HonorRolls", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYears")
                        .WithMany("HonorRolls")
                        .HasForeignKey("TenantId", "SchoolId", "MarkingPeriodId")
                        .HasConstraintName("FK_honor_rolls_honor_rolls")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.Membership", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Membership")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("fk_table_membership_table_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.ParentAddress", b =>
                {
                    b.HasOne("opensis.data.Models.ParentInfo", "ParentInfo")
                        .WithMany("ParentAddress")
                        .HasForeignKey("TenantId", "SchoolId", "ParentId")
                        .HasConstraintName("FK_parent_address_parent_info")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.PermissionCategory", b =>
                {
                    b.HasOne("opensis.data.Models.PermissionGroup", "PermissionGroup")
                        .WithMany("PermissionCategory")
                        .HasForeignKey("TenantId", "SchoolId", "PermissionGroupId")
                        .HasConstraintName("FK_permission_category_permission_group")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.PermissionGroup", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("PermissionGroup")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_permission_group_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.PermissionSubcategory", b =>
                {
                    b.HasOne("opensis.data.Models.PermissionCategory", "PermissionCategory")
                        .WithMany("PermissionSubcategory")
                        .HasForeignKey("TenantId", "SchoolId", "PermissionCategoryId")
                        .HasConstraintName("FK_permission_subcategory_permission_category")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.ProgressPeriods", b =>
                {
                    b.HasOne("opensis.data.Models.Quarters", "Quarters")
                        .WithMany("ProgressPeriods")
                        .HasForeignKey("TenantId", "SchoolId", "QuarterId")
                        .HasConstraintName("FK_progress_periods_quarters")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.Quarters", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Quarters")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_quarters_school_master")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.Semesters", "Semesters")
                        .WithMany("Quarters")
                        .HasForeignKey("TenantId", "SchoolId", "SemesterId")
                        .HasConstraintName("FK_quarters_semesters");
                });

            modelBuilder.Entity("opensis.data.Models.RolePermission", b =>
                {
                    b.HasOne("opensis.data.Models.Membership", "Membership")
                        .WithMany("RolePermission")
                        .HasForeignKey("TenantId", "SchoolId", "MembershipId")
                        .HasConstraintName("FK_role_permission_membership");

                    b.HasOne("opensis.data.Models.PermissionCategory", "PermissionCategory")
                        .WithMany("RolePermission")
                        .HasForeignKey("TenantId", "SchoolId", "PermissionCategoryId")
                        .HasConstraintName("FK_role_permission_permission_category");

                    b.HasOne("opensis.data.Models.PermissionGroup", "PermissionGroup")
                        .WithMany("RolePermission")
                        .HasForeignKey("TenantId", "SchoolId", "PermissionGroupId")
                        .HasConstraintName("FK_role_permission_permission_groupId");

                    b.HasOne("opensis.data.Models.PermissionSubcategory", "PermissionSubcategory")
                        .WithMany("RolePermission")
                        .HasForeignKey("TenantId", "SchoolId", "PermissionSubcategoryId")
                        .HasConstraintName("FK_role_permission_permission_subcategory");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolCalendars", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolCalendars")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_school_calendars_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.SchoolDetail", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolDetail")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_school_detail_school_master");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolMaster", b =>
                {
                    b.HasOne("opensis.data.Models.Plans", "Plans")
                        .WithMany("SchoolMaster")
                        .HasForeignKey("TenantId", "SchoolId", "PlanId")
                        .HasConstraintName("FK_school_master_plans");
                });

            modelBuilder.Entity("opensis.data.Models.SchoolYears", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SchoolYears")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_school_years_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.SearchFilter", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("SearchFilter")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_search_filter_school_master")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.UserMaster", "UserMaster")
                        .WithMany("SearchFilter")
                        .HasForeignKey("TenantId", "SchoolId", "Emailaddress")
                        .HasConstraintName("FK_search_filter_user_master");
                });

            modelBuilder.Entity("opensis.data.Models.Semesters", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("Semesters")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_semesters_school_master")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.SchoolYears", "SchoolYears")
                        .WithMany("Semesters")
                        .HasForeignKey("TenantId", "SchoolId", "YearId")
                        .HasConstraintName("FK_semesters_school_years");
                });

            modelBuilder.Entity("opensis.data.Models.StaffCertificateInfo", b =>
                {
                    b.HasOne("opensis.data.Models.StaffMaster", "StaffMaster")
                        .WithMany("StaffCertificateInfo")
                        .HasForeignKey("TenantId", "StaffId")
                        .HasConstraintName("FK_staff_certificate_info_staff_master");
                });

            modelBuilder.Entity("opensis.data.Models.StaffMaster", b =>
                {
                    b.HasOne("opensis.data.Models.Language", "FirstLanguageNavigation")
                        .WithMany("StaffMasterFirstLanguageNavigation")
                        .HasForeignKey("FirstLanguage")
                        .HasConstraintName("FK_staff_master_language");

                    b.HasOne("opensis.data.Models.Language", "SecondLanguageNavigation")
                        .WithMany("StaffMasterSecondLanguageNavigation")
                        .HasForeignKey("SecondLanguage")
                        .HasConstraintName("FK_staff_master_language1");

                    b.HasOne("opensis.data.Models.Language", "ThirdLanguageNavigation")
                        .WithMany("StaffMasterThirdLanguageNavigation")
                        .HasForeignKey("ThirdLanguage")
                        .HasConstraintName("FK_staff_master_language2");

                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("StaffMaster")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_staff_master_school_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.StaffSchoolInfo", b =>
                {
                    b.HasOne("opensis.data.Models.StaffMaster", "StaffMaster")
                        .WithMany("StaffSchoolInfo")
                        .HasForeignKey("TenantId", "StaffId")
                        .HasConstraintName("FK_staff_school_info_staff_master");
                });

            modelBuilder.Entity("opensis.data.Models.State", b =>
                {
                    b.HasOne("opensis.data.Models.Country", "Country")
                        .WithMany("State")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_state_country");
                });

            modelBuilder.Entity("opensis.data.Models.StudentComments", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentComments")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .HasConstraintName("FK_student_comments_student_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.StudentDocuments", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentDocuments")
                        .HasForeignKey("TenantId", "SchoolId", "StudentId")
                        .HasConstraintName("FK_student_documents_student_master")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.StudentEnrollment", b =>
                {
                    b.HasOne("opensis.data.Models.StudentMaster", "StudentMaster")
                        .WithMany("StudentEnrollment")
                        .HasForeignKey("TenantId", "SchoolId", "StudentGuid")
                        .HasConstraintName("FK_student_enrollment_student_master")
                        .HasPrincipalKey("TenantId", "SchoolId", "StudentGuid")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.StudentEnrollmentCode", b =>
                {
                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("StudentEnrollmentCode")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_student_enrollment_code_school_master1")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.StudentMaster", b =>
                {
                    b.HasOne("opensis.data.Models.Language", "FirstLanguage")
                        .WithMany("StudentMasterFirstLanguage")
                        .HasForeignKey("FirstLanguageId")
                        .HasConstraintName("FK_student_master_language");

                    b.HasOne("opensis.data.Models.Language", "SecondLanguage")
                        .WithMany("StudentMasterSecondLanguage")
                        .HasForeignKey("SecondLanguageId")
                        .HasConstraintName("FK_student_master_language1");

                    b.HasOne("opensis.data.Models.Language", "ThirdLanguage")
                        .WithMany("StudentMasterThirdLanguage")
                        .HasForeignKey("ThirdLanguageId")
                        .HasConstraintName("FK_student_master_language2");

                    b.HasOne("opensis.data.Models.SchoolMaster", "SchoolMaster")
                        .WithMany("StudentMaster")
                        .HasForeignKey("TenantId", "SchoolId")
                        .HasConstraintName("FK_student_master_school_master")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.Sections", "Sections")
                        .WithMany("StudentMaster")
                        .HasForeignKey("TenantId", "SchoolId", "SectionId")
                        .HasConstraintName("FK_student_master_sections");
                });

            modelBuilder.Entity("opensis.data.Models.UserMaster", b =>
                {
                    b.HasOne("opensis.data.Models.Language", "Lang")
                        .WithMany("UserMaster")
                        .HasForeignKey("LangId")
                        .HasConstraintName("FK_user_master_language")
                        .IsRequired();

                    b.HasOne("opensis.data.Models.Membership", "Membership")
                        .WithMany("UserMaster")
                        .HasForeignKey("TenantId", "SchoolId", "MembershipId")
                        .HasConstraintName("FK_user_master_membership")
                        .IsRequired();
                });

            modelBuilder.Entity("opensis.data.Models.UserSecretQuestions", b =>
                {
                    b.HasOne("opensis.data.Models.UserMaster", "UserMaster")
                        .WithOne("UserSecretQuestions")
                        .HasForeignKey("opensis.data.Models.UserSecretQuestions", "TenantId", "SchoolId", "Emailaddress")
                        .HasConstraintName("FK_user_secret_questions_user_master")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
